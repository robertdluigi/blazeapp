"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stream-chat";
exports.ids = ["vendor-chunks/stream-chat"];
exports.modules = {

/***/ "(rsc)/./node_modules/stream-chat/dist/index.es.js":
/*!***************************************************!*\
  !*** ./node_modules/stream-chat/dist/index.es.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Allow: () => (/* binding */ Allow),\n/* harmony export */   AllowAll: () => (/* binding */ AllowAll),\n/* harmony export */   AnyResource: () => (/* binding */ AnyResource),\n/* harmony export */   AnyRole: () => (/* binding */ AnyRole),\n/* harmony export */   BuiltinPermissions: () => (/* binding */ BuiltinPermissions),\n/* harmony export */   BuiltinRoles: () => (/* binding */ BuiltinRoles),\n/* harmony export */   Campaign: () => (/* binding */ Campaign),\n/* harmony export */   Channel: () => (/* binding */ Channel),\n/* harmony export */   ChannelState: () => (/* binding */ ChannelState),\n/* harmony export */   CheckSignature: () => (/* binding */ CheckSignature),\n/* harmony export */   ClientState: () => (/* binding */ ClientState),\n/* harmony export */   Deny: () => (/* binding */ Deny),\n/* harmony export */   DenyAll: () => (/* binding */ DenyAll),\n/* harmony export */   DevToken: () => (/* binding */ DevToken),\n/* harmony export */   EVENT_MAP: () => (/* binding */ EVENT_MAP),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InsightMetrics: () => (/* binding */ InsightMetrics),\n/* harmony export */   JWTServerToken: () => (/* binding */ JWTServerToken),\n/* harmony export */   JWTUserToken: () => (/* binding */ JWTUserToken),\n/* harmony export */   MaxPriority: () => (/* binding */ MaxPriority),\n/* harmony export */   MinPriority: () => (/* binding */ MinPriority),\n/* harmony export */   Permission: () => (/* binding */ Permission),\n/* harmony export */   Segment: () => (/* binding */ Segment),\n/* harmony export */   StableWSConnection: () => (/* binding */ StableWSConnection),\n/* harmony export */   StreamChat: () => (/* binding */ StreamChat),\n/* harmony export */   Thread: () => (/* binding */ Thread),\n/* harmony export */   TokenManager: () => (/* binding */ TokenManager),\n/* harmony export */   UserFromToken: () => (/* binding */ UserFromToken),\n/* harmony export */   VotingVisibility: () => (/* binding */ VotingVisibility),\n/* harmony export */   buildWsFatalInsight: () => (/* binding */ buildWsFatalInsight),\n/* harmony export */   buildWsSuccessAfterFailureInsight: () => (/* binding */ buildWsSuccessAfterFailureInsight),\n/* harmony export */   chatCodes: () => (/* binding */ chatCodes),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   formatMessage: () => (/* binding */ formatMessage),\n/* harmony export */   isOwnUser: () => (/* binding */ isOwnUser),\n/* harmony export */   logChatPromiseExecution: () => (/* binding */ logChatPromiseExecution),\n/* harmony export */   postInsights: () => (/* binding */ postInsights)\n/* harmony export */ });\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-js */ \"(rsc)/./node_modules/base64-js/index.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(rsc)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(rsc)/./node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(rsc)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(rsc)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(rsc)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(rsc)/./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(rsc)/./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(rsc)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"(rsc)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(rsc)/./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! form-data */ \"(rsc)/./node_modules/form-data/lib/form_data.js\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! isomorphic-ws */ \"(rsc)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"(rsc)/./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(rsc)/./node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"(rsc)/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"(rsc)/./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ \"(rsc)/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction isString$1(arrayOrString) {\n    return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n    return !!callback && isString$1(arrayOrString);\n} // source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map(arrayOrString, callback) {\n    var res = [];\n    if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n        for(var k = 0, len = arrayOrString.length; k < len; k++){\n            if (arrayOrString.charAt(k)) {\n                var kValue = arrayOrString.charAt(k);\n                var mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n        for(var _k = 0, _len = arrayOrString.length; _k < _len; _k++){\n            if (_k in arrayOrString) {\n                var _kValue = arrayOrString[_k];\n                var _mappedValue = callback(_kValue, _k, arrayOrString);\n                res[_k] = _mappedValue;\n            }\n        }\n    }\n    return res;\n}\nvar encodeBase64 = function encodeBase64(data) {\n    return (0,base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray)(new Uint8Array(map(data, function(char) {\n        return char.charCodeAt(0);\n    })));\n}; // base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nvar decodeBase64 = function decodeBase64(s) {\n    var e = {}, w = String.fromCharCode, L = s.length;\n    var i, b = 0, c, x, l = 0, a, r = \"\";\n    var A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\nfunction ownKeys$8(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$8(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$8(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$8(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createForOfIteratorHelper$4(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function(_e) {\n                    function e(_x) {\n                        return _e.apply(this, arguments);\n                    }\n                    e.toString = function() {\n                        return _e.toString();\n                    };\n                    return e;\n                }(function(e) {\n                    throw e;\n                }),\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function(_e2) {\n            function e(_x2) {\n                return _e2.apply(this, arguments);\n            }\n            e.toString = function() {\n                return _e2.toString();\n            };\n            return e;\n        }(function(e) {\n            didErr = true;\n            err = e;\n        }),\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$4(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$4(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);\n}\nfunction _arrayLikeToArray$4(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */ function logChatPromiseExecution(promise, name) {\n    promise.then().catch(function(error) {\n        console.warn(\"failed to do \".concat(name, \", ran into error: \"), error);\n    });\n}\nvar sleep = function sleep(m) {\n    return new Promise(function(r) {\n        return setTimeout(r, m);\n    });\n};\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === \"[object Function]\" || \"function\" === typeof value || value instanceof Function);\n}\nvar chatCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000\n};\nfunction isReadableStream(obj) {\n    return obj !== null && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(obj) === \"object\" && (obj.readable || typeof obj._read === \"function\");\n}\nfunction isBuffer(obj) {\n    return obj != null && obj.constructor != null && // @ts-expect-error\n    typeof obj.constructor.isBuffer === \"function\" && // @ts-expect-error\n    obj.constructor.isBuffer(obj);\n}\nfunction isFileWebAPI(uri) {\n    return  false && 0;\n}\nfunction isOwnUser(user) {\n    return (user === null || user === void 0 ? void 0 : user.total_unread_count) !== undefined;\n}\nfunction isBlobWebAPI(uri) {\n    return  false && 0;\n}\nfunction isOwnUserBaseProperty(property) {\n    var ownUserBaseProperties = {\n        channel_mutes: true,\n        devices: true,\n        mutes: true,\n        total_unread_count: true,\n        unread_channels: true,\n        unread_count: true,\n        unread_threads: true,\n        invisible: true,\n        privacy_settings: true,\n        roles: true\n    };\n    return ownUserBaseProperties[property];\n}\nfunction addFileToFormData(uri, name, contentType) {\n    var data = new (form_data__WEBPACK_IMPORTED_MODULE_12___default())();\n    if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n        if (name) data.append(\"file\", uri, name);\n        else data.append(\"file\", uri);\n    } else {\n        data.append(\"file\", {\n            uri: uri,\n            name: name || uri.split(\"/\").reverse()[0],\n            contentType: contentType || undefined,\n            type: contentType || undefined\n        });\n    }\n    return data;\n}\nfunction normalizeQuerySort(sort) {\n    var sortFields = [];\n    var sortArr = Array.isArray(sort) ? sort : [\n        sort\n    ];\n    var _iterator = _createForOfIteratorHelper$4(sortArr), _step;\n    try {\n        for(_iterator.s(); !(_step = _iterator.n()).done;){\n            var item = _step.value;\n            var entries = Object.entries(item);\n            if (entries.length > 1) {\n                console.warn(\"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\");\n            }\n            for(var _i = 0, _entries = entries; _i < _entries.length; _i++){\n                var _entries$_i = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11___default()(_entries[_i], 2), field = _entries$_i[0], direction = _entries$_i[1];\n                sortFields.push({\n                    field: field,\n                    direction: direction\n                });\n            }\n        }\n    } catch (err) {\n        _iterator.e(err);\n    } finally{\n        _iterator.f();\n    }\n    return sortFields;\n}\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n    var max = Math.min(500 + numberOfFailures * 2000, 25000);\n    var min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    var s = \"\";\n    for(var i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, \"0\");\n    }\n    return s;\n} // https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    var bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    var max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(var i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nvar getRandomValues = function() {\n    var _crypto;\n    if (typeof crypto !== \"undefined\" && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.getRandomValues) !== \"undefined\") {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== \"undefined\") {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n}();\nfunction getRandomBytes(length) {\n    var bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\nfunction convertErrorToJson(err) {\n    var jsonObj = {};\n    if (!err) return jsonObj;\n    try {\n        Object.getOwnPropertyNames(err).forEach(function(key) {\n            jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n        });\n    } catch (_) {\n        return {\n            error: \"failed to serialize the error\"\n        };\n    }\n    return jsonObj;\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */ function isOnline() {\n    var nav = typeof navigator !== \"undefined\" ? navigator :  false ? 0 : undefined;\n    if (!nav) {\n        console.warn(\"isOnline failed to access window.navigator and assume browser is online\");\n        return true;\n    } // RN navigator has undefined for onLine\n    if (typeof nav.onLine !== \"boolean\") {\n        return true;\n    }\n    return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\nvar axiosParamsSerializer = function axiosParamsSerializer(params) {\n    var newParams = [];\n    for(var k in params){\n        // Stream backend doesn't treat \"undefined\" value same as value not being present.\n        // So, we need to skip the undefined values.\n        if (params[k] === undefined) continue;\n        if (Array.isArray(params[k]) || _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(params[k]) === \"object\") {\n            newParams.push(\"\".concat(k, \"=\").concat(encodeURIComponent(JSON.stringify(params[k]))));\n        } else {\n            newParams.push(\"\".concat(k, \"=\").concat(encodeURIComponent(params[k])));\n        }\n    }\n    return newParams.join(\"&\");\n};\n/**\n * formatMessage - Takes the message object. Parses the dates, sets __html\n * and sets the status to received if missing. Returns a message object\n *\n * @param {MessageResponse<StreamChatGenerics>} message a message object\n *\n */ function formatMessage(message) {\n    return _objectSpread$8(_objectSpread$8({}, message), {}, {\n        /**\n     * @deprecated please use `html`\n     */ __html: message.html,\n        // parse the date..\n        pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n        created_at: message.created_at ? new Date(message.created_at) : new Date(),\n        updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n        status: message.status || \"received\",\n        reaction_groups: maybeGetReactionGroupsFallback(message.reaction_groups, message.reaction_counts, message.reaction_scores)\n    });\n}\nfunction addToMessageList(messages, message) {\n    var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"created_at\";\n    var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var addMessageToList = addIfDoesNotExist || timestampChanged;\n    var messageArr = messages; // if created_at has changed, message should be filtered and re-inserted in correct order\n    // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n    if (timestampChanged) {\n        messageArr = messageArr.filter(function(msg) {\n            return !(msg.id && message.id === msg.id);\n        });\n    } // Get array length after filtering\n    var messageArrayLength = messageArr.length; // for empty list just concat and return unless it's an update or deletion\n    if (messageArrayLength === 0 && addMessageToList) {\n        return messageArr.concat(message);\n    } else if (messageArrayLength === 0) {\n        return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n    }\n    var messageTime = message[sortBy].getTime();\n    var messageIsNewest = messageArr[messageArrayLength - 1][sortBy].getTime() < messageTime; // if message is newer than last item in the list concat and return unless it's an update or deletion\n    if (messageIsNewest && addMessageToList) {\n        return messageArr.concat(message);\n    } else if (messageIsNewest) {\n        return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n    } // find the closest index to push the new message\n    var left = 0;\n    var middle = 0;\n    var right = messageArrayLength - 1;\n    while(left <= right){\n        middle = Math.floor((right + left) / 2);\n        if (messageArr[middle][sortBy].getTime() <= messageTime) left = middle + 1;\n        else right = middle - 1;\n    } // message already exists and not filtered due to timestampChanged, update and return\n    if (!timestampChanged && message.id) {\n        if (messageArr[left] && message.id === messageArr[left].id) {\n            messageArr[left] = message;\n            return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n        }\n        if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {\n            messageArr[left - 1] = message;\n            return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n        }\n    } // Do not add updated or deleted messages to the list if they do not already exist\n    // or have a timestamp change.\n    if (addMessageToList) {\n        messageArr.splice(left, 0, message);\n    }\n    return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n}\nfunction maybeGetReactionGroupsFallback(groups, counts, scores) {\n    if (groups) {\n        return groups;\n    }\n    if (counts && scores) {\n        var fallback = {};\n        for(var _i2 = 0, _Object$keys = Object.keys(counts); _i2 < _Object$keys.length; _i2++){\n            var type = _Object$keys[_i2];\n            fallback[type] = {\n                count: counts[type],\n                sum_scores: scores[type]\n            };\n        }\n        return fallback;\n    }\n    return null;\n}\nfunction ownKeys$7(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$7(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$7(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$7(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\n * ChannelState - A container class for the channel state.\n */ var ChannelState = /*#__PURE__*/ function() {\n    /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */ /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */ function ChannelState(channel) {\n        var _this = this, _channel$state;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, ChannelState);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_channel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"watcher_count\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"typing\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"read\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"pinnedMessages\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"pending_messages\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"threads\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"mutedUsers\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"watchers\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"members\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"unreadCount\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"membership\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"last_message_at\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isUpToDate\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"messageSets\", []);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setIsUpToDate\", function(isUpToDate) {\n            _this.isUpToDate = isUpToDate;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"removeMessageFromArray\", function(msgArray, msg) {\n            var result = msgArray.filter(function(message) {\n                return !(!!message.id && !!msg.id && message.id === msg.id);\n            });\n            return {\n                removed: result.length < msgArray.length,\n                result: result\n            };\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updatePollVote\", function(pollVote, poll, messageId) {\n            var _message$poll;\n            var message = _this.findMessage(messageId);\n            if (!message) return;\n            if (message.poll_id !== pollVote.poll_id) return;\n            var updatedPoll = _objectSpread$7({}, poll);\n            var ownVotes = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(((_message$poll = message.poll) === null || _message$poll === void 0 ? void 0 : _message$poll.own_votes) || []);\n            if (pollVote.user_id === _this._channel.getClient().userID) {\n                if (pollVote.option_id && poll.enforce_unique_vote) {\n                    // remove all previous votes where option_id is not empty\n                    ownVotes = ownVotes.filter(function(vote) {\n                        return !vote.option_id;\n                    });\n                } else if (pollVote.answer_text) {\n                    // remove all previous votes where option_id is empty\n                    ownVotes = ownVotes.filter(function(vote) {\n                        return vote.answer_text;\n                    });\n                }\n                ownVotes.push(pollVote);\n            }\n            updatedPoll.own_votes = ownVotes;\n            var newMessage = _objectSpread$7(_objectSpread$7({}, message), {}, {\n                poll: updatedPoll\n            });\n            _this.addMessageSorted(newMessage, false, false);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"addPollVote\", function(pollVote, poll, messageId) {\n            var _message$poll2;\n            var message = _this.findMessage(messageId);\n            if (!message) return;\n            if (message.poll_id !== pollVote.poll_id) return;\n            var updatedPoll = _objectSpread$7({}, poll);\n            var ownVotes = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(((_message$poll2 = message.poll) === null || _message$poll2 === void 0 ? void 0 : _message$poll2.own_votes) || []);\n            if (pollVote.user_id === _this._channel.getClient().userID) {\n                ownVotes.push(pollVote);\n            }\n            updatedPoll.own_votes = ownVotes;\n            var newMessage = _objectSpread$7(_objectSpread$7({}, message), {}, {\n                poll: updatedPoll\n            });\n            _this.addMessageSorted(newMessage, false, false);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"removePollVote\", function(pollVote, poll, messageId) {\n            var _message$poll3;\n            var message = _this.findMessage(messageId);\n            if (!message) return;\n            if (message.poll_id !== pollVote.poll_id) return;\n            var updatedPoll = _objectSpread$7({}, poll);\n            var ownVotes = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(((_message$poll3 = message.poll) === null || _message$poll3 === void 0 ? void 0 : _message$poll3.own_votes) || []);\n            if (pollVote.user_id === _this._channel.getClient().userID) {\n                var index = ownVotes.findIndex(function(vote) {\n                    return vote.option_id === pollVote.option_id;\n                });\n                if (index > -1) {\n                    ownVotes.splice(index, 1);\n                }\n            }\n            updatedPoll.own_votes = ownVotes;\n            var newMessage = _objectSpread$7(_objectSpread$7({}, message), {}, {\n                poll: updatedPoll\n            });\n            _this.addMessageSorted(newMessage, false, false);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updatePoll\", function(poll, messageId) {\n            var _message$poll4;\n            var message = _this.findMessage(messageId);\n            if (!message) return;\n            var updatedPoll = _objectSpread$7(_objectSpread$7({}, poll), {}, {\n                own_votes: _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(((_message$poll4 = message.poll) === null || _message$poll4 === void 0 ? void 0 : _message$poll4.own_votes) || [])\n            });\n            var newMessage = _objectSpread$7(_objectSpread$7({}, message), {}, {\n                poll: updatedPoll\n            });\n            _this.addMessageSorted(newMessage, false, false);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updateUserMessages\", function(user) {\n            var _updateUserMessages = function _updateUserMessages(messages, user) {\n                for(var i = 0; i < messages.length; i++){\n                    var _m$user;\n                    var m = messages[i];\n                    if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user.id) {\n                        messages[i] = _objectSpread$7(_objectSpread$7({}, m), {}, {\n                            user: user\n                        });\n                    }\n                }\n            };\n            _this.messageSets.forEach(function(set) {\n                return _updateUserMessages(set.messages, user);\n            });\n            for(var parentId in _this.threads){\n                _updateUserMessages(_this.threads[parentId], user);\n            }\n            _updateUserMessages(_this.pinnedMessages, user);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"deleteUserMessages\", function(user) {\n            var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var _deleteUserMessages = function _deleteUserMessages(messages, user) {\n                var hardDelete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                for(var i = 0; i < messages.length; i++){\n                    var _m$user2;\n                    var m = messages[i];\n                    if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user.id) {\n                        continue;\n                    }\n                    if (hardDelete) {\n                        /**\n             * In case of hard delete, we need to strip down all text, html,\n             * attachments and all the custom properties on message\n             */ messages[i] = {\n                            cid: m.cid,\n                            created_at: m.created_at,\n                            deleted_at: user.deleted_at,\n                            id: m.id,\n                            latest_reactions: [],\n                            mentioned_users: [],\n                            own_reactions: [],\n                            parent_id: m.parent_id,\n                            reply_count: m.reply_count,\n                            status: m.status,\n                            thread_participants: m.thread_participants,\n                            type: \"deleted\",\n                            updated_at: m.updated_at,\n                            user: m.user\n                        };\n                    } else {\n                        messages[i] = _objectSpread$7(_objectSpread$7({}, m), {}, {\n                            type: \"deleted\",\n                            deleted_at: user.deleted_at\n                        });\n                    }\n                }\n            };\n            _this.messageSets.forEach(function(set) {\n                return _deleteUserMessages(set.messages, user, hardDelete);\n            });\n            for(var parentId in _this.threads){\n                _deleteUserMessages(_this.threads[parentId], user, hardDelete);\n            }\n            _deleteUserMessages(_this.pinnedMessages, user, hardDelete);\n        });\n        this._channel = channel;\n        this.watcher_count = 0;\n        this.typing = {};\n        this.read = {};\n        this.initMessages();\n        this.pinnedMessages = [];\n        this.pending_messages = [];\n        this.threads = {}; // a list of users to hide messages from\n        this.mutedUsers = [];\n        this.watchers = {};\n        this.members = {};\n        this.membership = {};\n        this.unreadCount = 0;\n        /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */ this.isUpToDate = true;\n        this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(ChannelState, [\n        {\n            key: \"messages\",\n            get: function get() {\n                var _this$messageSets$fin;\n                return ((_this$messageSets$fin = this.messageSets.find(function(s) {\n                    return s.isCurrent;\n                })) === null || _this$messageSets$fin === void 0 ? void 0 : _this$messageSets$fin.messages) || [];\n            },\n            set: function set(messages) {\n                var index = this.messageSets.findIndex(function(s) {\n                    return s.isCurrent;\n                });\n                this.messageSets[index].messages = messages;\n            }\n        },\n        {\n            key: \"latestMessages\",\n            get: function get() {\n                var _this$messageSets$fin2;\n                return ((_this$messageSets$fin2 = this.messageSets.find(function(s) {\n                    return s.isLatest;\n                })) === null || _this$messageSets$fin2 === void 0 ? void 0 : _this$messageSets$fin2.messages) || [];\n            },\n            set: function set(messages) {\n                var index = this.messageSets.findIndex(function(s) {\n                    return s.isLatest;\n                });\n                this.messageSets[index].messages = messages;\n            }\n        },\n        {\n            key: \"addMessageSorted\",\n            value: function addMessageSorted(newMessage) {\n                var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                var messageSetToAddToIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n                return this.addMessagesSorted([\n                    newMessage\n                ], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);\n            }\n        },\n        {\n            key: \"formatMessage\",\n            value: function formatMessage(message) {\n                return _objectSpread$7(_objectSpread$7({}, message), {}, {\n                    /**\n         * @deprecated please use `html`\n         */ __html: message.html,\n                    // parse the date..\n                    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n                    created_at: message.created_at ? new Date(message.created_at) : new Date(),\n                    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n                    status: message.status || \"received\"\n                });\n            }\n        },\n        {\n            key: \"addMessagesSorted\",\n            value: function addMessagesSorted(newMessages) {\n                var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var initializing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                var messageSetToAddToIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"current\";\n                var _this$findTargetMessa = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist), messagesToAdd = _this$findTargetMessa.messagesToAdd, targetMessageSetIndex = _this$findTargetMessa.targetMessageSetIndex;\n                for(var i = 0; i < messagesToAdd.length; i += 1){\n                    var isFromShadowBannedUser = messagesToAdd[i].shadowed;\n                    if (isFromShadowBannedUser) {\n                        continue;\n                    } // If message is already formatted we can skip the tasks below\n                    // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n                    // This will be also true for message previews used by some SDKs\n                    var isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n                    var message = void 0;\n                    if (isMessageFormatted) {\n                        message = messagesToAdd[i];\n                    } else {\n                        var _this$_channel;\n                        message = this.formatMessage(messagesToAdd[i]);\n                        if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {\n                            /**\n             * Store the reference to user for this channel, so that when we have to\n             * handle updates to user, we can use the reference map, to determine which\n             * channels need to be updated with updated user object.\n             */ this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n                        }\n                        if (initializing && message.id && this.threads[message.id]) {\n                            // If we are initializing the state of channel (e.g., in case of connection recovery),\n                            // then in that case we remove thread related to this message from threads object.\n                            // This way we can ensure that we don't have any stale data in thread object\n                            // and consumer can refetch the replies.\n                            delete this.threads[message.id];\n                        }\n                        if (!this.last_message_at) {\n                            this.last_message_at = new Date(message.created_at.getTime());\n                        }\n                        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n                            this.last_message_at = new Date(message.created_at.getTime());\n                        }\n                    } // update or append the messages...\n                    var parentID = message.parent_id; // add to the given message set\n                    if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n                        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, \"created_at\", addIfDoesNotExist);\n                    }\n                    /**\n         * Add message to thread if applicable and the message\n         * was added when querying for replies, or the thread already exits.\n         * This is to prevent the thread state from getting out of sync if\n         * a thread message is shown in channel but older than the newest thread\n         * message. This situation can result in a thread state where a random\n         * message is \"oldest\" message, and newer messages are therefore not loaded.\n         * This can also occur if an old thread message is updated.\n         */ if (parentID && !initializing) {\n                        var thread = this.threads[parentID] || [];\n                        this.threads[parentID] = this._addToMessageList(thread, message, timestampChanged, \"created_at\", addIfDoesNotExist);\n                    }\n                }\n                return {\n                    messageSet: this.messageSets[targetMessageSetIndex]\n                };\n            }\n        },\n        {\n            key: \"addPinnedMessages\",\n            value: function addPinnedMessages(pinnedMessages) {\n                for(var i = 0; i < pinnedMessages.length; i += 1){\n                    this.addPinnedMessage(pinnedMessages[i]);\n                }\n            }\n        },\n        {\n            key: \"addPinnedMessage\",\n            value: function addPinnedMessage(pinnedMessage) {\n                this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, \"pinned_at\");\n            }\n        },\n        {\n            key: \"removePinnedMessage\",\n            value: function removePinnedMessage(message) {\n                var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message), result = _this$removeMessageFr.result;\n                this.pinnedMessages = result;\n            }\n        },\n        {\n            key: \"addReaction\",\n            value: function addReaction(reaction, message, enforce_unique) {\n                var _this2 = this;\n                if (!message) return;\n                var messageWithReaction = message;\n                this._updateMessage(message, function(msg) {\n                    messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n                    return _this2.formatMessage(messageWithReaction);\n                });\n                return messageWithReaction;\n            }\n        },\n        {\n            key: \"_addOwnReactionToMessage\",\n            value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {\n                if (enforce_unique) {\n                    ownReactions = [];\n                } else {\n                    ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n                }\n                ownReactions = ownReactions || [];\n                if (this._channel.getClient().userID === reaction.user_id) {\n                    ownReactions.push(reaction);\n                }\n                return ownReactions;\n            }\n        },\n        {\n            key: \"_removeOwnReactionFromMessage\",\n            value: function _removeOwnReactionFromMessage(ownReactions, reaction) {\n                if (ownReactions) {\n                    return ownReactions.filter(function(item) {\n                        return item.user_id !== reaction.user_id || item.type !== reaction.type;\n                    });\n                }\n                return ownReactions;\n            }\n        },\n        {\n            key: \"removeReaction\",\n            value: function removeReaction(reaction, message) {\n                var _this3 = this;\n                if (!message) return;\n                var messageWithReaction = message;\n                this._updateMessage(message, function(msg) {\n                    messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n                    return _this3.formatMessage(messageWithReaction);\n                });\n                return messageWithReaction;\n            }\n        },\n        {\n            key: \"_updateQuotedMessageReferences\",\n            value: function _updateQuotedMessageReferences(_ref) {\n                var _this4 = this;\n                var message = _ref.message, remove = _ref.remove;\n                var parseMessage = function parseMessage(m) {\n                    var _m$pinned_at, _m$updated_at;\n                    return _objectSpread$7(_objectSpread$7({}, m), {}, {\n                        created_at: m.created_at.toISOString(),\n                        pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toISOString(),\n                        updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toISOString()\n                    });\n                };\n                var update = function update(messages) {\n                    var updatedMessages = messages.reduce(function(acc, msg) {\n                        if (msg.quoted_message_id === message.id) {\n                            acc.push(_objectSpread$7(_objectSpread$7({}, parseMessage(msg)), {}, {\n                                quoted_message: remove ? _objectSpread$7(_objectSpread$7({}, message), {}, {\n                                    attachments: []\n                                }) : message\n                            }));\n                        }\n                        return acc;\n                    }, []);\n                    _this4.addMessagesSorted(updatedMessages, true);\n                };\n                if (!message.parent_id) {\n                    this.messageSets.forEach(function(set) {\n                        return update(set.messages);\n                    });\n                } else if (message.parent_id && this.threads[message.parent_id]) {\n                    // prevent going through all the threads even though it is possible to quote a message from another thread\n                    update(this.threads[message.parent_id]);\n                }\n            }\n        },\n        {\n            key: \"removeQuotedMessageReferences\",\n            value: function removeQuotedMessageReferences(message) {\n                this._updateQuotedMessageReferences({\n                    message: message,\n                    remove: true\n                });\n            }\n        },\n        {\n            key: \"_updateMessage\",\n            value: function _updateMessage(message, updateFunc) {\n                var parent_id = message.parent_id, show_in_channel = message.show_in_channel, pinned = message.pinned;\n                if (parent_id && this.threads[parent_id]) {\n                    var thread = this.threads[parent_id];\n                    var msgIndex = thread.findIndex(function(msg) {\n                        return msg.id === message.id;\n                    });\n                    if (msgIndex !== -1) {\n                        thread[msgIndex] = updateFunc(thread[msgIndex]);\n                        this.threads[parent_id] = thread;\n                    }\n                }\n                if (!show_in_channel && !parent_id || show_in_channel) {\n                    var messageSetIndex = this.findMessageSetIndex(message);\n                    if (messageSetIndex !== -1) {\n                        var _msgIndex = this.messageSets[messageSetIndex].messages.findIndex(function(msg) {\n                            return msg.id === message.id;\n                        });\n                        if (_msgIndex !== -1) {\n                            this.messageSets[messageSetIndex].messages[_msgIndex] = updateFunc(this.messageSets[messageSetIndex].messages[_msgIndex]);\n                        }\n                    }\n                }\n                if (pinned) {\n                    var _msgIndex2 = this.pinnedMessages.findIndex(function(msg) {\n                        return msg.id === message.id;\n                    });\n                    if (_msgIndex2 !== -1) {\n                        this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);\n                    }\n                }\n            }\n        },\n        {\n            key: \"_addToMessageList\",\n            value: /**\n     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n     *\n     * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages\n     * @param message\n     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n     * @param {string} sortBy field name to use to sort the messages by\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     */ function _addToMessageList(messages, message) {\n                var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"created_at\";\n                var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n                return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);\n            }\n        },\n        {\n            key: \"removeMessage\",\n            value: function removeMessage(messageToRemove) {\n                var isRemoved = false;\n                if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n                    var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove), removed = _this$removeMessageFr2.removed, threadMessages = _this$removeMessageFr2.result;\n                    this.threads[messageToRemove.parent_id] = threadMessages;\n                    isRemoved = removed;\n                } else {\n                    var _messageToRemove$mess;\n                    var messageSetIndex = (_messageToRemove$mess = messageToRemove.messageSetIndex) !== null && _messageToRemove$mess !== void 0 ? _messageToRemove$mess : this.findMessageSetIndex(messageToRemove);\n                    if (messageSetIndex !== -1) {\n                        var _this$removeMessageFr3 = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove), _removed = _this$removeMessageFr3.removed, messages = _this$removeMessageFr3.result;\n                        this.messageSets[messageSetIndex].messages = messages;\n                        isRemoved = _removed;\n                    }\n                }\n                return isRemoved;\n            }\n        },\n        {\n            key: \"filterErrorMessages\",\n            value: /**\n     * filterErrorMessages - Removes error messages from the channel state.\n     *\n     */ function filterErrorMessages() {\n                var filteredMessages = this.latestMessages.filter(function(message) {\n                    return message.type !== \"error\";\n                });\n                this.latestMessages = filteredMessages;\n            }\n        },\n        {\n            key: \"clean\",\n            value: function clean() {\n                var now = new Date(); // prevent old users from showing up as typing\n                for(var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++){\n                    var _Object$entries$_i = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11___default()(_Object$entries[_i], 2), userID = _Object$entries$_i[0], lastEvent = _Object$entries$_i[1];\n                    var receivedAt = typeof lastEvent.received_at === \"string\" ? new Date(lastEvent.received_at) : lastEvent.received_at || new Date();\n                    if (now.getTime() - receivedAt.getTime() > 7000) {\n                        delete this.typing[userID];\n                        this._channel.getClient().dispatchEvent({\n                            cid: this._channel.cid,\n                            type: \"typing.stop\",\n                            user: {\n                                id: userID\n                            }\n                        });\n                    }\n                }\n            }\n        },\n        {\n            key: \"clearMessages\",\n            value: function clearMessages() {\n                this.initMessages();\n                this.pinnedMessages = [];\n            }\n        },\n        {\n            key: \"initMessages\",\n            value: function initMessages() {\n                this.messageSets = [\n                    {\n                        messages: [],\n                        isLatest: true,\n                        isCurrent: true\n                    }\n                ];\n            }\n        },\n        {\n            key: \"loadMessageIntoState\",\n            value: function() {\n                var _loadMessageIntoState = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(messageId, parentMessageId) {\n                    var _this$threads$parentM;\n                    var limit, messageSetIndex, switchedToMessageSet, loadedMessageThread, messageIdToFind, _args = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    limit = _args.length > 2 && _args[2] !== undefined ? _args[2] : 25;\n                                    switchedToMessageSet = false;\n                                    loadedMessageThread = false;\n                                    messageIdToFind = parentMessageId || messageId;\n                                    if (!(messageId === \"latest\")) {\n                                        _context.next = 10;\n                                        break;\n                                    }\n                                    if (!(this.messages === this.latestMessages)) {\n                                        _context.next = 7;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 7:\n                                    messageSetIndex = this.messageSets.findIndex(function(s) {\n                                        return s.isLatest;\n                                    });\n                                    _context.next = 11;\n                                    break;\n                                case 10:\n                                    messageSetIndex = this.findMessageSetIndex({\n                                        id: messageIdToFind\n                                    });\n                                case 11:\n                                    if (messageSetIndex !== -1) {\n                                        this.switchToMessageSet(messageSetIndex);\n                                        switchedToMessageSet = true;\n                                    }\n                                    loadedMessageThread = !parentMessageId || !!((_this$threads$parentM = this.threads[parentMessageId]) !== null && _this$threads$parentM !== void 0 && _this$threads$parentM.find(function(m) {\n                                        return m.id === messageId;\n                                    }));\n                                    if (!(switchedToMessageSet && loadedMessageThread)) {\n                                        _context.next = 15;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 15:\n                                    if (switchedToMessageSet) {\n                                        _context.next = 18;\n                                        break;\n                                    }\n                                    _context.next = 18;\n                                    return this._channel.query({\n                                        messages: {\n                                            id_around: messageIdToFind,\n                                            limit: limit\n                                        }\n                                    }, \"new\");\n                                case 18:\n                                    if (!(!loadedMessageThread && parentMessageId)) {\n                                        _context.next = 21;\n                                        break;\n                                    }\n                                    _context.next = 21;\n                                    return this._channel.getReplies(parentMessageId, {\n                                        id_around: messageId,\n                                        limit: limit\n                                    });\n                                case 21:\n                                    messageSetIndex = this.findMessageSetIndex({\n                                        id: messageIdToFind\n                                    });\n                                    if (messageSetIndex !== -1) {\n                                        this.switchToMessageSet(messageSetIndex);\n                                    }\n                                case 23:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this);\n                }));\n                function loadMessageIntoState(_x, _x2) {\n                    return _loadMessageIntoState.apply(this, arguments);\n                }\n                return loadMessageIntoState;\n            }()\n        },\n        {\n            key: \"findMessage\",\n            value: function findMessage(messageId, parentMessageId) {\n                if (parentMessageId) {\n                    var messages = this.threads[parentMessageId];\n                    if (!messages) {\n                        return undefined;\n                    }\n                    return messages.find(function(m) {\n                        return m.id === messageId;\n                    });\n                }\n                var messageSetIndex = this.findMessageSetIndex({\n                    id: messageId\n                });\n                if (messageSetIndex === -1) {\n                    return undefined;\n                }\n                return this.messageSets[messageSetIndex].messages.find(function(m) {\n                    return m.id === messageId;\n                });\n            }\n        },\n        {\n            key: \"switchToMessageSet\",\n            value: function switchToMessageSet(index) {\n                var currentMessages = this.messageSets.find(function(s) {\n                    return s.isCurrent;\n                });\n                if (!currentMessages) {\n                    return;\n                }\n                currentMessages.isCurrent = false;\n                this.messageSets[index].isCurrent = true;\n            }\n        },\n        {\n            key: \"areMessageSetsOverlap\",\n            value: function areMessageSetsOverlap(messages1, messages2) {\n                return messages1.some(function(m1) {\n                    return messages2.find(function(m2) {\n                        return m1.id === m2.id;\n                    });\n                });\n            }\n        },\n        {\n            key: \"findMessageSetIndex\",\n            value: function findMessageSetIndex(message) {\n                return this.messageSets.findIndex(function(set) {\n                    return !!set.messages.find(function(m) {\n                        return m.id === message.id;\n                    });\n                });\n            }\n        },\n        {\n            key: \"findTargetMessageSet\",\n            value: function findTargetMessageSet(newMessages) {\n                var _this5 = this;\n                var addIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                var messageSetToAddToIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"current\";\n                var messagesToAdd = newMessages;\n                var targetMessageSetIndex;\n                if (addIfDoesNotExist) {\n                    var overlappingMessageSetIndices = this.messageSets.map(function(_, i) {\n                        return i;\n                    }).filter(function(i) {\n                        return _this5.areMessageSetsOverlap(_this5.messageSets[i].messages, newMessages);\n                    });\n                    switch(messageSetToAddToIfDoesNotExist){\n                        case \"new\":\n                            if (overlappingMessageSetIndices.length > 0) {\n                                targetMessageSetIndex = overlappingMessageSetIndices[0]; // No new message set is created if newMessages only contains thread replies\n                            } else if (newMessages.some(function(m) {\n                                return !m.parent_id;\n                            })) {\n                                this.messageSets.push({\n                                    messages: [],\n                                    isCurrent: false,\n                                    isLatest: false\n                                });\n                                targetMessageSetIndex = this.messageSets.length - 1;\n                            }\n                            break;\n                        case \"current\":\n                            targetMessageSetIndex = this.messageSets.findIndex(function(s) {\n                                return s.isCurrent;\n                            });\n                            break;\n                        case \"latest\":\n                            targetMessageSetIndex = this.messageSets.findIndex(function(s) {\n                                return s.isLatest;\n                            });\n                            break;\n                        default:\n                            targetMessageSetIndex = -1;\n                    } // when merging the target set will be the first one from the overlapping message sets\n                    var mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n                    var mergeSourceMessageSetIndices = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(overlappingMessageSetIndices);\n                    if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n                        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n                    } // merge message sets\n                    if (mergeSourceMessageSetIndices.length > 0) {\n                        var target = this.messageSets[mergeTargetMessageSetIndex];\n                        var sources = this.messageSets.filter(function(_, i) {\n                            return mergeSourceMessageSetIndices.indexOf(i) !== -1;\n                        });\n                        sources.forEach(function(messageSet) {\n                            target.isLatest = target.isLatest || messageSet.isLatest;\n                            target.isCurrent = target.isCurrent || messageSet.isCurrent;\n                            messagesToAdd = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messagesToAdd), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageSet.messages));\n                        });\n                        sources.forEach(function(s) {\n                            return _this5.messageSets.splice(_this5.messageSets.indexOf(s), 1);\n                        });\n                        var overlappingMessageSetIndex = this.messageSets.findIndex(function(s) {\n                            return _this5.areMessageSetsOverlap(s.messages, newMessages);\n                        });\n                        targetMessageSetIndex = overlappingMessageSetIndex;\n                    }\n                } else {\n                    // assumes that all new messages belong to the same set\n                    targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n                }\n                return {\n                    targetMessageSetIndex: targetMessageSetIndex,\n                    messagesToAdd: messagesToAdd\n                };\n            }\n        }\n    ]);\n    return ChannelState;\n}();\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$3(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);\n}\nfunction _arrayLikeToArray$3(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction ownKeys$6(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$6(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$6(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$6(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\n * Channel - The Channel class manages it's own state.\n */ var Channel = /*#__PURE__*/ function() {\n    /**  */ /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */ /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */ /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<StreamChatGenerics>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<StreamChatGenerics>} data any additional custom params\n   *\n   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel\n   */ function Channel(client, type, id, data) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Channel);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"type\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_data\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"cid\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"listeners\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"initialized\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"offlineMode\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"lastKeyStroke\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"lastTypingEvent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isTyping\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnected\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"create\", /*#__PURE__*/ function() {\n            var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(options) {\n                var defaultOptions;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                    while(1){\n                        switch(_context.prev = _context.next){\n                            case 0:\n                                defaultOptions = _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                    watch: false,\n                                    state: false,\n                                    presence: false\n                                });\n                                _context.next = 3;\n                                return _this.query(defaultOptions, \"latest\");\n                            case 3:\n                                return _context.abrupt(\"return\", _context.sent);\n                            case 4:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee);\n            }));\n            return function(_x) {\n                return _ref.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_callChannelListeners\", function(event) {\n            var channel = _this; // gather and call the listeners\n            var listeners = [];\n            if (channel.listeners.all) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(channel.listeners.all));\n            }\n            if (channel.listeners[event.type]) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(channel.listeners[event.type]));\n            } // call the event and send it to the listeners\n            for(var _i = 0, _listeners = listeners; _i < _listeners.length; _i++){\n                var listener = _listeners[_i];\n                if (typeof listener !== \"string\") {\n                    listener(event);\n                }\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_channelURL\", function() {\n            if (!_this.id) {\n                throw new Error(\"channel id is not defined\");\n            }\n            return \"\".concat(_this.getClient().baseURL, \"/channels/\").concat(_this.type, \"/\").concat(_this.id);\n        });\n        var validTypeRe = /^[\\w_-]+$/;\n        var validIDRe = /^[\\w!_-]+$/;\n        if (!validTypeRe.test(type)) {\n            throw new Error(\"Invalid chat type \".concat(type, ', letters, numbers and \"_-\" are allowed'));\n        }\n        if (typeof id === \"string\" && !validIDRe.test(id)) {\n            throw new Error(\"Invalid chat id \".concat(id, ', letters, numbers and \"!-_\" are allowed'));\n        }\n        this._client = client;\n        this.type = type;\n        this.id = id; // used by the frontend, gets updated:\n        this.data = data; // this._data is used for the requests...\n        this._data = _objectSpread$6({}, data);\n        this.cid = \"\".concat(type, \":\").concat(id);\n        this.listeners = {}; // perhaps the state variable should be private\n        this.state = new ChannelState(this);\n        this.initialized = false;\n        this.offlineMode = false;\n        this.lastTypingEvent = null;\n        this.isTyping = false;\n        this.disconnected = false;\n    }\n    /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<StreamChatGenerics>}\n   */ _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Channel, [\n        {\n            key: \"getClient\",\n            value: function getClient() {\n                if (this.disconnected === true) {\n                    throw Error(\"You can't use a channel after client.disconnect() was called\");\n                }\n                return this._client;\n            }\n        },\n        {\n            key: \"getConfig\",\n            value: function getConfig() {\n                var client = this.getClient();\n                return client.configs[this.cid];\n            }\n        },\n        {\n            key: \"sendMessage\",\n            value: function() {\n                var _sendMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(message, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    _context2.next = 2;\n                                    return this.getClient().post(this._channelURL() + \"/message\", _objectSpread$6({\n                                        message: message\n                                    }, options));\n                                case 2:\n                                    return _context2.abrupt(\"return\", _context2.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function sendMessage(_x2, _x3) {\n                    return _sendMessage.apply(this, arguments);\n                }\n                return sendMessage;\n            }()\n        },\n        {\n            key: \"sendFile\",\n            value: function sendFile(uri, name, contentType, user) {\n                return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/file\"), uri, name, contentType, user);\n            }\n        },\n        {\n            key: \"sendImage\",\n            value: function sendImage(uri, name, contentType, user) {\n                return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/image\"), uri, name, contentType, user);\n            }\n        },\n        {\n            key: \"deleteFile\",\n            value: function deleteFile(url) {\n                return this.getClient().delete(\"\".concat(this._channelURL(), \"/file\"), {\n                    url: url\n                });\n            }\n        },\n        {\n            key: \"deleteImage\",\n            value: function deleteImage(url) {\n                return this.getClient().delete(\"\".concat(this._channelURL(), \"/image\"), {\n                    url: url\n                });\n            }\n        },\n        {\n            key: \"sendEvent\",\n            value: function() {\n                var _sendEvent = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3(event) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context3.next = 3;\n                                    return this.getClient().post(this._channelURL() + \"/event\", {\n                                        event: event\n                                    });\n                                case 3:\n                                    return _context3.abrupt(\"return\", _context3.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function sendEvent(_x4) {\n                    return _sendEvent.apply(this, arguments);\n                }\n                return sendEvent;\n            }()\n        },\n        {\n            key: \"search\",\n            value: function() {\n                var _search = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4(query) {\n                    var options, payload, _args4 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                                    if (!(options.offset && options.next)) {\n                                        _context4.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"Cannot specify offset with next\");\n                                case 3:\n                                    // Return a list of channels\n                                    payload = _objectSpread$6(_objectSpread$6({\n                                        filter_conditions: {\n                                            cid: this.cid\n                                        }\n                                    }, options), {}, {\n                                        sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                                    });\n                                    if (!(typeof query === \"string\")) {\n                                        _context4.next = 8;\n                                        break;\n                                    }\n                                    payload.query = query;\n                                    _context4.next = 13;\n                                    break;\n                                case 8:\n                                    if (!(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query) === \"object\")) {\n                                        _context4.next = 12;\n                                        break;\n                                    }\n                                    payload.message_filter_conditions = query;\n                                    _context4.next = 13;\n                                    break;\n                                case 12:\n                                    throw Error(\"Invalid type \".concat(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query), \" for query parameter\"));\n                                case 13:\n                                    _context4.next = 15;\n                                    return this.getClient().wsPromise;\n                                case 15:\n                                    _context4.next = 17;\n                                    return this.getClient().get(this.getClient().baseURL + \"/search\", {\n                                        payload: payload\n                                    });\n                                case 17:\n                                    return _context4.abrupt(\"return\", _context4.sent);\n                                case 18:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function search(_x5) {\n                    return _search.apply(this, arguments);\n                }\n                return search;\n            }()\n        },\n        {\n            key: \"queryMembers\",\n            value: function() {\n                var _queryMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5(filterConditions) {\n                    var _this$data;\n                    var sort, options, id, type, members, _args5 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n                                    options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n                                    type = this.type;\n                                    if (this.id) {\n                                        id = this.id;\n                                    } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {\n                                        members = this.data.members;\n                                    } // Return a list of members\n                                    _context5.next = 6;\n                                    return this.getClient().get(this.getClient().baseURL + \"/members\", {\n                                        payload: _objectSpread$6({\n                                            type: type,\n                                            id: id,\n                                            members: members,\n                                            sort: normalizeQuerySort(sort),\n                                            filter_conditions: filterConditions\n                                        }, options)\n                                    });\n                                case 6:\n                                    return _context5.abrupt(\"return\", _context5.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this);\n                }));\n                function queryMembers(_x6) {\n                    return _queryMembers.apply(this, arguments);\n                }\n                return queryMembers;\n            }()\n        },\n        {\n            key: \"sendReaction\",\n            value: function() {\n                var _sendReaction = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6(messageID, reaction, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    if (messageID) {\n                                        _context6.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Message id is missing\");\n                                case 2:\n                                    if (!(!reaction || Object.keys(reaction).length === 0)) {\n                                        _context6.next = 4;\n                                        break;\n                                    }\n                                    throw Error(\"Reaction object is missing\");\n                                case 4:\n                                    _context6.next = 6;\n                                    return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction\"), _objectSpread$6({\n                                        reaction: reaction\n                                    }, options));\n                                case 6:\n                                    return _context6.abrupt(\"return\", _context6.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this);\n                }));\n                function sendReaction(_x7, _x8, _x9) {\n                    return _sendReaction.apply(this, arguments);\n                }\n                return sendReaction;\n            }()\n        },\n        {\n            key: \"deleteReaction\",\n            value: function deleteReaction(messageID, reactionType, user_id) {\n                this._checkInitialized();\n                if (!reactionType || !messageID) {\n                    throw Error(\"Deleting a reaction requires specifying both the message and reaction type\");\n                }\n                var url = this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction/\").concat(reactionType); //provided when server side request\n                if (user_id) {\n                    return this.getClient().delete(url, {\n                        user_id: user_id\n                    });\n                }\n                return this.getClient().delete(url, {});\n            }\n        },\n        {\n            key: \"update\",\n            value: function() {\n                var _update2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee7() {\n                    var channelData, updateMessage, options, reserved, _args7 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee7$(_context7) {\n                        while(1){\n                            switch(_context7.prev = _context7.next){\n                                case 0:\n                                    channelData = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                                    updateMessage = _args7.length > 1 ? _args7[1] : undefined;\n                                    options = _args7.length > 2 ? _args7[2] : undefined;\n                                    // Strip out reserved names that will result in API errors.\n                                    reserved = [\n                                        \"config\",\n                                        \"cid\",\n                                        \"created_by\",\n                                        \"id\",\n                                        \"member_count\",\n                                        \"type\",\n                                        \"created_at\",\n                                        \"updated_at\",\n                                        \"last_message_at\",\n                                        \"own_capabilities\"\n                                    ];\n                                    reserved.forEach(function(key) {\n                                        delete channelData[key];\n                                    });\n                                    _context7.next = 7;\n                                    return this._update(_objectSpread$6({\n                                        message: updateMessage,\n                                        data: channelData\n                                    }, options));\n                                case 7:\n                                    return _context7.abrupt(\"return\", _context7.sent);\n                                case 8:\n                                case \"end\":\n                                    return _context7.stop();\n                            }\n                        }\n                    }, _callee7, this);\n                }));\n                function update() {\n                    return _update2.apply(this, arguments);\n                }\n                return update;\n            }()\n        },\n        {\n            key: \"updatePartial\",\n            value: function() {\n                var _updatePartial = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee8(update) {\n                    var _this$data2, _this$data3;\n                    var data, areCapabilitiesChanged;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee8$(_context8) {\n                        while(1){\n                            switch(_context8.prev = _context8.next){\n                                case 0:\n                                    _context8.next = 2;\n                                    return this.getClient().patch(this._channelURL(), update);\n                                case 2:\n                                    data = _context8.sent;\n                                    areCapabilitiesChanged = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(data.channel.own_capabilities || []).sort().join() !== _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(Array.isArray((_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.own_capabilities) ? (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.own_capabilities : []).sort().join();\n                                    this.data = data.channel; // If the capabiltities are changed, we trigger the `capabilities.changed` event.\n                                    if (areCapabilitiesChanged) {\n                                        this.getClient().dispatchEvent({\n                                            type: \"capabilities.changed\",\n                                            cid: this.cid,\n                                            own_capabilities: data.channel.own_capabilities\n                                        });\n                                    }\n                                    return _context8.abrupt(\"return\", data);\n                                case 7:\n                                case \"end\":\n                                    return _context8.stop();\n                            }\n                        }\n                    }, _callee8, this);\n                }));\n                function updatePartial(_x10) {\n                    return _updatePartial.apply(this, arguments);\n                }\n                return updatePartial;\n            }()\n        },\n        {\n            key: \"enableSlowMode\",\n            value: function() {\n                var _enableSlowMode = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee9(coolDownInterval) {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee9$(_context9) {\n                        while(1){\n                            switch(_context9.prev = _context9.next){\n                                case 0:\n                                    _context9.next = 2;\n                                    return this.getClient().post(this._channelURL(), {\n                                        cooldown: coolDownInterval\n                                    });\n                                case 2:\n                                    data = _context9.sent;\n                                    this.data = data.channel;\n                                    return _context9.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context9.stop();\n                            }\n                        }\n                    }, _callee9, this);\n                }));\n                function enableSlowMode(_x11) {\n                    return _enableSlowMode.apply(this, arguments);\n                }\n                return enableSlowMode;\n            }()\n        },\n        {\n            key: \"disableSlowMode\",\n            value: function() {\n                var _disableSlowMode = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee10() {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee10$(_context10) {\n                        while(1){\n                            switch(_context10.prev = _context10.next){\n                                case 0:\n                                    _context10.next = 2;\n                                    return this.getClient().post(this._channelURL(), {\n                                        cooldown: 0\n                                    });\n                                case 2:\n                                    data = _context10.sent;\n                                    this.data = data.channel;\n                                    return _context10.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context10.stop();\n                            }\n                        }\n                    }, _callee10, this);\n                }));\n                function disableSlowMode() {\n                    return _disableSlowMode.apply(this, arguments);\n                }\n                return disableSlowMode;\n            }()\n        },\n        {\n            key: \"delete\",\n            value: function() {\n                var _delete2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee11() {\n                    var options, _args11 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee11$(_context11) {\n                        while(1){\n                            switch(_context11.prev = _context11.next){\n                                case 0:\n                                    options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n                                    _context11.next = 3;\n                                    return this.getClient().delete(this._channelURL(), _objectSpread$6({}, options));\n                                case 3:\n                                    return _context11.abrupt(\"return\", _context11.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context11.stop();\n                            }\n                        }\n                    }, _callee11, this);\n                }));\n                function _delete() {\n                    return _delete2.apply(this, arguments);\n                }\n                return _delete;\n            }()\n        },\n        {\n            key: \"truncate\",\n            value: function() {\n                var _truncate = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee12() {\n                    var options, _args12 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee12$(_context12) {\n                        while(1){\n                            switch(_context12.prev = _context12.next){\n                                case 0:\n                                    options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                                    _context12.next = 3;\n                                    return this.getClient().post(this._channelURL() + \"/truncate\", options);\n                                case 3:\n                                    return _context12.abrupt(\"return\", _context12.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context12.stop();\n                            }\n                        }\n                    }, _callee12, this);\n                }));\n                function truncate() {\n                    return _truncate.apply(this, arguments);\n                }\n                return truncate;\n            }()\n        },\n        {\n            key: \"acceptInvite\",\n            value: function() {\n                var _acceptInvite = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee13() {\n                    var options, _args13 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee13$(_context13) {\n                        while(1){\n                            switch(_context13.prev = _context13.next){\n                                case 0:\n                                    options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                                    _context13.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        accept_invite: true\n                                    }, options));\n                                case 3:\n                                    return _context13.abrupt(\"return\", _context13.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context13.stop();\n                            }\n                        }\n                    }, _callee13, this);\n                }));\n                function acceptInvite() {\n                    return _acceptInvite.apply(this, arguments);\n                }\n                return acceptInvite;\n            }()\n        },\n        {\n            key: \"rejectInvite\",\n            value: function() {\n                var _rejectInvite = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee14() {\n                    var options, _args14 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee14$(_context14) {\n                        while(1){\n                            switch(_context14.prev = _context14.next){\n                                case 0:\n                                    options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                                    _context14.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        reject_invite: true\n                                    }, options));\n                                case 3:\n                                    return _context14.abrupt(\"return\", _context14.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context14.stop();\n                            }\n                        }\n                    }, _callee14, this);\n                }));\n                function rejectInvite() {\n                    return _rejectInvite.apply(this, arguments);\n                }\n                return rejectInvite;\n            }()\n        },\n        {\n            key: \"addMembers\",\n            value: function() {\n                var _addMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee15(members, message) {\n                    var options, _args15 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee15$(_context15) {\n                        while(1){\n                            switch(_context15.prev = _context15.next){\n                                case 0:\n                                    options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};\n                                    _context15.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        add_members: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context15.abrupt(\"return\", _context15.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context15.stop();\n                            }\n                        }\n                    }, _callee15, this);\n                }));\n                function addMembers(_x12, _x13) {\n                    return _addMembers.apply(this, arguments);\n                }\n                return addMembers;\n            }()\n        },\n        {\n            key: \"addModerators\",\n            value: function() {\n                var _addModerators = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee16(members, message) {\n                    var options, _args16 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee16$(_context16) {\n                        while(1){\n                            switch(_context16.prev = _context16.next){\n                                case 0:\n                                    options = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                                    _context16.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        add_moderators: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context16.stop();\n                            }\n                        }\n                    }, _callee16, this);\n                }));\n                function addModerators(_x14, _x15) {\n                    return _addModerators.apply(this, arguments);\n                }\n                return addModerators;\n            }()\n        },\n        {\n            key: \"assignRoles\",\n            value: function() {\n                var _assignRoles = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee17(roles, message) {\n                    var options, _args17 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee17$(_context17) {\n                        while(1){\n                            switch(_context17.prev = _context17.next){\n                                case 0:\n                                    options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                                    _context17.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        assign_roles: roles,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context17.abrupt(\"return\", _context17.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context17.stop();\n                            }\n                        }\n                    }, _callee17, this);\n                }));\n                function assignRoles(_x16, _x17) {\n                    return _assignRoles.apply(this, arguments);\n                }\n                return assignRoles;\n            }()\n        },\n        {\n            key: \"inviteMembers\",\n            value: function() {\n                var _inviteMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee18(members, message) {\n                    var options, _args18 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee18$(_context18) {\n                        while(1){\n                            switch(_context18.prev = _context18.next){\n                                case 0:\n                                    options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                                    _context18.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        invites: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context18.abrupt(\"return\", _context18.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context18.stop();\n                            }\n                        }\n                    }, _callee18, this);\n                }));\n                function inviteMembers(_x18, _x19) {\n                    return _inviteMembers.apply(this, arguments);\n                }\n                return inviteMembers;\n            }()\n        },\n        {\n            key: \"removeMembers\",\n            value: function() {\n                var _removeMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee19(members, message) {\n                    var options, _args19 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee19$(_context19) {\n                        while(1){\n                            switch(_context19.prev = _context19.next){\n                                case 0:\n                                    options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};\n                                    _context19.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        remove_members: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context19.abrupt(\"return\", _context19.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context19.stop();\n                            }\n                        }\n                    }, _callee19, this);\n                }));\n                function removeMembers(_x20, _x21) {\n                    return _removeMembers.apply(this, arguments);\n                }\n                return removeMembers;\n            }()\n        },\n        {\n            key: \"demoteModerators\",\n            value: function() {\n                var _demoteModerators = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee20(members, message) {\n                    var options, _args20 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee20$(_context20) {\n                        while(1){\n                            switch(_context20.prev = _context20.next){\n                                case 0:\n                                    options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                                    _context20.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        demote_moderators: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context20.abrupt(\"return\", _context20.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context20.stop();\n                            }\n                        }\n                    }, _callee20, this);\n                }));\n                function demoteModerators(_x22, _x23) {\n                    return _demoteModerators.apply(this, arguments);\n                }\n                return demoteModerators;\n            }()\n        },\n        {\n            key: \"_update\",\n            value: function() {\n                var _update3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee21(payload) {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee21$(_context21) {\n                        while(1){\n                            switch(_context21.prev = _context21.next){\n                                case 0:\n                                    _context21.next = 2;\n                                    return this.getClient().post(this._channelURL(), payload);\n                                case 2:\n                                    data = _context21.sent;\n                                    this.data = data.channel;\n                                    return _context21.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context21.stop();\n                            }\n                        }\n                    }, _callee21, this);\n                }));\n                function _update(_x24) {\n                    return _update3.apply(this, arguments);\n                }\n                return _update;\n            }()\n        },\n        {\n            key: \"mute\",\n            value: function() {\n                var _mute = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee22() {\n                    var opts, _args22 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee22$(_context22) {\n                        while(1){\n                            switch(_context22.prev = _context22.next){\n                                case 0:\n                                    opts = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};\n                                    _context22.next = 3;\n                                    return this.getClient().post(this.getClient().baseURL + \"/moderation/mute/channel\", _objectSpread$6({\n                                        channel_cid: this.cid\n                                    }, opts));\n                                case 3:\n                                    return _context22.abrupt(\"return\", _context22.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context22.stop();\n                            }\n                        }\n                    }, _callee22, this);\n                }));\n                function mute() {\n                    return _mute.apply(this, arguments);\n                }\n                return mute;\n            }()\n        },\n        {\n            key: \"unmute\",\n            value: function() {\n                var _unmute = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee23() {\n                    var opts, _args23 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee23$(_context23) {\n                        while(1){\n                            switch(_context23.prev = _context23.next){\n                                case 0:\n                                    opts = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n                                    _context23.next = 3;\n                                    return this.getClient().post(this.getClient().baseURL + \"/moderation/unmute/channel\", _objectSpread$6({\n                                        channel_cid: this.cid\n                                    }, opts));\n                                case 3:\n                                    return _context23.abrupt(\"return\", _context23.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context23.stop();\n                            }\n                        }\n                    }, _callee23, this);\n                }));\n                function unmute() {\n                    return _unmute.apply(this, arguments);\n                }\n                return unmute;\n            }()\n        },\n        {\n            key: \"muteStatus\",\n            value: function muteStatus() {\n                this._checkInitialized();\n                return this.getClient()._muteStatus(this.cid);\n            }\n        },\n        {\n            key: \"sendAction\",\n            value: function sendAction(messageID, formData) {\n                this._checkInitialized();\n                if (!messageID) {\n                    throw Error(\"Message id is missing\");\n                }\n                return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/action\"), {\n                    message_id: messageID,\n                    form_data: formData,\n                    id: this.id,\n                    type: this.type\n                });\n            }\n        },\n        {\n            key: \"keystroke\",\n            value: function() {\n                var _keystroke = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee24(parent_id, options) {\n                    var now, diff;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee24$(_context24) {\n                        while(1){\n                            switch(_context24.prev = _context24.next){\n                                case 0:\n                                    if (this._isTypingIndicatorsEnabled()) {\n                                        _context24.next = 2;\n                                        break;\n                                    }\n                                    return _context24.abrupt(\"return\");\n                                case 2:\n                                    now = new Date();\n                                    diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n                                    this.lastKeyStroke = now;\n                                    this.isTyping = true; // send a typing.start every 2 seconds\n                                    if (!(diff === null || diff > 2000)) {\n                                        _context24.next = 10;\n                                        break;\n                                    }\n                                    this.lastTypingEvent = new Date();\n                                    _context24.next = 10;\n                                    return this.sendEvent(_objectSpread$6({\n                                        type: \"typing.start\",\n                                        parent_id: parent_id\n                                    }, options || {}));\n                                case 10:\n                                case \"end\":\n                                    return _context24.stop();\n                            }\n                        }\n                    }, _callee24, this);\n                }));\n                function keystroke(_x25, _x26) {\n                    return _keystroke.apply(this, arguments);\n                }\n                return keystroke;\n            }()\n        },\n        {\n            key: \"stopTyping\",\n            value: function() {\n                var _stopTyping = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee25(parent_id, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee25$(_context25) {\n                        while(1){\n                            switch(_context25.prev = _context25.next){\n                                case 0:\n                                    if (this._isTypingIndicatorsEnabled()) {\n                                        _context25.next = 2;\n                                        break;\n                                    }\n                                    return _context25.abrupt(\"return\");\n                                case 2:\n                                    this.lastTypingEvent = null;\n                                    this.isTyping = false;\n                                    _context25.next = 6;\n                                    return this.sendEvent(_objectSpread$6({\n                                        type: \"typing.stop\",\n                                        parent_id: parent_id\n                                    }, options || {}));\n                                case 6:\n                                case \"end\":\n                                    return _context25.stop();\n                            }\n                        }\n                    }, _callee25, this);\n                }));\n                function stopTyping(_x27, _x28) {\n                    return _stopTyping.apply(this, arguments);\n                }\n                return stopTyping;\n            }()\n        },\n        {\n            key: \"_isTypingIndicatorsEnabled\",\n            value: function _isTypingIndicatorsEnabled() {\n                var _this$getConfig, _this$getClient$user$, _this$getClient$user, _this$getClient$user$2, _this$getClient$user$3;\n                if (!((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events)) {\n                    return false;\n                }\n                return (_this$getClient$user$ = (_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : (_this$getClient$user$2 = _this$getClient$user.privacy_settings) === null || _this$getClient$user$2 === void 0 ? void 0 : (_this$getClient$user$3 = _this$getClient$user$2.typing_indicators) === null || _this$getClient$user$3 === void 0 ? void 0 : _this$getClient$user$3.enabled) !== null && _this$getClient$user$ !== void 0 ? _this$getClient$user$ : true;\n            }\n        },\n        {\n            key: \"lastMessage\",\n            value: function lastMessage() {\n                // get last 5 messages, sort, return the latest\n                // get a slice of the last 5\n                var min = this.state.latestMessages.length - 5;\n                if (min < 0) {\n                    min = 0;\n                }\n                var max = this.state.latestMessages.length + 1;\n                var messageSlice = this.state.latestMessages.slice(min, max); // sort by pk desc\n                messageSlice.sort(function(a, b) {\n                    return b.created_at.getTime() - a.created_at.getTime();\n                });\n                return messageSlice[0];\n            }\n        },\n        {\n            key: \"markRead\",\n            value: function() {\n                var _markRead = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee26() {\n                    var _this$getConfig2;\n                    var data, _args26 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee26$(_context26) {\n                        while(1){\n                            switch(_context26.prev = _context26.next){\n                                case 0:\n                                    data = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};\n                                    this._checkInitialized();\n                                    if (!(!((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.read_events) && !this.getClient()._isUsingServerAuth())) {\n                                        _context26.next = 4;\n                                        break;\n                                    }\n                                    return _context26.abrupt(\"return\", Promise.resolve(null));\n                                case 4:\n                                    _context26.next = 6;\n                                    return this.getClient().post(this._channelURL() + \"/read\", _objectSpread$6({}, data));\n                                case 6:\n                                    return _context26.abrupt(\"return\", _context26.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context26.stop();\n                            }\n                        }\n                    }, _callee26, this);\n                }));\n                function markRead() {\n                    return _markRead.apply(this, arguments);\n                }\n                return markRead;\n            }()\n        },\n        {\n            key: \"markUnread\",\n            value: function() {\n                var _markUnread = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee27(data) {\n                    var _this$getConfig3;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee27$(_context27) {\n                        while(1){\n                            switch(_context27.prev = _context27.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    if (!(!((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) && !this.getClient()._isUsingServerAuth())) {\n                                        _context27.next = 3;\n                                        break;\n                                    }\n                                    return _context27.abrupt(\"return\", Promise.resolve(null));\n                                case 3:\n                                    _context27.next = 5;\n                                    return this.getClient().post(this._channelURL() + \"/unread\", _objectSpread$6({}, data));\n                                case 5:\n                                    return _context27.abrupt(\"return\", _context27.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context27.stop();\n                            }\n                        }\n                    }, _callee27, this);\n                }));\n                function markUnread(_x29) {\n                    return _markUnread.apply(this, arguments);\n                }\n                return markUnread;\n            }()\n        },\n        {\n            key: \"clean\",\n            value: function clean() {\n                if (this.lastKeyStroke) {\n                    var now = new Date();\n                    var diff = now.getTime() - this.lastKeyStroke.getTime();\n                    if (diff > 1000 && this.isTyping) {\n                        logChatPromiseExecution(this.stopTyping(), \"stop typing event\");\n                    }\n                }\n                this.state.clean();\n            }\n        },\n        {\n            key: \"watch\",\n            value: function() {\n                var _watch = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee28(options) {\n                    var defaultOptions, combined, state;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee28$(_context28) {\n                        while(1){\n                            switch(_context28.prev = _context28.next){\n                                case 0:\n                                    defaultOptions = {\n                                        state: true,\n                                        watch: true,\n                                        presence: false\n                                    }; // Make sure we wait for the connect promise if there is a pending one\n                                    _context28.next = 3;\n                                    return this.getClient().wsPromise;\n                                case 3:\n                                    if (!this.getClient()._hasConnectionID()) {\n                                        defaultOptions.watch = false;\n                                    }\n                                    combined = _objectSpread$6(_objectSpread$6({}, defaultOptions), options);\n                                    _context28.next = 7;\n                                    return this.query(combined, \"latest\");\n                                case 7:\n                                    state = _context28.sent;\n                                    this.initialized = true;\n                                    this.data = state.channel;\n                                    this._client.logger(\"info\", \"channel:watch() - started watching channel \".concat(this.cid), {\n                                        tags: [\n                                            \"channel\"\n                                        ],\n                                        channel: this\n                                    });\n                                    return _context28.abrupt(\"return\", state);\n                                case 12:\n                                case \"end\":\n                                    return _context28.stop();\n                            }\n                        }\n                    }, _callee28, this);\n                }));\n                function watch(_x30) {\n                    return _watch.apply(this, arguments);\n                }\n                return watch;\n            }()\n        },\n        {\n            key: \"stopWatching\",\n            value: function() {\n                var _stopWatching = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee29() {\n                    var response;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee29$(_context29) {\n                        while(1){\n                            switch(_context29.prev = _context29.next){\n                                case 0:\n                                    _context29.next = 2;\n                                    return this.getClient().post(this._channelURL() + \"/stop-watching\", {});\n                                case 2:\n                                    response = _context29.sent;\n                                    this._client.logger(\"info\", \"channel:watch() - stopped watching channel \".concat(this.cid), {\n                                        tags: [\n                                            \"channel\"\n                                        ],\n                                        channel: this\n                                    });\n                                    return _context29.abrupt(\"return\", response);\n                                case 5:\n                                case \"end\":\n                                    return _context29.stop();\n                            }\n                        }\n                    }, _callee29, this);\n                }));\n                function stopWatching() {\n                    return _stopWatching.apply(this, arguments);\n                }\n                return stopWatching;\n            }()\n        },\n        {\n            key: \"getReplies\",\n            value: function() {\n                var _getReplies = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee30(parent_id, options, sort) {\n                    var normalizedSort, data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee30$(_context30) {\n                        while(1){\n                            switch(_context30.prev = _context30.next){\n                                case 0:\n                                    normalizedSort = sort ? normalizeQuerySort(sort) : undefined;\n                                    _context30.next = 3;\n                                    return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(parent_id, \"/replies\"), _objectSpread$6({\n                                        sort: normalizedSort\n                                    }, options));\n                                case 3:\n                                    data = _context30.sent;\n                                    // add any messages to our thread state\n                                    if (data.messages) {\n                                        this.state.addMessagesSorted(data.messages);\n                                    }\n                                    return _context30.abrupt(\"return\", data);\n                                case 6:\n                                case \"end\":\n                                    return _context30.stop();\n                            }\n                        }\n                    }, _callee30, this);\n                }));\n                function getReplies(_x31, _x32, _x33) {\n                    return _getReplies.apply(this, arguments);\n                }\n                return getReplies;\n            }()\n        },\n        {\n            key: \"getPinnedMessages\",\n            value: function() {\n                var _getPinnedMessages = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee31(options) {\n                    var sort, _args31 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee31$(_context31) {\n                        while(1){\n                            switch(_context31.prev = _context31.next){\n                                case 0:\n                                    sort = _args31.length > 1 && _args31[1] !== undefined ? _args31[1] : [];\n                                    _context31.next = 3;\n                                    return this.getClient().get(this.getClient().baseURL + \"/channels/\".concat(this.type, \"/\").concat(this.id, \"/pinned_messages\"), {\n                                        payload: _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                            sort: normalizeQuerySort(sort)\n                                        })\n                                    });\n                                case 3:\n                                    return _context31.abrupt(\"return\", _context31.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context31.stop();\n                            }\n                        }\n                    }, _callee31, this);\n                }));\n                function getPinnedMessages(_x34) {\n                    return _getPinnedMessages.apply(this, arguments);\n                }\n                return getPinnedMessages;\n            }()\n        },\n        {\n            key: \"getReactions\",\n            value: function getReactions(message_id, options) {\n                return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(message_id, \"/reactions\"), _objectSpread$6({}, options));\n            }\n        },\n        {\n            key: \"getMessagesById\",\n            value: function getMessagesById(messageIds) {\n                return this.getClient().get(this._channelURL() + \"/messages\", {\n                    ids: messageIds.join(\",\")\n                });\n            }\n        },\n        {\n            key: \"lastRead\",\n            value: function lastRead() {\n                var _this$getClient = this.getClient(), userID = _this$getClient.userID;\n                if (userID) {\n                    return this.state.read[userID] ? this.state.read[userID].last_read : null;\n                }\n            }\n        },\n        {\n            key: \"_countMessageAsUnread\",\n            value: function _countMessageAsUnread(message) {\n                var _message$user, _message$user2, _this$data4, _this$data5;\n                if (message.shadowed) return false;\n                if (message.silent) return false;\n                if (message.parent_id && !message.show_in_channel) return false;\n                if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID) return false;\n                if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id)) return false;\n                if (message.type === \"system\") return false; // Return false if channel doesn't allow read events.\n                if (Array.isArray((_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.own_capabilities) && !((_this$data5 = this.data) !== null && _this$data5 !== void 0 && _this$data5.own_capabilities.includes(\"read-events\"))) return false; // FIXME: see #1265, adjust and count new messages even when the channel is muted\n                if (this.muteStatus().muted) return false;\n                return true;\n            }\n        },\n        {\n            key: \"countUnread\",\n            value: function countUnread(lastRead) {\n                if (!lastRead) return this.state.unreadCount;\n                var count = 0;\n                for(var i = 0; i < this.state.latestMessages.length; i += 1){\n                    var message = this.state.latestMessages[i];\n                    if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n                        count++;\n                    }\n                }\n                return count;\n            }\n        },\n        {\n            key: \"countUnreadMentions\",\n            value: function countUnreadMentions() {\n                var lastRead = this.lastRead();\n                var userID = this.getClient().userID;\n                var count = 0;\n                for(var i = 0; i < this.state.latestMessages.length; i += 1){\n                    var _message$mentioned_us;\n                    var message = this.state.latestMessages[i];\n                    if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function(user) {\n                        return user.id === userID;\n                    })) {\n                        count++;\n                    }\n                }\n                return count;\n            }\n        },\n        {\n            key: \"query\",\n            value: /**\n     * query - Query the API, get messages, members or other channel fields\n     *\n     * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options\n     * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n     *\n     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response\n     */ function() {\n                var _query = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee32(options) {\n                    var _this$data6, _this$data7;\n                    var messageSetToAddToIfDoesNotExist, queryURL, state, membersStr, tempChannelCid, _this$_initializeStat, messageSet, areCapabilitiesChanged, _args32 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee32$(_context32) {\n                        while(1){\n                            switch(_context32.prev = _context32.next){\n                                case 0:\n                                    messageSetToAddToIfDoesNotExist = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : \"current\";\n                                    _context32.next = 3;\n                                    return this.getClient().wsPromise;\n                                case 3:\n                                    queryURL = \"\".concat(this.getClient().baseURL, \"/channels/\").concat(this.type);\n                                    if (this.id) {\n                                        queryURL += \"/\".concat(this.id);\n                                    }\n                                    _context32.next = 7;\n                                    return this.getClient().post(queryURL + \"/query\", _objectSpread$6({\n                                        data: this._data,\n                                        state: true\n                                    }, options));\n                                case 7:\n                                    state = _context32.sent;\n                                    // update the channel id if it was missing\n                                    if (!this.id) {\n                                        this.id = state.channel.id;\n                                        this.cid = state.channel.cid; // set the channel as active...\n                                        membersStr = state.members.map(function(member) {\n                                            var _member$user;\n                                            return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id);\n                                        }).sort().join(\",\");\n                                        tempChannelCid = \"\".concat(this.type, \":!members-\").concat(membersStr);\n                                        if (tempChannelCid in this.getClient().activeChannels) {\n                                            // This gets set in `client.channel()` function, when channel is created\n                                            // using members, not id.\n                                            delete this.getClient().activeChannels[tempChannelCid];\n                                        }\n                                        if (!(this.cid in this.getClient().activeChannels)) {\n                                            this.getClient().activeChannels[this.cid] = this;\n                                        }\n                                    }\n                                    this.getClient()._addChannelConfig(state.channel); // add any messages to our channel state\n                                    _this$_initializeStat = this._initializeState(state, messageSetToAddToIfDoesNotExist), messageSet = _this$_initializeStat.messageSet;\n                                    areCapabilitiesChanged = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(state.channel.own_capabilities || []).sort().join() !== _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(Array.isArray((_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.own_capabilities) ? (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.own_capabilities : []).sort().join();\n                                    this.data = state.channel;\n                                    this.offlineMode = false;\n                                    if (areCapabilitiesChanged) {\n                                        this.getClient().dispatchEvent({\n                                            type: \"capabilities.changed\",\n                                            cid: this.cid,\n                                            own_capabilities: state.channel.own_capabilities\n                                        });\n                                    }\n                                    this.getClient().dispatchEvent({\n                                        type: \"channels.queried\",\n                                        queriedChannels: {\n                                            channels: [\n                                                state\n                                            ],\n                                            isLatestMessageSet: messageSet.isLatest\n                                        }\n                                    });\n                                    return _context32.abrupt(\"return\", state);\n                                case 17:\n                                case \"end\":\n                                    return _context32.stop();\n                            }\n                        }\n                    }, _callee32, this);\n                }));\n                function query(_x35) {\n                    return _query.apply(this, arguments);\n                }\n                return query;\n            }()\n        },\n        {\n            key: \"banUser\",\n            value: function() {\n                var _banUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee33(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee33$(_context33) {\n                        while(1){\n                            switch(_context33.prev = _context33.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context33.next = 3;\n                                    return this.getClient().banUser(targetUserID, _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                        type: this.type,\n                                        id: this.id\n                                    }));\n                                case 3:\n                                    return _context33.abrupt(\"return\", _context33.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context33.stop();\n                            }\n                        }\n                    }, _callee33, this);\n                }));\n                function banUser(_x36, _x37) {\n                    return _banUser.apply(this, arguments);\n                }\n                return banUser;\n            }()\n        },\n        {\n            key: \"hide\",\n            value: function() {\n                var _hide = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee34() {\n                    var userId, clearHistory, _args34 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee34$(_context34) {\n                        while(1){\n                            switch(_context34.prev = _context34.next){\n                                case 0:\n                                    userId = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : null;\n                                    clearHistory = _args34.length > 1 && _args34[1] !== undefined ? _args34[1] : false;\n                                    this._checkInitialized();\n                                    _context34.next = 5;\n                                    return this.getClient().post(\"\".concat(this._channelURL(), \"/hide\"), {\n                                        user_id: userId,\n                                        clear_history: clearHistory\n                                    });\n                                case 5:\n                                    return _context34.abrupt(\"return\", _context34.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context34.stop();\n                            }\n                        }\n                    }, _callee34, this);\n                }));\n                function hide() {\n                    return _hide.apply(this, arguments);\n                }\n                return hide;\n            }()\n        },\n        {\n            key: \"show\",\n            value: function() {\n                var _show = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee35() {\n                    var userId, _args35 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee35$(_context35) {\n                        while(1){\n                            switch(_context35.prev = _context35.next){\n                                case 0:\n                                    userId = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : null;\n                                    this._checkInitialized();\n                                    _context35.next = 4;\n                                    return this.getClient().post(\"\".concat(this._channelURL(), \"/show\"), {\n                                        user_id: userId\n                                    });\n                                case 4:\n                                    return _context35.abrupt(\"return\", _context35.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context35.stop();\n                            }\n                        }\n                    }, _callee35, this);\n                }));\n                function show() {\n                    return _show.apply(this, arguments);\n                }\n                return show;\n            }()\n        },\n        {\n            key: \"unbanUser\",\n            value: function() {\n                var _unbanUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee36(targetUserID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee36$(_context36) {\n                        while(1){\n                            switch(_context36.prev = _context36.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context36.next = 3;\n                                    return this.getClient().unbanUser(targetUserID, {\n                                        type: this.type,\n                                        id: this.id\n                                    });\n                                case 3:\n                                    return _context36.abrupt(\"return\", _context36.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context36.stop();\n                            }\n                        }\n                    }, _callee36, this);\n                }));\n                function unbanUser(_x38) {\n                    return _unbanUser.apply(this, arguments);\n                }\n                return unbanUser;\n            }()\n        },\n        {\n            key: \"shadowBan\",\n            value: function() {\n                var _shadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee37(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee37$(_context37) {\n                        while(1){\n                            switch(_context37.prev = _context37.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context37.next = 3;\n                                    return this.getClient().shadowBan(targetUserID, _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                        type: this.type,\n                                        id: this.id\n                                    }));\n                                case 3:\n                                    return _context37.abrupt(\"return\", _context37.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context37.stop();\n                            }\n                        }\n                    }, _callee37, this);\n                }));\n                function shadowBan(_x39, _x40) {\n                    return _shadowBan.apply(this, arguments);\n                }\n                return shadowBan;\n            }()\n        },\n        {\n            key: \"removeShadowBan\",\n            value: function() {\n                var _removeShadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee38(targetUserID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee38$(_context38) {\n                        while(1){\n                            switch(_context38.prev = _context38.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context38.next = 3;\n                                    return this.getClient().removeShadowBan(targetUserID, {\n                                        type: this.type,\n                                        id: this.id\n                                    });\n                                case 3:\n                                    return _context38.abrupt(\"return\", _context38.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context38.stop();\n                            }\n                        }\n                    }, _callee38, this);\n                }));\n                function removeShadowBan(_x41) {\n                    return _removeShadowBan.apply(this, arguments);\n                }\n                return removeShadowBan;\n            }()\n        },\n        {\n            key: \"createCall\",\n            value: function() {\n                var _createCall = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee39(options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee39$(_context39) {\n                        while(1){\n                            switch(_context39.prev = _context39.next){\n                                case 0:\n                                    _context39.next = 2;\n                                    return this.getClient().post(this._channelURL() + \"/call\", options);\n                                case 2:\n                                    return _context39.abrupt(\"return\", _context39.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context39.stop();\n                            }\n                        }\n                    }, _callee39, this);\n                }));\n                function createCall(_x42) {\n                    return _createCall.apply(this, arguments);\n                }\n                return createCall;\n            }()\n        },\n        {\n            key: \"vote\",\n            value: function() {\n                var _vote2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee40(messageId, pollId, _vote) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee40$(_context40) {\n                        while(1){\n                            switch(_context40.prev = _context40.next){\n                                case 0:\n                                    _context40.next = 2;\n                                    return this.getClient().castPollVote(messageId, pollId, _vote);\n                                case 2:\n                                    return _context40.abrupt(\"return\", _context40.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context40.stop();\n                            }\n                        }\n                    }, _callee40, this);\n                }));\n                function vote(_x43, _x44, _x45) {\n                    return _vote2.apply(this, arguments);\n                }\n                return vote;\n            }()\n        },\n        {\n            key: \"removeVote\",\n            value: function() {\n                var _removeVote = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee41(messageId, pollId, voteId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee41$(_context41) {\n                        while(1){\n                            switch(_context41.prev = _context41.next){\n                                case 0:\n                                    _context41.next = 2;\n                                    return this.getClient().removePollVote(messageId, pollId, voteId);\n                                case 2:\n                                    return _context41.abrupt(\"return\", _context41.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context41.stop();\n                            }\n                        }\n                    }, _callee41, this);\n                }));\n                function removeVote(_x46, _x47, _x48) {\n                    return _removeVote.apply(this, arguments);\n                }\n                return removeVote;\n            }()\n        },\n        {\n            key: \"on\",\n            value: function on(callbackOrString, callbackOrNothing) {\n                var _this2 = this;\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this._client.logger(\"info\", \"Attaching listener for \".concat(key, \" event on channel \").concat(this.cid), {\n                    tags: [\n                        \"event\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                this.listeners[key].push(callback);\n                return {\n                    unsubscribe: function unsubscribe() {\n                        _this2._client.logger(\"info\", \"Removing listener for \".concat(key, \" event from channel \").concat(_this2.cid), {\n                            tags: [\n                                \"event\",\n                                \"channel\"\n                            ],\n                            channel: _this2\n                        });\n                        _this2.listeners[key] = _this2.listeners[key].filter(function(el) {\n                            return el !== callback;\n                        });\n                    }\n                };\n            }\n        },\n        {\n            key: \"off\",\n            value: function off(callbackOrString, callbackOrNothing) {\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this._client.logger(\"info\", \"Removing listener for \".concat(key, \" event from channel \").concat(this.cid), {\n                    tags: [\n                        \"event\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                this.listeners[key] = this.listeners[key].filter(function(value) {\n                    return value !== callback;\n                });\n            } // eslint-disable-next-line sonarjs/cognitive-complexity\n        },\n        {\n            key: \"_handleChannelEvent\",\n            value: function _handleChannelEvent(event) {\n                var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$channel, _event$member, _event$user9, _event$user11, _channelState$members, _event$user12, _channelState$members2;\n                var channel = this;\n                this._client.logger(\"info\", \"channel:_handleChannelEvent - Received event of type { \".concat(event.type, \" } on \").concat(this.cid), {\n                    tags: [\n                        \"event\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                var channelState = channel.state;\n                switch(event.type){\n                    case \"typing.start\":\n                        if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {\n                            channelState.typing[event.user.id] = event;\n                        }\n                        break;\n                    case \"typing.stop\":\n                        if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {\n                            delete channelState.typing[event.user.id];\n                        }\n                        break;\n                    case \"message.read\":\n                        if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id && event.created_at) {\n                            var _event$user4, _this$getClient$user2;\n                            channelState.read[event.user.id] = {\n                                last_read: new Date(event.created_at),\n                                last_read_message_id: event.last_read_message_id,\n                                user: event.user,\n                                unread_messages: 0\n                            };\n                            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id)) {\n                                channelState.unreadCount = 0;\n                            }\n                        }\n                        break;\n                    case \"user.watching.start\":\n                    case \"user.updated\":\n                        if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {\n                            channelState.watchers[event.user.id] = event.user;\n                        }\n                        break;\n                    case \"user.watching.stop\":\n                        if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {\n                            delete channelState.watchers[event.user.id];\n                        }\n                        break;\n                    case \"message.deleted\":\n                        if (event.message) {\n                            this._extendEventWithOwnReactions(event);\n                            if (event.hard_delete) channelState.removeMessage(event.message);\n                            else channelState.addMessageSorted(event.message, false, false);\n                            channelState.removeQuotedMessageReferences(event.message);\n                            if (event.message.pinned) {\n                                channelState.removePinnedMessage(event.message);\n                            }\n                        }\n                        break;\n                    case \"message.new\":\n                        if (event.message) {\n                            var _event$user7, _this$getClient$user3, _event$user8;\n                            /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */ var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user3 = this.getClient().user) === null || _this$getClient$user3 === void 0 ? void 0 : _this$getClient$user3.id);\n                            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n                            if (this.state.isUpToDate || isThreadMessage) {\n                                channelState.addMessageSorted(event.message, ownMessage);\n                            }\n                            if (event.message.pinned) {\n                                channelState.addPinnedMessage(event.message);\n                            } // do not increase the unread count - the back-end does not increase the count neither in the following cases:\n                            // 1. the message is mine\n                            // 2. the message is a thread reply from any user\n                            var preventUnreadCountUpdate = ownMessage || isThreadMessage;\n                            if (preventUnreadCountUpdate) break;\n                            if ((_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {\n                                for(var userId in channelState.read){\n                                    if (userId === event.user.id) {\n                                        channelState.read[event.user.id] = {\n                                            last_read: new Date(event.created_at),\n                                            user: event.user,\n                                            unread_messages: 0\n                                        };\n                                    } else {\n                                        channelState.read[userId].unread_messages += 1;\n                                    }\n                                }\n                            }\n                            if (this._countMessageAsUnread(event.message)) {\n                                channelState.unreadCount = channelState.unreadCount + 1;\n                            }\n                        }\n                        break;\n                    case \"message.updated\":\n                    case \"message.undeleted\":\n                        if (event.message) {\n                            this._extendEventWithOwnReactions(event);\n                            channelState.addMessageSorted(event.message, false, false);\n                            channelState._updateQuotedMessageReferences({\n                                message: event.message\n                            });\n                            if (event.message.pinned) {\n                                channelState.addPinnedMessage(event.message);\n                            } else {\n                                channelState.removePinnedMessage(event.message);\n                            }\n                        }\n                        break;\n                    case \"channel.truncated\":\n                        if ((_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.truncated_at) {\n                            var truncatedAt = +new Date(event.channel.truncated_at);\n                            channelState.messageSets.forEach(function(messageSet, messageSetIndex) {\n                                messageSet.messages.forEach(function(_ref2) {\n                                    var createdAt = _ref2.created_at, id = _ref2.id;\n                                    if (truncatedAt > +createdAt) channelState.removeMessage({\n                                        id: id,\n                                        messageSetIndex: messageSetIndex\n                                    });\n                                });\n                            });\n                            channelState.pinnedMessages.forEach(function(_ref3) {\n                                var id = _ref3.id, createdAt = _ref3.created_at;\n                                if (truncatedAt > +createdAt) channelState.removePinnedMessage({\n                                    id: id\n                                });\n                            });\n                        } else {\n                            channelState.clearMessages();\n                        }\n                        channelState.unreadCount = 0; // system messages don't increment unread counts\n                        if (event.message) {\n                            channelState.addMessageSorted(event.message);\n                            if (event.message.pinned) {\n                                channelState.addPinnedMessage(event.message);\n                            }\n                        }\n                        break;\n                    case \"member.added\":\n                    case \"member.updated\":\n                        if ((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user_id) {\n                            channelState.members[event.member.user_id] = event.member;\n                        }\n                        break;\n                    case \"member.removed\":\n                        if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {\n                            delete channelState.members[event.user.id];\n                        }\n                        break;\n                    case \"notification.mark_unread\":\n                        {\n                            var _event$user10, _this$getClient$user4, _event$unread_message;\n                            var _ownMessage = ((_event$user10 = event.user) === null || _event$user10 === void 0 ? void 0 : _event$user10.id) === ((_this$getClient$user4 = this.getClient().user) === null || _this$getClient$user4 === void 0 ? void 0 : _this$getClient$user4.id);\n                            if (!(_ownMessage && event.user)) break;\n                            var unreadCount = (_event$unread_message = event.unread_messages) !== null && _event$unread_message !== void 0 ? _event$unread_message : 0;\n                            channelState.read[event.user.id] = {\n                                first_unread_message_id: event.first_unread_message_id,\n                                last_read: new Date(event.last_read_at),\n                                last_read_message_id: event.last_read_message_id,\n                                user: event.user,\n                                unread_messages: unreadCount\n                            };\n                            channelState.unreadCount = unreadCount;\n                            break;\n                        }\n                    case \"channel.updated\":\n                        if (event.channel) {\n                            var _event$channel2, _channel$data, _event$channel$hidden, _event$channel3, _channel$data2, _event$channel$own_ca, _event$channel4, _channel$data3;\n                            var isFrozenChanged = ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.frozen) !== undefined && event.channel.frozen !== ((_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : _channel$data.frozen);\n                            if (isFrozenChanged) {\n                                this.query({\n                                    state: false,\n                                    messages: {\n                                        limit: 0\n                                    },\n                                    watchers: {\n                                        limit: 0\n                                    }\n                                });\n                            }\n                            channel.data = _objectSpread$6(_objectSpread$6({}, event.channel), {}, {\n                                hidden: (_event$channel$hidden = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_channel$data2 = channel.data) === null || _channel$data2 === void 0 ? void 0 : _channel$data2.hidden,\n                                own_capabilities: (_event$channel$own_ca = (_event$channel4 = event.channel) === null || _event$channel4 === void 0 ? void 0 : _event$channel4.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_channel$data3 = channel.data) === null || _channel$data3 === void 0 ? void 0 : _channel$data3.own_capabilities\n                            });\n                        }\n                        break;\n                    case \"poll.updated\":\n                        if (event.poll) {\n                            var _event$message;\n                            channelState.updatePoll(event.poll, ((_event$message = event.message) === null || _event$message === void 0 ? void 0 : _event$message.id) || \"\");\n                        }\n                        break;\n                    case \"poll.vote_casted\":\n                        if (event.poll_vote && event.poll) {\n                            var _event$message2;\n                            channelState.addPollVote(event.poll_vote, event.poll, ((_event$message2 = event.message) === null || _event$message2 === void 0 ? void 0 : _event$message2.id) || \"\");\n                        }\n                        break;\n                    case \"poll.vote_changed\":\n                        if (event.poll_vote && event.poll) {\n                            var _event$message3;\n                            channelState.updatePollVote(event.poll_vote, event.poll, ((_event$message3 = event.message) === null || _event$message3 === void 0 ? void 0 : _event$message3.id) || \"\");\n                        }\n                        break;\n                    case \"poll.vote_removed\":\n                        if (event.poll_vote && event.poll) {\n                            var _event$message4;\n                            channelState.removePollVote(event.poll_vote, event.poll, ((_event$message4 = event.message) === null || _event$message4 === void 0 ? void 0 : _event$message4.id) || \"\");\n                        }\n                        break;\n                    case \"poll.closed\":\n                        if (event.message) {\n                            channelState.addMessageSorted(event.message, false, false);\n                        }\n                        break;\n                    case \"reaction.new\":\n                        if (event.message && event.reaction) {\n                            event.message = channelState.addReaction(event.reaction, event.message);\n                        }\n                        break;\n                    case \"reaction.deleted\":\n                        if (event.reaction) {\n                            event.message = channelState.removeReaction(event.reaction, event.message);\n                        }\n                        break;\n                    case \"reaction.updated\":\n                        if (event.reaction) {\n                            // assuming reaction.updated is only called if enforce_unique is true\n                            event.message = channelState.addReaction(event.reaction, event.message, true);\n                        }\n                        break;\n                    case \"channel.hidden\":\n                        channel.data = _objectSpread$6(_objectSpread$6({}, channel.data), {}, {\n                            hidden: true\n                        });\n                        if (event.clear_history) {\n                            channelState.clearMessages();\n                        }\n                        break;\n                    case \"channel.visible\":\n                        channel.data = _objectSpread$6(_objectSpread$6({}, channel.data), {}, {\n                            hidden: false\n                        });\n                        break;\n                    case \"user.banned\":\n                        if (!((_event$user11 = event.user) !== null && _event$user11 !== void 0 && _event$user11.id)) break;\n                        channelState.members[event.user.id] = _objectSpread$6(_objectSpread$6({}, channelState.members[event.user.id] || {}), {}, {\n                            shadow_banned: !!event.shadow,\n                            banned: !event.shadow,\n                            user: _objectSpread$6(_objectSpread$6({}, ((_channelState$members = channelState.members[event.user.id]) === null || _channelState$members === void 0 ? void 0 : _channelState$members.user) || {}), event.user)\n                        });\n                        break;\n                    case \"user.unbanned\":\n                        if (!((_event$user12 = event.user) !== null && _event$user12 !== void 0 && _event$user12.id)) break;\n                        channelState.members[event.user.id] = _objectSpread$6(_objectSpread$6({}, channelState.members[event.user.id] || {}), {}, {\n                            shadow_banned: false,\n                            banned: false,\n                            user: _objectSpread$6(_objectSpread$6({}, ((_channelState$members2 = channelState.members[event.user.id]) === null || _channelState$members2 === void 0 ? void 0 : _channelState$members2.user) || {}), event.user)\n                        });\n                        break;\n                } // any event can send over the online count\n                if (event.watcher_count !== undefined) {\n                    channel.state.watcher_count = event.watcher_count;\n                }\n            }\n        },\n        {\n            key: \"_checkInitialized\",\n            value: function _checkInitialized() {\n                if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n                    throw Error(\"Channel \".concat(this.cid, \" hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve\"));\n                }\n            } // eslint-disable-next-line sonarjs/cognitive-complexity\n        },\n        {\n            key: \"_initializeState\",\n            value: function _initializeState(state) {\n                var messageSetToAddToIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"latest\";\n                var _this$getClient2 = this.getClient(), clientState = _this$getClient2.state, user = _this$getClient2.user, userID = _this$getClient2.userID; // add the Users\n                if (state.members) {\n                    var _iterator = _createForOfIteratorHelper$3(state.members), _step;\n                    try {\n                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                            var member = _step.value;\n                            if (member.user) {\n                                clientState.updateUserReference(member.user, this.cid);\n                            }\n                        }\n                    } catch (err) {\n                        _iterator.e(err);\n                    } finally{\n                        _iterator.f();\n                    }\n                }\n                this.state.membership = state.membership || {};\n                var messages = state.messages || [];\n                if (!this.state.messages) {\n                    this.state.initMessages();\n                }\n                var _this$state$addMessag = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist), messageSet = _this$state$addMessag.messageSet;\n                if (!this.state.pinnedMessages) {\n                    this.state.pinnedMessages = [];\n                }\n                this.state.addPinnedMessages(state.pinned_messages || []);\n                if (state.pending_messages) {\n                    this.state.pending_messages = state.pending_messages;\n                }\n                if (state.watcher_count !== undefined) {\n                    this.state.watcher_count = state.watcher_count;\n                } // convert the arrays into objects for easier syncing...\n                if (state.watchers) {\n                    var _iterator2 = _createForOfIteratorHelper$3(state.watchers), _step2;\n                    try {\n                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                            var watcher = _step2.value;\n                            if (watcher) {\n                                clientState.updateUserReference(watcher, this.cid);\n                                this.state.watchers[watcher.id] = watcher;\n                            }\n                        }\n                    } catch (err) {\n                        _iterator2.e(err);\n                    } finally{\n                        _iterator2.f();\n                    }\n                } // initialize read state to last message or current time if the channel is empty\n                // if the user is a member, this value will be overwritten later on otherwise this ensures\n                // that everything up to this point is not marked as unread\n                if (userID != null) {\n                    var last_read = this.state.last_message_at || new Date();\n                    if (user) {\n                        this.state.read[user.id] = {\n                            user: user,\n                            last_read: last_read,\n                            unread_messages: 0\n                        };\n                    }\n                } // apply read state if part of the state\n                if (state.read) {\n                    var _iterator3 = _createForOfIteratorHelper$3(state.read), _step3;\n                    try {\n                        for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                            var _read$unread_messages;\n                            var read = _step3.value;\n                            this.state.read[read.user.id] = {\n                                last_read: new Date(read.last_read),\n                                last_read_message_id: read.last_read_message_id,\n                                unread_messages: (_read$unread_messages = read.unread_messages) !== null && _read$unread_messages !== void 0 ? _read$unread_messages : 0,\n                                user: read.user\n                            };\n                            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id)) {\n                                this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n                            }\n                        }\n                    } catch (err) {\n                        _iterator3.e(err);\n                    } finally{\n                        _iterator3.f();\n                    }\n                }\n                if (state.members) {\n                    this.state.members = state.members.reduce(function(acc, member) {\n                        if (member.user) {\n                            acc[member.user.id] = member;\n                        }\n                        return acc;\n                    }, {});\n                }\n                return {\n                    messageSet: messageSet\n                };\n            }\n        },\n        {\n            key: \"_extendEventWithOwnReactions\",\n            value: function _extendEventWithOwnReactions(event) {\n                if (!event.message) {\n                    return;\n                }\n                var message = this.state.findMessage(event.message.id, event.message.parent_id);\n                if (message) {\n                    event.message.own_reactions = message.own_reactions;\n                }\n            }\n        },\n        {\n            key: \"_disconnect\",\n            value: function _disconnect() {\n                this._client.logger(\"info\", \"channel:disconnect() - Disconnecting the channel \".concat(this.cid), {\n                    tags: [\n                        \"connection\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                this.disconnected = true;\n                this.state.setIsUpToDate(false);\n            }\n        }\n    ]);\n    return Channel;\n}();\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$2(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\nfunction _arrayLikeToArray$2(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\n/**\n * ClientState - A container class for the client state.\n */ var ClientState = /*#__PURE__*/ function() {\n    function ClientState() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, ClientState);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"users\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"userChannelReferences\", void 0);\n        // show the status for a certain user...\n        // ie online, offline etc\n        this.users = {}; // store which channels contain references to the specified user...\n        this.userChannelReferences = {};\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(ClientState, [\n        {\n            key: \"updateUsers\",\n            value: function updateUsers(users) {\n                var _iterator = _createForOfIteratorHelper$2(users), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var user = _step.value;\n                        this.updateUser(user);\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n            }\n        },\n        {\n            key: \"updateUser\",\n            value: function updateUser(user) {\n                if (user != null) {\n                    this.users[user.id] = user;\n                }\n            }\n        },\n        {\n            key: \"updateUserReference\",\n            value: function updateUserReference(user, channelID) {\n                if (user == null) {\n                    return;\n                }\n                this.updateUser(user);\n                if (!this.userChannelReferences[user.id]) {\n                    this.userChannelReferences[user.id] = {};\n                }\n                this.userChannelReferences[user.id][channelID] = true;\n            }\n        },\n        {\n            key: \"deleteAllChannelReference\",\n            value: function deleteAllChannelReference(channelID) {\n                for(var userID in this.userChannelReferences){\n                    delete this.userChannelReferences[userID][channelID];\n                }\n            }\n        }\n    ]);\n    return ClientState;\n}();\nfunction ownKeys$5(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$5(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$5(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$5(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar InsightMetrics = function InsightMetrics() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, InsightMetrics);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionStartTimestamp\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsConsecutiveFailures\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsTotalFailures\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"instanceClientId\", void 0);\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n};\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */ var postInsights = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(insightType, insights) {\n        var maxAttempts, i;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n            while(1){\n                switch(_context.prev = _context.next){\n                    case 0:\n                        maxAttempts = 3;\n                        i = 0;\n                    case 2:\n                        if (!(i < maxAttempts)) {\n                            _context.next = 17;\n                            break;\n                        }\n                        _context.prev = 3;\n                        _context.next = 6;\n                        return axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].post(\"https://chat-insights.getstream.io/insights/\".concat(insightType), insights);\n                    case 6:\n                        _context.next = 13;\n                        break;\n                    case 8:\n                        _context.prev = 8;\n                        _context.t0 = _context[\"catch\"](3);\n                        _context.next = 12;\n                        return sleep((i + 1) * 3000);\n                    case 12:\n                        return _context.abrupt(\"continue\", 14);\n                    case 13:\n                        return _context.abrupt(\"break\", 17);\n                    case 14:\n                        i++;\n                        _context.next = 2;\n                        break;\n                    case 17:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }\n        }, _callee, null, [\n            [\n                3,\n                8\n            ]\n        ]);\n    }));\n    return function postInsights(_x, _x2) {\n        return _ref.apply(this, arguments);\n    };\n}();\nfunction buildWsFatalInsight(connection, event) {\n    return _objectSpread$5(_objectSpread$5({}, event), buildWsBaseInsight(connection));\n}\nfunction buildWsBaseInsight(connection) {\n    var _connection$ws, _navigator, _navigator2;\n    var client = connection.client;\n    return {\n        ready_state: (_connection$ws = connection.ws) === null || _connection$ws === void 0 ? void 0 : _connection$ws.readyState,\n        url: connection._buildUrl(),\n        api_key: client.key,\n        start_ts: client.insightMetrics.connectionStartTimestamp,\n        end_ts: new Date().getTime(),\n        auth_type: client.getAuthType(),\n        token: client.tokenManager.token,\n        user_id: client.userID,\n        user_details: client._user,\n        device: client.options.device,\n        client_id: connection.connectionID,\n        ws_details: connection.ws,\n        ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n        ws_total_failures: client.insightMetrics.wsTotalFailures,\n        request_id: connection.requestID,\n        online: typeof navigator !== \"undefined\" ? (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine : null,\n        user_agent: typeof navigator !== \"undefined\" ? (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent : null,\n        instance_client_id: client.insightMetrics.instanceClientId\n    };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n    return buildWsBaseInsight(connection);\n}\nfunction ownKeys$4(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$4(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$4(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$4(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n// Type guards to check WebSocket error type\nvar isCloseEvent = function isCloseEvent(res) {\n    return res.code !== undefined;\n};\nvar isErrorEvent = function isErrorEvent(res) {\n    return res.error !== undefined;\n};\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ var StableWSConnection = /*#__PURE__*/ function() {\n    // global from constructor\n    // local vars\n    function StableWSConnection(_ref) {\n        var _this = this;\n        var client = _ref.client;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, StableWSConnection);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionOpen\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"consecutiveFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"pingInterval\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"healthCheckTimeoutRef\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isConnecting\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isDisconnected\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isHealthy\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isResolved\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"lastEvent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionCheckTimeout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionCheckTimeoutRef\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"rejectPromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"requestID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"resolvePromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"totalFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"ws\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_buildUrl\", function() {\n            var qs = encodeURIComponent(_this.client._buildWSPayload(_this.requestID));\n            var token = _this.client.tokenManager.getToken();\n            return \"\".concat(_this.client.wsBaseURL, \"/connect?json=\").concat(qs, \"&api_key=\").concat(_this.client.key, \"&authorization=\").concat(token, \"&stream-auth-type=\").concat(_this.client.getAuthType(), \"&X-Stream-Client=\").concat(_this.client.getUserAgent());\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onlineStatusChanged\", function(event) {\n            if (event.type === \"offline\") {\n                // mark the connection as down\n                _this._log(\"onlineStatusChanged() - Status changing to offline\");\n                _this._setHealth(false);\n            } else if (event.type === \"online\") {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                _this._log(\"onlineStatusChanged() - Status changing to online. isHealthy: \".concat(_this.isHealthy));\n                if (!_this.isHealthy) {\n                    _this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onopen\", function(wsID) {\n            if (_this.wsID !== wsID) return;\n            _this._log(\"onopen() - onopen callback\", {\n                wsID: wsID\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onmessage\", function(wsID, event) {\n            if (_this.wsID !== wsID) return;\n            _this._log(\"onmessage() - onmessage callback\", {\n                event: event,\n                wsID: wsID\n            });\n            var data = typeof event.data === \"string\" ? JSON.parse(event.data) : null; // we wait till the first message before we consider the connection open..\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose..\n            if (!_this.isResolved && data) {\n                var _this$resolvePromise;\n                _this.isResolved = true;\n                if (data.error) {\n                    var _this$rejectPromise;\n                    (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));\n                    return;\n                }\n                (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, data);\n                _this._setHealth(true);\n            } // trigger the event..\n            _this.lastEvent = new Date();\n            if (data && data.type === \"health.check\") {\n                _this.scheduleNextPing();\n            }\n            _this.client.handleEvent(event);\n            _this.scheduleConnectionCheck();\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onclose\", function(wsID, event) {\n            if (_this.wsID !== wsID) return;\n            _this._log(\"onclose() - onclose callback - \" + event.code, {\n                event: event,\n                wsID: wsID\n            });\n            if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n                var _this$rejectPromise2;\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                var error = new Error(\"WS connection reject with error \".concat(event.reason));\n                error.reason = event.reason;\n                error.code = event.code;\n                error.wasClean = event.wasClean;\n                error.target = event.target;\n                (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);\n                _this._log(\"onclose() - WS connection reject with error \".concat(event.reason), {\n                    event: event\n                });\n            } else {\n                var _this$rejectPromise3;\n                _this.consecutiveFailures += 1;\n                _this.totalFailures += 1;\n                _this._setHealth(false);\n                _this.isConnecting = false;\n                (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));\n                _this._log(\"onclose() - WS connection closed. Calling reconnect ...\", {\n                    event: event\n                }); // reconnect if its an abnormal failure\n                _this._reconnect();\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onerror\", function(wsID, event) {\n            var _this$rejectPromise4;\n            if (_this.wsID !== wsID) return;\n            _this.consecutiveFailures += 1;\n            _this.totalFailures += 1;\n            _this._setHealth(false);\n            _this.isConnecting = false;\n            (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));\n            _this._log(\"onerror() - WS connection resulted into error\", {\n                event: event\n            });\n            _this._reconnect();\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setHealth\", function(healthy) {\n            if (healthy === _this.isHealthy) return;\n            _this.isHealthy = healthy;\n            if (_this.isHealthy) {\n                _this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: _this.isHealthy\n                });\n                return;\n            } // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(function() {\n                if (_this.isHealthy) return;\n                _this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: _this.isHealthy\n                });\n            }, 5000);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_errorFromWSEvent\", function(event) {\n            var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var code;\n            var statusCode;\n            var message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                statusCode = \"unknown\";\n                message = event.reason;\n            }\n            if (isErrorEvent(event)) {\n                code = event.error.code;\n                statusCode = event.error.StatusCode;\n                message = event.error.message;\n            } // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n            _this._log(\"_errorFromWSEvent() - WS failed with code \".concat(code), {\n                event: event\n            }, \"warn\");\n            var error = new Error(\"WS failed with code \".concat(code, \" and reason - \").concat(message));\n            error.code = code;\n            /**\n       * StatusCode does not exist on any event types but has been left\n       * as is to preserve JS functionality during the TS implementation\n       */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setupConnectionPromise\", function() {\n            _this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ _this.connectionOpen = new Promise(function(resolve, reject) {\n                _this.resolvePromise = resolve;\n                _this.rejectPromise = reject;\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"scheduleNextPing\", function() {\n            if (_this.healthCheckTimeoutRef) {\n                clearTimeout(_this.healthCheckTimeoutRef);\n            } // 30 seconds is the recommended interval (messenger uses this)\n            _this.healthCheckTimeoutRef = setTimeout(function() {\n                // send the healthcheck.., server replies with a health check event\n                var data = [\n                    {\n                        type: \"health.check\",\n                        client_id: _this.client.clientID\n                    }\n                ]; // try to send on the connection\n                try {\n                    var _this$ws;\n                    (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));\n                } catch (e) {}\n            }, _this.pingInterval);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"scheduleConnectionCheck\", function() {\n            if (_this.connectionCheckTimeoutRef) {\n                clearTimeout(_this.connectionCheckTimeoutRef);\n            }\n            _this.connectionCheckTimeoutRef = setTimeout(function() {\n                var now = new Date();\n                if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {\n                    _this._log(\"scheduleConnectionCheck - going to reconnect\");\n                    _this._setHealth(false);\n                    _this._reconnect();\n                }\n            }, _this.connectionCheckTimeout);\n        });\n        /** StreamChat client */ this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(StableWSConnection, [\n        {\n            key: \"_log\",\n            value: function _log(msg) {\n                var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"info\";\n                this.client.logger(level, \"connection:\" + msg, _objectSpread$4({\n                    tags: [\n                        \"connection\"\n                    ]\n                }, extra));\n            }\n        },\n        {\n            key: \"setClient\",\n            value: function setClient(client) {\n                this.client = client;\n            }\n        },\n        {\n            key: \"connect\",\n            value: function() {\n                var _connect2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\n                    var timeout, healthCheck, _args = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    timeout = _args.length > 0 && _args[0] !== undefined ? _args[0] : 15000;\n                                    if (!this.isConnecting) {\n                                        _context.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"You've called connect twice, can only attempt 1 connection at the time\");\n                                case 3:\n                                    this.isDisconnected = false;\n                                    _context.prev = 4;\n                                    _context.next = 7;\n                                    return this._connect();\n                                case 7:\n                                    healthCheck = _context.sent;\n                                    this.consecutiveFailures = 0;\n                                    this._log(\"connect() - Established ws connection with healthcheck: \".concat(healthCheck));\n                                    _context.next = 23;\n                                    break;\n                                case 12:\n                                    _context.prev = 12;\n                                    _context.t0 = _context[\"catch\"](4);\n                                    this.isHealthy = false;\n                                    this.consecutiveFailures += 1;\n                                    if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {\n                                        _context.next = 21;\n                                        break;\n                                    }\n                                    this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                                    this._reconnect({\n                                        refreshToken: true\n                                    });\n                                    _context.next = 23;\n                                    break;\n                                case 21:\n                                    if (_context.t0.isWSFailure) {\n                                        _context.next = 23;\n                                        break;\n                                    }\n                                    throw new Error(JSON.stringify({\n                                        code: _context.t0.code,\n                                        StatusCode: _context.t0.StatusCode,\n                                        message: _context.t0.message,\n                                        isWSFailure: _context.t0.isWSFailure\n                                    }));\n                                case 23:\n                                    _context.next = 25;\n                                    return this._waitForHealthy(timeout);\n                                case 25:\n                                    return _context.abrupt(\"return\", _context.sent);\n                                case 26:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this, [\n                        [\n                            4,\n                            12\n                        ]\n                    ]);\n                }));\n                function connect() {\n                    return _connect2.apply(this, arguments);\n                }\n                return connect;\n            }()\n        },\n        {\n            key: \"_waitForHealthy\",\n            value: function() {\n                var _waitForHealthy2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\n                    var _this2 = this;\n                    var timeout, _args4 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 15000;\n                                    return _context4.abrupt(\"return\", Promise.race([\n                                        _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2() {\n                                            var interval, i;\n                                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                                                while(1){\n                                                    switch(_context2.prev = _context2.next){\n                                                        case 0:\n                                                            interval = 50; // ms\n                                                            i = 0;\n                                                        case 2:\n                                                            if (!(i <= timeout)) {\n                                                                _context2.next = 18;\n                                                                break;\n                                                            }\n                                                            _context2.prev = 3;\n                                                            _context2.next = 6;\n                                                            return _this2.connectionOpen;\n                                                        case 6:\n                                                            return _context2.abrupt(\"return\", _context2.sent);\n                                                        case 9:\n                                                            _context2.prev = 9;\n                                                            _context2.t0 = _context2[\"catch\"](3);\n                                                            if (!(i === timeout)) {\n                                                                _context2.next = 13;\n                                                                break;\n                                                            }\n                                                            throw new Error(JSON.stringify({\n                                                                code: _context2.t0.code,\n                                                                StatusCode: _context2.t0.StatusCode,\n                                                                message: _context2.t0.message,\n                                                                isWSFailure: _context2.t0.isWSFailure\n                                                            }));\n                                                        case 13:\n                                                            _context2.next = 15;\n                                                            return sleep(interval);\n                                                        case 15:\n                                                            i += interval;\n                                                            _context2.next = 2;\n                                                            break;\n                                                        case 18:\n                                                        case \"end\":\n                                                            return _context2.stop();\n                                                    }\n                                                }\n                                            }, _callee2, null, [\n                                                [\n                                                    3,\n                                                    9\n                                                ]\n                                            ]);\n                                        }))(),\n                                        _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\n                                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                                                while(1){\n                                                    switch(_context3.prev = _context3.next){\n                                                        case 0:\n                                                            _context3.next = 2;\n                                                            return sleep(timeout);\n                                                        case 2:\n                                                            _this2.isConnecting = false;\n                                                            throw new Error(JSON.stringify({\n                                                                code: \"\",\n                                                                StatusCode: \"\",\n                                                                message: \"initial WS connection could not be established\",\n                                                                isWSFailure: true\n                                                            }));\n                                                        case 4:\n                                                        case \"end\":\n                                                            return _context3.stop();\n                                                    }\n                                                }\n                                            }, _callee3);\n                                        }))()\n                                    ]));\n                                case 2:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4);\n                }));\n                function _waitForHealthy() {\n                    return _waitForHealthy2.apply(this, arguments);\n                }\n                return _waitForHealthy;\n            }()\n        },\n        {\n            key: \"disconnect\",\n            value: /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ function disconnect(timeout) {\n                var _this3 = this;\n                this._log(\"disconnect() - Closing the websocket connection for wsID \".concat(this.wsID));\n                this.wsID += 1;\n                this.isConnecting = false;\n                this.isDisconnected = true; // start by removing all the listeners\n                if (this.healthCheckTimeoutRef) {\n                    clearInterval(this.healthCheckTimeoutRef);\n                }\n                if (this.connectionCheckTimeoutRef) {\n                    clearInterval(this.connectionCheckTimeoutRef);\n                }\n                removeConnectionEventListeners(this.onlineStatusChanged);\n                this.isHealthy = false; // remove ws handlers...\n                if (this.ws && this.ws.removeAllListeners) {\n                    this.ws.removeAllListeners();\n                }\n                var isClosedPromise; // and finally close...\n                // Assigning to local here because we will remove it from this before the\n                // promise resolves.\n                var ws = this.ws;\n                if (ws && ws.close && ws.readyState === ws.OPEN) {\n                    isClosedPromise = new Promise(function(resolve) {\n                        var onclose = function onclose(event) {\n                            _this3._log(\"disconnect() - resolving isClosedPromise \".concat(event ? \"with\" : \"without\", \" close frame\"), {\n                                event: event\n                            });\n                            resolve();\n                        };\n                        ws.onclose = onclose; // In case we don't receive close frame websocket server in time,\n                        // lets not wait for more than 1 seconds.\n                        setTimeout(onclose, timeout != null ? timeout : 1000);\n                    });\n                    this._log(\"disconnect() - Manually closed connection by calling client.disconnect()\");\n                    ws.close(chatCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n                } else {\n                    this._log(\"disconnect() - ws connection doesn't exist or it is already closed.\");\n                    isClosedPromise = Promise.resolve();\n                }\n                delete this.ws;\n                return isClosedPromise;\n            }\n        },\n        {\n            key: \"_connect\",\n            value: function() {\n                var _connect3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5() {\n                    var isTokenReady, wsURL, response, insights;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    if (!(this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback)) {\n                                        _context5.next = 2;\n                                        break;\n                                    }\n                                    return _context5.abrupt(\"return\");\n                                case 2:\n                                    // simply ignore _connect if it's currently trying to connect\n                                    this.isConnecting = true;\n                                    this.requestID = randomId();\n                                    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n                                    isTokenReady = false;\n                                    _context5.prev = 6;\n                                    this._log(\"_connect() - waiting for token\");\n                                    _context5.next = 10;\n                                    return this.client.tokenManager.tokenReady();\n                                case 10:\n                                    isTokenReady = true;\n                                    _context5.next = 15;\n                                    break;\n                                case 13:\n                                    _context5.prev = 13;\n                                    _context5.t0 = _context5[\"catch\"](6);\n                                case 15:\n                                    _context5.prev = 15;\n                                    if (isTokenReady) {\n                                        _context5.next = 20;\n                                        break;\n                                    }\n                                    this._log(\"_connect() - tokenProvider failed before, so going to retry\");\n                                    _context5.next = 20;\n                                    return this.client.tokenManager.loadToken();\n                                case 20:\n                                    this._setupConnectionPromise();\n                                    wsURL = this._buildUrl();\n                                    this._log(\"_connect() - Connecting to \".concat(wsURL), {\n                                        wsURL: wsURL,\n                                        requestID: this.requestID\n                                    });\n                                    this.ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_13___default())(wsURL);\n                                    this.ws.onopen = this.onopen.bind(this, this.wsID);\n                                    this.ws.onclose = this.onclose.bind(this, this.wsID);\n                                    this.ws.onerror = this.onerror.bind(this, this.wsID);\n                                    this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n                                    _context5.next = 30;\n                                    return this.connectionOpen;\n                                case 30:\n                                    response = _context5.sent;\n                                    this.isConnecting = false;\n                                    if (!response) {\n                                        _context5.next = 36;\n                                        break;\n                                    }\n                                    this.connectionID = response.connection_id;\n                                    if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                                        postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n                                        this.client.insightMetrics.wsConsecutiveFailures = 0;\n                                    }\n                                    return _context5.abrupt(\"return\", response);\n                                case 36:\n                                    _context5.next = 44;\n                                    break;\n                                case 38:\n                                    _context5.prev = 38;\n                                    _context5.t1 = _context5[\"catch\"](15);\n                                    this.isConnecting = false;\n                                    this._log(\"_connect() - Error - \", _context5.t1);\n                                    if (this.client.options.enableInsights) {\n                                        this.client.insightMetrics.wsConsecutiveFailures++;\n                                        this.client.insightMetrics.wsTotalFailures++;\n                                        insights = buildWsFatalInsight(this, convertErrorToJson(_context5.t1));\n                                        postInsights === null || postInsights === void 0 ? void 0 : postInsights(\"ws_fatal\", insights);\n                                    }\n                                    throw _context5.t1;\n                                case 44:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this, [\n                        [\n                            6,\n                            13\n                        ],\n                        [\n                            15,\n                            38\n                        ]\n                    ]);\n                }));\n                function _connect() {\n                    return _connect3.apply(this, arguments);\n                }\n                return _connect;\n            }()\n        },\n        {\n            key: \"_reconnect\",\n            value: function() {\n                var _reconnect2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n                    var options, interval, _args6 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n                                    this._log(\"_reconnect() - Initiating the reconnect\"); // only allow 1 connection at the time\n                                    if (!(this.isConnecting || this.isHealthy)) {\n                                        _context6.next = 5;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n                                    return _context6.abrupt(\"return\");\n                                case 5:\n                                    // reconnect in case of on error or on close\n                                    // also reconnect if the health check cycle fails\n                                    interval = options.interval;\n                                    if (!interval) {\n                                        interval = retryInterval(this.consecutiveFailures);\n                                    } // reconnect, or try again after a little while...\n                                    _context6.next = 9;\n                                    return sleep(interval);\n                                case 9:\n                                    if (!(this.isConnecting || this.isHealthy)) {\n                                        _context6.next = 12;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n                                    return _context6.abrupt(\"return\");\n                                case 12:\n                                    if (!(this.isDisconnected && this.client.options.enableWSFallback)) {\n                                        _context6.next = 15;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n                                    return _context6.abrupt(\"return\");\n                                case 15:\n                                    this._log(\"_reconnect() - Destroying current WS connection\"); // cleanup the old connection\n                                    this._destroyCurrentWSConnection();\n                                    if (!options.refreshToken) {\n                                        _context6.next = 20;\n                                        break;\n                                    }\n                                    _context6.next = 20;\n                                    return this.client.tokenManager.loadToken();\n                                case 20:\n                                    _context6.prev = 20;\n                                    _context6.next = 23;\n                                    return this._connect();\n                                case 23:\n                                    this._log(\"_reconnect() - Waiting for recoverCallBack\");\n                                    _context6.next = 26;\n                                    return this.client.recoverState();\n                                case 26:\n                                    this._log(\"_reconnect() - Finished recoverCallBack\");\n                                    this.consecutiveFailures = 0;\n                                    _context6.next = 38;\n                                    break;\n                                case 30:\n                                    _context6.prev = 30;\n                                    _context6.t0 = _context6[\"catch\"](20);\n                                    this.isHealthy = false;\n                                    this.consecutiveFailures += 1;\n                                    if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {\n                                        _context6.next = 37;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                                    return _context6.abrupt(\"return\", this._reconnect({\n                                        refreshToken: true\n                                    }));\n                                case 37:\n                                    // reconnect on WS failures, don't reconnect if there is a code bug\n                                    if (_context6.t0.isWSFailure) {\n                                        this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n                                        this._reconnect();\n                                    }\n                                case 38:\n                                    this._log(\"_reconnect() - == END ==\");\n                                case 39:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this, [\n                        [\n                            20,\n                            30\n                        ]\n                    ]);\n                }));\n                function _reconnect() {\n                    return _reconnect2.apply(this, arguments);\n                }\n                return _reconnect;\n            }()\n        },\n        {\n            key: \"_destroyCurrentWSConnection\",\n            value: /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ function _destroyCurrentWSConnection() {\n                // increment the ID, meaning we will ignore all messages from the old\n                // ws connection from now on.\n                this.wsID += 1;\n                try {\n                    var _this$ws2, _this$ws3;\n                    this === null || this === void 0 ? void 0 : (_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.removeAllListeners();\n                    this === null || this === void 0 ? void 0 : (_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.close();\n                } catch (e) {}\n            }\n        }\n    ]);\n    return StableWSConnection;\n}();\nfunction ownKeys$3(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$3(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$3(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$3(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */ function JWTUserToken(apiSecret, userId) {\n    var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (typeof userId !== \"string\") {\n        throw new TypeError(\"userId should be a string\");\n    }\n    var payload = _objectSpread$3({\n        user_id: userId\n    }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)\n    if ((jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default()) == null || (jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default().sign) == null) {\n        throw Error(\"Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.\");\n    }\n    var opts = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    if (payload.iat) {\n        opts.noTimestamp = false;\n    }\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default().sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret) {\n    var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var payload = {\n        server: true\n    };\n    var opts = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default().sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n    var fragments = token.split(\".\");\n    if (fragments.length !== 3) {\n        return \"\";\n    }\n    var b64Payload = fragments[1];\n    var payload = decodeBase64(b64Payload);\n    var data = JSON.parse(payload);\n    return data.user_id;\n}\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */ function DevToken(userId) {\n    return [\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n        encodeBase64(JSON.stringify({\n            user_id: userId\n        })),\n        \"devtoken\" // hardcoded signature\n    ].join(\".\");\n}\n/**\n *\n * @param {string | Buffer} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */ function CheckSignature(body, secret, signature) {\n    var key = Buffer.from(secret, \"utf8\");\n    var hash = crypto__WEBPACK_IMPORTED_MODULE_15___default().createHmac(\"sha256\", key).update(body).digest(\"hex\");\n    try {\n        return crypto__WEBPACK_IMPORTED_MODULE_15___default().timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n    } catch (_unused) {\n        return false;\n    }\n}\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ var TokenManager = /**\n * Constructor\n *\n * @param {Secret} secret\n */ function TokenManager(secret) {\n    var _this = this;\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, TokenManager);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"loadTokenPromise\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"type\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"secret\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"token\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"tokenProvider\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"user\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setTokenOrProvider\", /*#__PURE__*/ function() {\n        var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(tokenOrProvider, user) {\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                while(1){\n                    switch(_context.prev = _context.next){\n                        case 0:\n                            _this.validateToken(tokenOrProvider, user);\n                            _this.user = user;\n                            if (isFunction(tokenOrProvider)) {\n                                _this.tokenProvider = tokenOrProvider;\n                                _this.type = \"provider\";\n                            }\n                            if (typeof tokenOrProvider === \"string\") {\n                                _this.token = tokenOrProvider;\n                                _this.type = \"static\";\n                            }\n                            if (!tokenOrProvider && _this.user && _this.secret) {\n                                _this.token = JWTUserToken(_this.secret, user.id, {}, {});\n                                _this.type = \"static\";\n                            }\n                            _context.next = 7;\n                            return _this.loadToken();\n                        case 7:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }\n            }, _callee);\n        }));\n        return function(_x, _x2) {\n            return _ref.apply(this, arguments);\n        };\n    }());\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"reset\", function() {\n        _this.token = undefined;\n        _this.user = undefined;\n        _this.loadTokenPromise = null;\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"validateToken\", function(tokenOrProvider, user) {\n        // allow empty token for anon user\n        if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.\n        if (!_this.secret && !tokenOrProvider) {\n            throw new Error(\"User token can not be empty\");\n        }\n        if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction(tokenOrProvider)) {\n            throw new Error(\"user token should either be a string or a function\");\n        }\n        if (typeof tokenOrProvider === \"string\") {\n            // Allow empty token for anonymous users\n            if (user.anon && tokenOrProvider === \"\") return;\n            var tokenUserId = UserFromToken(tokenOrProvider);\n            if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || tokenUserId !== user.id)) {\n                throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n            }\n        }\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"tokenReady\", function() {\n        return _this.loadTokenPromise;\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"loadToken\", function() {\n        // eslint-disable-next-line no-async-promise-executor\n        _this.loadTokenPromise = new Promise(/*#__PURE__*/ function() {\n            var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(resolve, reject) {\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                    while(1){\n                        switch(_context2.prev = _context2.next){\n                            case 0:\n                                if (!(_this.type === \"static\")) {\n                                    _context2.next = 2;\n                                    break;\n                                }\n                                return _context2.abrupt(\"return\", resolve(_this.token));\n                            case 2:\n                                if (!(_this.tokenProvider && typeof _this.tokenProvider !== \"string\")) {\n                                    _context2.next = 13;\n                                    break;\n                                }\n                                _context2.prev = 3;\n                                _context2.next = 6;\n                                return _this.tokenProvider();\n                            case 6:\n                                _this.token = _context2.sent;\n                                _context2.next = 12;\n                                break;\n                            case 9:\n                                _context2.prev = 9;\n                                _context2.t0 = _context2[\"catch\"](3);\n                                return _context2.abrupt(\"return\", reject(new Error(\"Call to tokenProvider failed with message: \".concat(_context2.t0))));\n                            case 12:\n                                resolve(_this.token);\n                            case 13:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, null, [\n                    [\n                        3,\n                        9\n                    ]\n                ]);\n            }));\n            return function(_x3, _x4) {\n                return _ref2.apply(this, arguments);\n            };\n        }());\n        return _this.loadTokenPromise;\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"getToken\", function() {\n        if (_this.token) {\n            return _this.token;\n        }\n        if (_this.user && _this.user.anon && !_this.token) {\n            return _this.token;\n        }\n        if (_this.secret) {\n            return JWTServerToken(_this.secret);\n        }\n        throw new Error(\"Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called\");\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isStatic\", function() {\n        return _this.type === \"static\";\n    });\n    this.loadTokenPromise = null;\n    if (secret) {\n        this.secret = secret;\n    }\n    this.type = \"static\";\n    if (this.secret) {\n        this.token = JWTServerToken(this.secret);\n    }\n} /**\n * Set the static string token or token provider.\n * Token provider should return a token string or a promise which resolves to string token.\n *\n * @param {TokenOrProvider} tokenOrProvider\n * @param {UserResponse<StreamChatGenerics>} user\n */ ;\nvar APIErrorCodes = {\n    \"-1\": {\n        name: \"InternalSystemError\",\n        retryable: true\n    },\n    \"2\": {\n        name: \"AccessKeyError\",\n        retryable: false\n    },\n    \"3\": {\n        name: \"AuthenticationFailedError\",\n        retryable: true\n    },\n    \"4\": {\n        name: \"InputError\",\n        retryable: false\n    },\n    \"6\": {\n        name: \"DuplicateUsernameError\",\n        retryable: false\n    },\n    \"9\": {\n        name: \"RateLimitError\",\n        retryable: true\n    },\n    \"16\": {\n        name: \"DoesNotExistError\",\n        retryable: false\n    },\n    \"17\": {\n        name: \"NotAllowedError\",\n        retryable: false\n    },\n    \"18\": {\n        name: \"EventNotSupportedError\",\n        retryable: false\n    },\n    \"19\": {\n        name: \"ChannelFeatureNotSupportedError\",\n        retryable: false\n    },\n    \"20\": {\n        name: \"MessageTooLongError\",\n        retryable: false\n    },\n    \"21\": {\n        name: \"MultipleNestingLevelError\",\n        retryable: false\n    },\n    \"22\": {\n        name: \"PayloadTooBigError\",\n        retryable: false\n    },\n    \"23\": {\n        name: \"RequestTimeoutError\",\n        retryable: true\n    },\n    \"24\": {\n        name: \"MaxHeaderSizeExceededError\",\n        retryable: false\n    },\n    \"40\": {\n        name: \"AuthErrorTokenExpired\",\n        retryable: false\n    },\n    \"41\": {\n        name: \"AuthErrorTokenNotValidYet\",\n        retryable: false\n    },\n    \"42\": {\n        name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n        retryable: false\n    },\n    \"43\": {\n        name: \"AuthErrorTokenSignatureInvalid\",\n        retryable: false\n    },\n    \"44\": {\n        name: \"CustomCommandEndpointMissingError\",\n        retryable: false\n    },\n    \"45\": {\n        name: \"CustomCommandEndpointCallError\",\n        retryable: true\n    },\n    \"46\": {\n        name: \"ConnectionIDNotFoundError\",\n        retryable: false\n    },\n    \"60\": {\n        name: \"CoolDownError\",\n        retryable: true\n    },\n    \"69\": {\n        name: \"ErrWrongRegion\",\n        retryable: false\n    },\n    \"70\": {\n        name: \"ErrQueryChannelPermissions\",\n        retryable: false\n    },\n    \"71\": {\n        name: \"ErrTooManyConnections\",\n        retryable: true\n    },\n    \"99\": {\n        name: \"AppSuspendedError\",\n        retryable: false\n    }\n};\nfunction isAPIError(error) {\n    return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n    if (!error.code) return false;\n    var err = APIErrorCodes[\"\".concat(error.code)];\n    if (!err) return false;\n    return err.retryable;\n}\nfunction isConnectionIDError(error) {\n    return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n    if (typeof err.isWSFailure === \"boolean\") {\n        return err.isWSFailure;\n    }\n    try {\n        return JSON.parse(err.message).isWSFailure;\n    } catch (_) {\n        return false;\n    }\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\nfunction ownKeys$2(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$2(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$2(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar ConnectionState;\n(function(ConnectionState) {\n    ConnectionState[\"Closed\"] = \"CLOSED\";\n    ConnectionState[\"Connected\"] = \"CONNECTED\";\n    ConnectionState[\"Connecting\"] = \"CONNECTING\";\n    ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n    ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nvar WSConnectionFallback = /*#__PURE__*/ function() {\n    function WSConnectionFallback(_ref) {\n        var _this = this;\n        var client = _ref.client;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, WSConnectionFallback);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"consecutiveFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"cancelToken\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_onlineStatusChanged\", function(event) {\n            _this._log(\"_onlineStatusChanged() - \".concat(event.type));\n            if (event.type === \"offline\") {\n                var _this$cancelToken;\n                _this._setState(ConnectionState.Closed);\n                (_this$cancelToken = _this.cancelToken) === null || _this$cancelToken === void 0 ? void 0 : _this$cancelToken.cancel(\"disconnect() is called\");\n                _this.cancelToken = undefined;\n                return;\n            }\n            if (event.type === \"online\" && _this.state === ConnectionState.Closed) {\n                _this.connect(true);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_req\", /*#__PURE__*/ function() {\n            var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(params, config, retry) {\n                var _this$cancelToken2, res;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                    while(1){\n                        switch(_context.prev = _context.next){\n                            case 0:\n                                if (!_this.cancelToken && !params.close) {\n                                    _this.cancelToken = axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].CancelToken.source();\n                                }\n                                _context.prev = 1;\n                                _context.next = 4;\n                                return _this.client.doAxiosRequest(\"get\", _this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\", undefined, {\n                                    config: _objectSpread$2(_objectSpread$2({}, config), {}, {\n                                        cancelToken: (_this$cancelToken2 = _this.cancelToken) === null || _this$cancelToken2 === void 0 ? void 0 : _this$cancelToken2.token\n                                    }),\n                                    params: params\n                                });\n                            case 4:\n                                res = _context.sent;\n                                _this.consecutiveFailures = 0; // always reset in case of no error\n                                return _context.abrupt(\"return\", res);\n                            case 9:\n                                _context.prev = 9;\n                                _context.t0 = _context[\"catch\"](1);\n                                _this.consecutiveFailures += 1;\n                                if (!(retry && isErrorRetryable(_context.t0))) {\n                                    _context.next = 17;\n                                    break;\n                                }\n                                _this._log(\"_req() - Retryable error, retrying request\");\n                                _context.next = 16;\n                                return sleep(retryInterval(_this.consecutiveFailures));\n                            case 16:\n                                return _context.abrupt(\"return\", _this._req(params, config, retry));\n                            case 17:\n                                throw _context.t0;\n                            case 18:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, null, [\n                    [\n                        1,\n                        9\n                    ]\n                ]);\n            }));\n            return function(_x, _x2, _x3) {\n                return _ref2.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_poll\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2() {\n            var _data$events, data, i;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                while(1){\n                    switch(_context2.prev = _context2.next){\n                        case 0:\n                            if (!(_this.state === ConnectionState.Connected)) {\n                                _context2.next = 25;\n                                break;\n                            }\n                            _context2.prev = 1;\n                            _context2.next = 4;\n                            return _this._req({}, {\n                                timeout: 30000\n                            }, true);\n                        case 4:\n                            data = _context2.sent;\n                            // 30s => API responds in 20s if there is no event\n                            if ((_data$events = data.events) !== null && _data$events !== void 0 && _data$events.length) {\n                                for(i = 0; i < data.events.length; i++){\n                                    _this.client.dispatchEvent(data.events[i]);\n                                }\n                            }\n                            _context2.next = 23;\n                            break;\n                        case 8:\n                            _context2.prev = 8;\n                            _context2.t0 = _context2[\"catch\"](1);\n                            if (!axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].isCancel(_context2.t0)) {\n                                _context2.next = 13;\n                                break;\n                            }\n                            _this._log(\"_poll() - axios canceled request\");\n                            return _context2.abrupt(\"return\");\n                        case 13:\n                            if (!isConnectionIDError(_context2.t0)) {\n                                _context2.next = 18;\n                                break;\n                            }\n                            _this._log(\"_poll() - ConnectionID error, connecting without ID...\");\n                            _this._setState(ConnectionState.Disconnected);\n                            _this.connect(true);\n                            return _context2.abrupt(\"return\");\n                        case 18:\n                            if (!(isAPIError(_context2.t0) && !isErrorRetryable(_context2.t0))) {\n                                _context2.next = 21;\n                                break;\n                            }\n                            _this._setState(ConnectionState.Closed);\n                            return _context2.abrupt(\"return\");\n                        case 21:\n                            _context2.next = 23;\n                            return sleep(retryInterval(_this.consecutiveFailures));\n                        case 23:\n                            _context2.next = 0;\n                            break;\n                        case 25:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }\n            }, _callee2, null, [\n                [\n                    1,\n                    8\n                ]\n            ]);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\n            var reconnect, _yield$_this$_req, event, _args3 = arguments;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            reconnect = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n                            if (!(_this.state === ConnectionState.Connecting)) {\n                                _context3.next = 4;\n                                break;\n                            }\n                            _this._log(\"connect() - connecting already in progress\", {\n                                reconnect: reconnect\n                            }, \"warn\");\n                            return _context3.abrupt(\"return\");\n                        case 4:\n                            if (!(_this.state === ConnectionState.Connected)) {\n                                _context3.next = 7;\n                                break;\n                            }\n                            _this._log(\"connect() - already connected and polling\", {\n                                reconnect: reconnect\n                            }, \"warn\");\n                            return _context3.abrupt(\"return\");\n                        case 7:\n                            _this._setState(ConnectionState.Connecting);\n                            _this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n                            _context3.prev = 9;\n                            _context3.next = 12;\n                            return _this._req({\n                                json: _this.client._buildWSPayload()\n                            }, {\n                                timeout: 8000\n                            }, reconnect);\n                        case 12:\n                            _yield$_this$_req = _context3.sent;\n                            event = _yield$_this$_req.event;\n                            _this._setState(ConnectionState.Connected);\n                            _this.connectionID = event.connection_id; // @ts-expect-error\n                            _this.client.dispatchEvent(event);\n                            _this._poll();\n                            if (reconnect) {\n                                _this.client.recoverState();\n                            }\n                            return _context3.abrupt(\"return\", event);\n                        case 22:\n                            _context3.prev = 22;\n                            _context3.t0 = _context3[\"catch\"](9);\n                            _this._setState(ConnectionState.Closed);\n                            throw _context3.t0;\n                        case 26:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3, null, [\n                [\n                    9,\n                    22\n                ]\n            ]);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isHealthy\", function() {\n            return !!_this.connectionID && _this.state === ConnectionState.Connected;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\n            var _this$cancelToken3;\n            var timeout, connection_id, _args4 = arguments;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                while(1){\n                    switch(_context4.prev = _context4.next){\n                        case 0:\n                            timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 2000;\n                            removeConnectionEventListeners(_this._onlineStatusChanged);\n                            _this._setState(ConnectionState.Disconnected);\n                            (_this$cancelToken3 = _this.cancelToken) === null || _this$cancelToken3 === void 0 ? void 0 : _this$cancelToken3.cancel(\"disconnect() is called\");\n                            _this.cancelToken = undefined;\n                            connection_id = _this.connectionID;\n                            _this.connectionID = undefined;\n                            _context4.prev = 7;\n                            _context4.next = 10;\n                            return _this._req({\n                                close: true,\n                                connection_id: connection_id\n                            }, {\n                                timeout: timeout\n                            }, false);\n                        case 10:\n                            _this._log(\"disconnect() - Closed connectionID\");\n                            _context4.next = 16;\n                            break;\n                        case 13:\n                            _context4.prev = 13;\n                            _context4.t0 = _context4[\"catch\"](7);\n                            _this._log(\"disconnect() - Failed\", {\n                                err: _context4.t0\n                            }, \"error\");\n                        case 16:\n                        case \"end\":\n                            return _context4.stop();\n                    }\n                }\n            }, _callee4, null, [\n                [\n                    7,\n                    13\n                ]\n            ]);\n        })));\n        this.client = client;\n        this.state = ConnectionState.Init;\n        this.consecutiveFailures = 0;\n        addConnectionEventListeners(this._onlineStatusChanged);\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(WSConnectionFallback, [\n        {\n            key: \"_log\",\n            value: function _log(msg) {\n                var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"info\";\n                this.client.logger(level, \"WSConnectionFallback:\" + msg, _objectSpread$2({\n                    tags: [\n                        \"connection_fallback\",\n                        \"connection\"\n                    ]\n                }, extra));\n            }\n        },\n        {\n            key: \"_setState\",\n            value: function _setState(state) {\n                this._log(\"_setState() - \".concat(state)); // transition from connecting => connected\n                if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n                    this.client.dispatchEvent({\n                        type: \"connection.changed\",\n                        online: true\n                    });\n                }\n                if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n                    this.client.dispatchEvent({\n                        type: \"connection.changed\",\n                        online: false\n                    });\n                }\n                this.state = state;\n            }\n        }\n    ]);\n    return WSConnectionFallback;\n}();\nvar Campaign = /*#__PURE__*/ function() {\n    function Campaign(client, id, data) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Campaign);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        this.client = client;\n        this.id = id;\n        this.data = data;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Campaign, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\n                    var _this$data, _this$data2, _this$data3, _this$data4, _this$data5, _this$data6, _this$data7, _this$data8;\n                    var body, result;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    body = {\n                                        id: this.id,\n                                        message_template: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.message_template,\n                                        segment_ids: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.segment_ids,\n                                        sender_id: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.sender_id,\n                                        channel_template: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.channel_template,\n                                        create_channels: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.create_channels,\n                                        description: (_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.description,\n                                        name: (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.name,\n                                        user_ids: (_this$data8 = this.data) === null || _this$data8 === void 0 ? void 0 : _this$data8.user_ids\n                                    };\n                                    _context.next = 3;\n                                    return this.client.createCampaign(body);\n                                case 3:\n                                    result = _context.sent;\n                                    this.id = result.campaign.id;\n                                    this.data = result.campaign;\n                                    return _context.abrupt(\"return\", result);\n                                case 7:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this);\n                }));\n                function create() {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        },\n        {\n            key: \"verifyCampaignId\",\n            value: function verifyCampaignId() {\n                if (!this.id) {\n                    throw new Error(\"Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)\");\n                }\n            }\n        },\n        {\n            key: \"start\",\n            value: function() {\n                var _start = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    _context2.next = 3;\n                                    return this.client.startCampaign(this.id, options);\n                                case 3:\n                                    return _context2.abrupt(\"return\", _context2.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function start(_x) {\n                    return _start.apply(this, arguments);\n                }\n                return start;\n            }()\n        },\n        {\n            key: \"update\",\n            value: function() {\n                var _update = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3(data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    return _context3.abrupt(\"return\", this.client.updateCampaign(this.id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function update(_x2) {\n                    return _update.apply(this, arguments);\n                }\n                return update;\n            }()\n        },\n        {\n            key: \"delete\",\n            value: function() {\n                var _delete2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    _context4.next = 3;\n                                    return this.client.deleteCampaign(this.id);\n                                case 3:\n                                    return _context4.abrupt(\"return\", _context4.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function _delete() {\n                    return _delete2.apply(this, arguments);\n                }\n                return _delete;\n            }()\n        },\n        {\n            key: \"stop\",\n            value: function() {\n                var _stop = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    return _context5.abrupt(\"return\", this.client.stopCampaign(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this);\n                }));\n                function stop() {\n                    return _stop.apply(this, arguments);\n                }\n                return stop;\n            }()\n        },\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    return _context6.abrupt(\"return\", this.client.getCampaign(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this);\n                }));\n                function get() {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        }\n    ]);\n    return Campaign;\n}();\nvar Segment = /*#__PURE__*/ function() {\n    function Segment(client, type, id, data) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Segment);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"type\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", void 0);\n        this.client = client;\n        this.type = type;\n        this.id = id;\n        this.data = data;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Segment, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\n                    var _this$data, _this$data2, _this$data3, _this$data4, _this$data5;\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    body = {\n                                        name: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.name,\n                                        filter: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.filter,\n                                        description: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.description,\n                                        all_sender_channels: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.all_sender_channels,\n                                        all_users: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.all_users\n                                    };\n                                    return _context.abrupt(\"return\", this.client.createSegment(this.type, this.id, body));\n                                case 2:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this);\n                }));\n                function create() {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        },\n        {\n            key: \"verifySegmentId\",\n            value: function verifySegmentId() {\n                if (!this.id) {\n                    throw new Error(\"Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)\");\n                }\n            }\n        },\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context2.abrupt(\"return\", this.client.getSegment(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function get() {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"update\",\n            value: function() {\n                var _update = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3(data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context3.abrupt(\"return\", this.client.updateSegment(this.id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function update(_x) {\n                    return _update.apply(this, arguments);\n                }\n                return update;\n            }()\n        },\n        {\n            key: \"addTargets\",\n            value: function() {\n                var _addTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4(targets) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context4.abrupt(\"return\", this.client.addSegmentTargets(this.id, targets));\n                                case 2:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function addTargets(_x2) {\n                    return _addTargets.apply(this, arguments);\n                }\n                return addTargets;\n            }()\n        },\n        {\n            key: \"removeTargets\",\n            value: function() {\n                var _removeTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5(targets) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context5.abrupt(\"return\", this.client.removeSegmentTargets(this.id, targets));\n                                case 2:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this);\n                }));\n                function removeTargets(_x3) {\n                    return _removeTargets.apply(this, arguments);\n                }\n                return removeTargets;\n            }()\n        },\n        {\n            key: \"delete\",\n            value: function() {\n                var _delete2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context6.abrupt(\"return\", this.client.deleteSegment(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this);\n                }));\n                function _delete() {\n                    return _delete2.apply(this, arguments);\n                }\n                return _delete;\n            }()\n        },\n        {\n            key: \"targetExists\",\n            value: function() {\n                var _targetExists = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee7(targetId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee7$(_context7) {\n                        while(1){\n                            switch(_context7.prev = _context7.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context7.abrupt(\"return\", this.client.segmentTargetExists(this.id, targetId));\n                                case 2:\n                                case \"end\":\n                                    return _context7.stop();\n                            }\n                        }\n                    }, _callee7, this);\n                }));\n                function targetExists(_x4) {\n                    return _targetExists.apply(this, arguments);\n                }\n                return targetExists;\n            }()\n        },\n        {\n            key: \"queryTargets\",\n            value: function() {\n                var _queryTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee8() {\n                    var filter, sort, options, _args8 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee8$(_context8) {\n                        while(1){\n                            switch(_context8.prev = _context8.next){\n                                case 0:\n                                    filter = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                                    sort = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : [];\n                                    options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};\n                                    this.verifySegmentId();\n                                    return _context8.abrupt(\"return\", this.client.querySegmentTargets(this.id, filter, sort, options));\n                                case 5:\n                                case \"end\":\n                                    return _context8.stop();\n                            }\n                        }\n                    }, _callee8, this);\n                }));\n                function queryTargets() {\n                    return _queryTargets.apply(this, arguments);\n                }\n                return queryTargets;\n            }()\n        }\n    ]);\n    return Segment;\n}();\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19___default()(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19___default()(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18___default()(this, result);\n    };\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * Utility Types\n */ /* Unknown Record */ //alias to avoid breaking change\n/**\n * Response Types\n */ // TODO: Figure out a way to strongly type set and unset.\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\n/**\n * Option Types\n */ // TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update\n/** @deprecated use MarkChannelsReadOptions instead */ // TODO: rename to UpdateChannelTypeOptions in the next major update\n/**\n * Event Types\n */ /**\n * Filter Types\n */ /**\n * Sort Types\n */ /**\n * Base Types\n */ /**\n * @deprecated Use ChannelMemberResponse instead\n */ /*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user`:\n    - soft: marks user as deleted and retains all user data\n    - pruning: marks user as deleted and nullifies user information\n    - hard: deletes user completely - this requires hard option for messages and conversation as well\n  `conversations`:\n    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)\n    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)\n  `messages`:\n    - soft: marks all user messages as deleted without removing any related message data\n    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags\n    - hard: deletes messages completely with all related information\n  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID\n */ // TODO: add better typing\nvar ErrorFromResponse = /*#__PURE__*/ function(_Error) {\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17___default()(ErrorFromResponse, _Error);\n    var _super = _createSuper(ErrorFromResponse);\n    function ErrorFromResponse() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, ErrorFromResponse);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default()(_this), \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default()(_this), \"response\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default()(_this), \"status\", void 0);\n        return _this;\n    }\n    return ErrorFromResponse;\n}(/*#__PURE__*/ _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20___default()(Error));\nvar VotingVisibility;\n(function(VotingVisibility) {\n    VotingVisibility[\"anonymous\"] = \"anonymous\";\n    VotingVisibility[\"public\"] = \"public\";\n})(VotingVisibility || (VotingVisibility = {}));\nvar _excluded$1 = [\n    \"parent_message_id\",\n    \"parent_message\",\n    \"latest_replies\",\n    \"thread_participants\",\n    \"reply_count\",\n    \"channel\",\n    \"read\"\n];\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nvar Thread = /*#__PURE__*/ function() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function Thread(client, t) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Thread);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"latestReplies\", []);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"participants\", []);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"message\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"channel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_channel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"replyCount\", 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"read\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", {});\n        var parent_message_id = t.parent_message_id, parent_message = t.parent_message, latest_replies = t.latest_replies, thread_participants = t.thread_participants, reply_count = t.reply_count, channel = t.channel, read = t.read, data = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default()(t, _excluded$1);\n        this.id = parent_message_id;\n        this.message = formatMessage(parent_message);\n        this.latestReplies = latest_replies.map(formatMessage);\n        this.participants = thread_participants;\n        this.replyCount = reply_count;\n        this.channel = channel;\n        this._channel = client.channel(t.channel.type, t.channel.id);\n        this._client = client;\n        if (read) {\n            var _iterator = _createForOfIteratorHelper$1(read), _step;\n            try {\n                for(_iterator.s(); !(_step = _iterator.n()).done;){\n                    var r = _step.value;\n                    this.read[r.user.id] = _objectSpread$1(_objectSpread$1({}, r), {}, {\n                        last_read: new Date(r.last_read)\n                    });\n                }\n            } catch (err) {\n                _iterator.e(err);\n            } finally{\n                _iterator.f();\n            }\n        }\n        this.data = data;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Thread, [\n        {\n            key: \"getClient\",\n            value: function getClient() {\n                return this._client;\n            }\n        },\n        {\n            key: \"addReply\",\n            value: function addReply(message) {\n                if (message.parent_id !== this.message.id) {\n                    throw new Error(\"Message does not belong to this thread\");\n                }\n                this.latestReplies = addToMessageList(this.latestReplies, formatMessage(message), true);\n            }\n        },\n        {\n            key: \"updateReply\",\n            value: function updateReply(message) {\n                this.latestReplies = this.latestReplies.map(function(m) {\n                    if (m.id === message.id) {\n                        return formatMessage(message);\n                    }\n                    return m;\n                });\n            }\n        },\n        {\n            key: \"updateMessageOrReplyIfExists\",\n            value: function updateMessageOrReplyIfExists(message) {\n                if (!message.parent_id && message.id !== this.message.id) {\n                    return;\n                }\n                if (message.parent_id && message.parent_id !== this.message.id) {\n                    return;\n                }\n                if (message.parent_id && message.parent_id === this.message.id) {\n                    this.updateReply(message);\n                    return;\n                }\n                if (!message.parent_id && message.id === this.message.id) {\n                    this.message = formatMessage(message);\n                }\n            }\n        },\n        {\n            key: \"addReaction\",\n            value: function addReaction(reaction, message, enforce_unique) {\n                var _this = this;\n                if (!message) return;\n                this.latestReplies = this.latestReplies.map(function(m) {\n                    if (m.id === message.id) {\n                        return formatMessage(_this._channel.state.addReaction(reaction, message, enforce_unique));\n                    }\n                    return m;\n                });\n            }\n        },\n        {\n            key: \"removeReaction\",\n            value: function removeReaction(reaction, message) {\n                var _this2 = this;\n                if (!message) return;\n                this.latestReplies = this.latestReplies.map(function(m) {\n                    if (m.id === message.id) {\n                        return formatMessage(_this2._channel.state.removeReaction(reaction, message));\n                    }\n                    return m;\n                });\n            }\n        }\n    ]);\n    return Thread;\n}();\nvar _excluded = [\n    \"created_at\",\n    \"updated_at\",\n    \"last_active\",\n    \"online\"\n], _excluded2 = [\n    \"params\",\n    \"headers\"\n];\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction isString(x) {\n    return typeof x === \"string\" || x instanceof String;\n}\nvar StreamChat = /*#__PURE__*/ function() {\n    function StreamChat(_key, secretOrOptions, _options) {\n        var _this = this, _this$options;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, StreamChat);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_user\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"activeChannels\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"anonymous\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"persistUserOnConnectionFailure\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"axiosInstance\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"baseURL\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"browser\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"cleaningIntervalRef\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"clientID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"configs\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"key\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"listeners\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"logger\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"recoverStateOnReconnect\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"mutedChannels\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"mutedUsers\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"node\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"options\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"secret\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setUserPromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"tokenManager\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"user\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"userAgent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"userID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsBaseURL\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsConnection\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsFallback\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsPromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"consecutiveFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"insightMetrics\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"defaultWSTimeoutWithFallback\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"defaultWSTimeout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"nextRequestAbortController\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_getConnectionID\", function() {\n            var _this$wsConnection, _this$wsFallback;\n            return ((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID) || ((_this$wsFallback = _this.wsFallback) === null || _this$wsFallback === void 0 ? void 0 : _this$wsFallback.connectionID);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_hasConnectionID\", function() {\n            return Boolean(_this._getConnectionID());\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectUser\", /*#__PURE__*/ function() {\n            var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(user, userTokenOrProvider) {\n                var setTokenPromise, wsPromise;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                    while(1){\n                        switch(_context.prev = _context.next){\n                            case 0:\n                                if (user.id) {\n                                    _context.next = 2;\n                                    break;\n                                }\n                                throw new Error('The \"id\" field on the user is missing');\n                            case 2:\n                                if (!(_this.userID === user.id && _this.setUserPromise)) {\n                                    _context.next = 5;\n                                    break;\n                                }\n                                console.warn(\"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n                                return _context.abrupt(\"return\", _this.setUserPromise);\n                            case 5:\n                                if (!_this.userID) {\n                                    _context.next = 7;\n                                    break;\n                                }\n                                throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n                            case 7:\n                                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n                                    console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n                                } // we generate the client id client side\n                                _this.userID = user.id;\n                                _this.anonymous = false;\n                                setTokenPromise = _this._setToken(user, userTokenOrProvider);\n                                _this._setUser(user);\n                                wsPromise = _this.openConnection();\n                                _this.setUserPromise = Promise.all([\n                                    setTokenPromise,\n                                    wsPromise\n                                ]).then(function(result) {\n                                    return result[1];\n                                } // We only return connection promise;\n                                );\n                                _context.prev = 14;\n                                _context.next = 17;\n                                return _this.setUserPromise;\n                            case 17:\n                                return _context.abrupt(\"return\", _context.sent);\n                            case 20:\n                                _context.prev = 20;\n                                _context.t0 = _context[\"catch\"](14);\n                                if (_this.persistUserOnConnectionFailure) {\n                                    // cleanup client to allow the user to retry connectUser again\n                                    _this.closeConnection();\n                                } else {\n                                    _this.disconnectUser();\n                                }\n                                throw _context.t0;\n                            case 24:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, null, [\n                    [\n                        14,\n                        20\n                    ]\n                ]);\n            }));\n            return function(_x, _x2) {\n                return _ref.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setUser\", this.connectUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setToken\", function(user, userTokenOrProvider) {\n            return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"closeConnection\", /*#__PURE__*/ function() {\n            var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(timeout) {\n                var _this$wsConnection2, _this$wsFallback2;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                    while(1){\n                        switch(_context2.prev = _context2.next){\n                            case 0:\n                                if (_this.cleaningIntervalRef != null) {\n                                    clearInterval(_this.cleaningIntervalRef);\n                                    _this.cleaningIntervalRef = undefined;\n                                }\n                                _context2.next = 3;\n                                return Promise.all([\n                                    (_this$wsConnection2 = _this.wsConnection) === null || _this$wsConnection2 === void 0 ? void 0 : _this$wsConnection2.disconnect(timeout),\n                                    (_this$wsFallback2 = _this.wsFallback) === null || _this$wsFallback2 === void 0 ? void 0 : _this$wsFallback2.disconnect(timeout)\n                                ]);\n                            case 3:\n                                return _context2.abrupt(\"return\", Promise.resolve());\n                            case 4:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2);\n            }));\n            return function(_x3) {\n                return _ref2.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"openConnection\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\n            var _this$wsConnection3, _this$wsConnection4, _this$wsFallback3;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            if (_this.userID) {\n                                _context3.next = 2;\n                                break;\n                            }\n                            throw Error(\"User is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n                        case 2:\n                            if (!((_this$wsConnection3 = _this.wsConnection) !== null && _this$wsConnection3 !== void 0 && _this$wsConnection3.isConnecting && _this.wsPromise)) {\n                                _context3.next = 5;\n                                break;\n                            }\n                            _this.logger(\"info\", \"client:openConnection() - connection already in progress\", {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            return _context3.abrupt(\"return\", _this.wsPromise);\n                        case 5:\n                            if (!(((_this$wsConnection4 = _this.wsConnection) !== null && _this$wsConnection4 !== void 0 && _this$wsConnection4.isHealthy || (_this$wsFallback3 = _this.wsFallback) !== null && _this$wsFallback3 !== void 0 && _this$wsFallback3.isHealthy()) && _this._hasConnectionID())) {\n                                _context3.next = 8;\n                                break;\n                            }\n                            _this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\", {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            return _context3.abrupt(\"return\", Promise.resolve());\n                        case 8:\n                            _this.clientID = \"\".concat(_this.userID, \"--\").concat(randomId());\n                            _this.wsPromise = _this.connect();\n                            _this._startCleaning();\n                            return _context3.abrupt(\"return\", _this.wsPromise);\n                        case 12:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setupConnection\", this.openConnection);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_normalizeDate\", function(before) {\n            if (before instanceof Date) {\n                before = before.toISOString();\n            }\n            if (before === \"\") {\n                throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n            }\n            return before;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnectUser\", /*#__PURE__*/ function() {\n            var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4(timeout) {\n                var closePromise, _i, _Object$values, _channel;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                    while(1){\n                        switch(_context4.prev = _context4.next){\n                            case 0:\n                                _this.logger(\"info\", \"client:disconnect() - Disconnecting the client\", {\n                                    tags: [\n                                        \"connection\",\n                                        \"client\"\n                                    ]\n                                }); // remove the user specific fields\n                                delete _this.user;\n                                delete _this._user;\n                                delete _this.userID;\n                                _this.anonymous = false;\n                                closePromise = _this.closeConnection(timeout);\n                                for(_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++){\n                                    _channel = _Object$values[_i];\n                                    _channel._disconnect();\n                                } // ensure we no longer return inactive channels\n                                _this.activeChannels = {}; // reset client state\n                                _this.state = new ClientState(); // reset token manager\n                                setTimeout(_this.tokenManager.reset); // delay reseting to use token for disconnect calls\n                                // close the WS connection\n                                return _context4.abrupt(\"return\", closePromise);\n                            case 11:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4);\n            }));\n            return function(_x4) {\n                return _ref4.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnect\", this.disconnectUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectAnonymousUser\", function() {\n            if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n                console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n            }\n            _this.anonymous = true;\n            _this.userID = randomId();\n            var anonymousUser = {\n                id: _this.userID,\n                anon: true\n            };\n            _this._setToken(anonymousUser, \"\");\n            _this._setUser(anonymousUser);\n            return _this._setupConnection();\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setAnonymousUser\", this.connectAnonymousUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"doAxiosRequest\", /*#__PURE__*/ function() {\n            var _ref5 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5(type, url, data) {\n                var options, requestConfig, response, _requestConfig$header, _args5 = arguments;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                    while(1){\n                        switch(_context5.prev = _context5.next){\n                            case 0:\n                                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};\n                                _context5.next = 3;\n                                return _this.tokenManager.tokenReady();\n                            case 3:\n                                requestConfig = _this._enrichAxiosOptions(options);\n                                _context5.prev = 4;\n                                _this._logApiRequest(type, url, data, requestConfig);\n                                _context5.t0 = type;\n                                _context5.next = _context5.t0 === \"get\" ? 9 : _context5.t0 === \"delete\" ? 13 : _context5.t0 === \"post\" ? 17 : _context5.t0 === \"postForm\" ? 21 : _context5.t0 === \"put\" ? 25 : _context5.t0 === \"patch\" ? 29 : _context5.t0 === \"options\" ? 33 : 37;\n                                break;\n                            case 9:\n                                _context5.next = 11;\n                                return _this.axiosInstance.get(url, requestConfig);\n                            case 11:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 13:\n                                _context5.next = 15;\n                                return _this.axiosInstance.delete(url, requestConfig);\n                            case 15:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 17:\n                                _context5.next = 19;\n                                return _this.axiosInstance.post(url, data, requestConfig);\n                            case 19:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 21:\n                                _context5.next = 23;\n                                return _this.axiosInstance.postForm(url, data, requestConfig);\n                            case 23:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 25:\n                                _context5.next = 27;\n                                return _this.axiosInstance.put(url, data, requestConfig);\n                            case 27:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 29:\n                                _context5.next = 31;\n                                return _this.axiosInstance.patch(url, data, requestConfig);\n                            case 31:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 33:\n                                _context5.next = 35;\n                                return _this.axiosInstance.options(url, requestConfig);\n                            case 35:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 37:\n                                throw new Error(\"Invalid request type\");\n                            case 38:\n                                _this._logApiResponse(type, url, response);\n                                _this.consecutiveFailures = 0;\n                                return _context5.abrupt(\"return\", _this.handleResponse(response));\n                            case 43:\n                                _context5.prev = 43;\n                                _context5.t1 = _context5[\"catch\"](4);\n                                _context5.t1.client_request_id = (_requestConfig$header = requestConfig.headers) === null || _requestConfig$header === void 0 ? void 0 : _requestConfig$header[\"x-client-request-id\"];\n                                _this._logApiError(type, url, _context5.t1);\n                                _this.consecutiveFailures += 1;\n                                if (!_context5.t1.response) {\n                                    _context5.next = 60;\n                                    break;\n                                }\n                                if (!(_context5.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {\n                                    _context5.next = 57;\n                                    break;\n                                }\n                                if (!(_this.consecutiveFailures > 1)) {\n                                    _context5.next = 53;\n                                    break;\n                                }\n                                _context5.next = 53;\n                                return sleep(retryInterval(_this.consecutiveFailures));\n                            case 53:\n                                _this.tokenManager.loadToken();\n                                _context5.next = 56;\n                                return _this.doAxiosRequest(type, url, data, options);\n                            case 56:\n                                return _context5.abrupt(\"return\", _context5.sent);\n                            case 57:\n                                return _context5.abrupt(\"return\", _this.handleResponse(_context5.t1.response));\n                            case 60:\n                                throw _context5.t1;\n                            case 61:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, null, [\n                    [\n                        4,\n                        43\n                    ]\n                ]);\n            }));\n            return function(_x5, _x6, _x7) {\n                return _ref5.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"dispatchEvent\", function(event) {\n            if (!event.received_at) event.received_at = new Date(); // client event handlers\n            var postListenerCallbacks = _this._handleClientEvent(event); // channel event handlers\n            var cid = event.cid;\n            var channel = cid ? _this.activeChannels[cid] : undefined;\n            if (channel) {\n                channel._handleChannelEvent(event);\n            }\n            _this._callClientListeners(event);\n            if (channel) {\n                channel._callChannelListeners(event);\n            }\n            postListenerCallbacks.forEach(function(c) {\n                return c();\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"handleEvent\", function(messageEvent) {\n            // dispatch the event to the channel listeners\n            var jsonString = messageEvent.data;\n            var event = JSON.parse(jsonString);\n            _this.dispatchEvent(event);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_updateMemberWatcherReferences\", function(user) {\n            var refMap = _this.state.userChannelReferences[user.id] || {};\n            for(var _channelID in refMap){\n                var _channel2 = _this.activeChannels[_channelID];\n                if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {\n                    if (_channel2.state.members[user.id]) {\n                        _channel2.state.members[user.id].user = user;\n                    }\n                    if (_channel2.state.watchers[user.id]) {\n                        _channel2.state.watchers[user.id] = user;\n                    }\n                    if (_channel2.state.read[user.id]) {\n                        _channel2.state.read[user.id].user = user;\n                    }\n                }\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_updateUserReferences\", this._updateMemberWatcherReferences);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_updateUserMessageReferences\", function(user) {\n            var refMap = _this.state.userChannelReferences[user.id] || {};\n            for(var _channelID2 in refMap){\n                var _channel3 = _this.activeChannels[_channelID2];\n                if (!_channel3) continue;\n                var state = _channel3.state;\n                /** update the messages from this user. */ state === null || state === void 0 ? void 0 : state.updateUserMessages(user);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_deleteUserMessageReference\", function(user) {\n            var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var refMap = _this.state.userChannelReferences[user.id] || {};\n            for(var _channelID3 in refMap){\n                var _channel4 = _this.activeChannels[_channelID3];\n                var state = _channel4.state;\n                /** deleted the messages from this user. */ state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_handleUserEvent\", function(event) {\n            if (!event.user) {\n                return;\n            }\n            /** update the client.state with any changes to users */ if (event.type === \"user.presence.changed\" || event.type === \"user.updated\") {\n                if (event.user.id === _this.userID) {\n                    var user = _objectSpread({}, _this.user || {});\n                    var _user = _objectSpread({}, _this._user || {}); // Remove deleted properties from user objects.\n                    for(var _key2 in _this.user){\n                        if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {\n                            continue;\n                        }\n                        delete user[_key2];\n                        delete _user[_key2];\n                    }\n                    /** Updating only available properties in _user object. */ for(var _key3 in event.user){\n                        if (_user && _key3 in _user) {\n                            _user[_key3] = event.user[_key3];\n                        }\n                    } // @ts-expect-error\n                    _this._user = _objectSpread({}, _user);\n                    _this.user = _objectSpread(_objectSpread({}, user), event.user);\n                }\n                _this.state.updateUser(event.user);\n                _this._updateMemberWatcherReferences(event.user);\n            }\n            if (event.type === \"user.updated\") {\n                _this._updateUserMessageReferences(event.user);\n            }\n            if (event.type === \"user.deleted\" && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n                _this._deleteUserMessageReference(event.user, event.hard_delete);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_callClientListeners\", function(event) {\n            var client = _this; // gather and call the listeners\n            var listeners = [];\n            if (client.listeners.all) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(client.listeners.all));\n            }\n            if (client.listeners[event.type]) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(client.listeners[event.type]));\n            } // call the event and send it to the listeners\n            for(var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++){\n                var listener = _listeners[_i2];\n                listener(event);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"recoverState\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n            var cids;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                while(1){\n                    switch(_context6.prev = _context6.next){\n                        case 0:\n                            _this.logger(\"info\", \"client:recoverState() - Start of recoverState with connectionID \".concat(_this._getConnectionID()), {\n                                tags: [\n                                    \"connection\"\n                                ]\n                            });\n                            cids = Object.keys(_this.activeChannels);\n                            if (!(cids.length && _this.recoverStateOnReconnect)) {\n                                _context6.next = 10;\n                                break;\n                            }\n                            _this.logger(\"info\", \"client:recoverState() - Start the querying of \".concat(cids.length, \" channels\"), {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            _context6.next = 6;\n                            return _this.queryChannels({\n                                cid: {\n                                    $in: cids\n                                }\n                            }, {\n                                last_message_at: -1\n                            }, {\n                                limit: 30\n                            });\n                        case 6:\n                            _this.logger(\"info\", \"client:recoverState() - Querying channels finished\", {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            _this.dispatchEvent({\n                                type: \"connection.recovered\"\n                            });\n                            _context6.next = 11;\n                            break;\n                        case 10:\n                            _this.dispatchEvent({\n                                type: \"connection.recovered\"\n                            });\n                        case 11:\n                            _this.wsPromise = Promise.resolve();\n                            _this.setUserPromise = Promise.resolve();\n                        case 13:\n                        case \"end\":\n                            return _context6.stop();\n                    }\n                }\n            }, _callee6);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"getChannelByMembers\", function(channelType, custom) {\n            // Check if the channel already exists.\n            // Only allow 1 channel object per cid\n            var membersStr = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(custom.members || []).sort().join(\",\");\n            var tempCid = \"\".concat(channelType, \":!members-\").concat(membersStr);\n            if (!membersStr) {\n                throw Error(\"Please specify atleast one member when creating unique conversation\");\n            } // channel could exist in `activeChannels` list with either one of the following two keys:\n            // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n            // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n            //                        This is set when you create a channel, but haven't queried yet. After query,\n            //                        we will replace it with `cid`\n            for(var _key4 in _this.activeChannels){\n                var _channel5 = _this.activeChannels[_key4];\n                if (_channel5.disconnected) {\n                    continue;\n                }\n                if (_key4 === tempCid) {\n                    return _channel5;\n                }\n                if (_key4.indexOf(\"\".concat(channelType, \":!members-\")) === 0) {\n                    var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(\",\");\n                    if (membersStrInExistingChannel === membersStr) {\n                        return _channel5;\n                    }\n                }\n            }\n            var channel = new Channel(_this, channelType, undefined, custom); // For the time being set the key as membersStr, since we don't know the cid yet.\n            // In channel.query, we will replace it with 'cid'.\n            _this.activeChannels[tempCid] = channel;\n            return channel;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"getChannelById\", function(channelType, channelID, custom) {\n            if (typeof channelID === \"string\" && ~channelID.indexOf(\":\")) {\n                throw Error(\"Invalid channel id \".concat(channelID, \", can't contain the : character\"));\n            } // only allow 1 channel object per cid\n            var cid = \"\".concat(channelType, \":\").concat(channelID);\n            if (cid in _this.activeChannels && !_this.activeChannels[cid].disconnected) {\n                var _channel6 = _this.activeChannels[cid];\n                if (Object.keys(custom).length > 0) {\n                    _channel6.data = custom;\n                    _channel6._data = custom;\n                }\n                return _channel6;\n            }\n            var channel = new Channel(_this, channelType, channelID, custom);\n            _this.activeChannels[channel.cid] = channel;\n            return channel;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updateUsers\", this.upsertUsers);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updateUser\", this.upsertUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_unblockMessage\", this.unblockMessage);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"markAllRead\", this.markChannelsRead);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_isUsingServerAuth\", function() {\n            return !!_this.secret;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_buildWSPayload\", function(client_request_id) {\n            return JSON.stringify({\n                user_id: _this.userID,\n                user_details: _this._user,\n                device: _this.options.device,\n                client_request_id: client_request_id\n            });\n        });\n        // set the key\n        this.key = _key;\n        this.listeners = {};\n        this.state = new ClientState(); // a list of channels to hide ws events from\n        this.mutedChannels = [];\n        this.mutedUsers = []; // set the secret\n        if (secretOrOptions && isString(secretOrOptions)) {\n            this.secret = secretOrOptions;\n        } // set the options... and figure out defaults...\n        var inputOptions = _options ? _options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n        this.browser = typeof inputOptions.browser !== \"undefined\" ? inputOptions.browser : \"undefined\" !== \"undefined\";\n        this.node = !this.browser;\n        this.options = _objectSpread({\n            timeout: 3000,\n            withCredentials: false,\n            // making sure cookies are not sent\n            warmUp: false,\n            recoverStateOnReconnect: true\n        }, inputOptions);\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_10___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].create(this.options);\n        this.setBaseURL(this.options.baseURL || \"https://chat.stream-io-api.com\");\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_RUN) {\n            this.setBaseURL(\"http://localhost:3030\");\n        }\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_HOST) {\n            this.setBaseURL(\"http://\" + process.env.STREAM_LOCAL_TEST_HOST);\n        } // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromise = null;\n        this.setUserPromise = null; // keeps a reference to all the channels that are in use\n        this.activeChannels = {}; // mapping between channel groups and configs\n        this.configs = {};\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.persistUserOnConnectionFailure; // If its a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.insightMetrics = new InsightMetrics();\n        this.defaultWSTimeoutWithFallback = 6000;\n        this.defaultWSTimeout = 15000;\n        this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n        /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */ this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : function() {\n            return null;\n        };\n        this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    }\n    /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */ _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(StreamChat, [\n        {\n            key: \"devToken\",\n            value: function devToken(userID) {\n                return DevToken(userID);\n            }\n        },\n        {\n            key: \"getAuthType\",\n            value: function getAuthType() {\n                return this.anonymous ? \"anonymous\" : \"jwt\";\n            }\n        },\n        {\n            key: \"setBaseURL\",\n            value: function setBaseURL(baseURL) {\n                this.baseURL = baseURL;\n                this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n            }\n        },\n        {\n            key: \"_setUser\",\n            value: function _setUser(user) {\n                /**\n       * This one is used by the frontend. This is a copy of the current user object stored on backend.\n       * It contains reserved properties and own user properties which are not present in `this._user`.\n       */ this.user = user;\n                this.userID = user.id; // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n                this._user = _objectSpread({}, user);\n            }\n        },\n        {\n            key: \"updateAppSettings\",\n            value: /**\n     * updateAppSettings - updates application settings\n     *\n     * @param {AppSettings} options App settings.\n     * IE: {\n        'apn_config': {\n          'auth_type': 'token',\n          'auth_key\": fs.readFileSync(\n            './apn-push-auth-key.p8',\n            'utf-8',\n          ),\n          'key_id': 'keyid',\n          'team_id': 'teamid',\n          'notification_template\": 'notification handlebars template',\n          'bundle_id': 'com.apple.your.app',\n          'development': true\n        },\n        'firebase_config': {\n          'server_key': 'server key from fcm',\n          'notification_template': 'notification handlebars template',\n          'data_template': 'data handlebars template',\n          'apn_template': 'apn notification handlebars template under v2'\n        },\n        'webhook_url': 'https://acme.com/my/awesome/webhook/'\n      }\n     */ function() {\n                var _updateAppSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee7(options) {\n                    var apn_config;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee7$(_context7) {\n                        while(1){\n                            switch(_context7.prev = _context7.next){\n                                case 0:\n                                    apn_config = options.apn_config;\n                                    if (apn_config !== null && apn_config !== void 0 && apn_config.p12_cert) {\n                                        options = _objectSpread(_objectSpread({}, options), {}, {\n                                            apn_config: _objectSpread(_objectSpread({}, apn_config), {}, {\n                                                p12_cert: Buffer.from(apn_config.p12_cert).toString(\"base64\")\n                                            })\n                                        });\n                                    }\n                                    _context7.next = 4;\n                                    return this.patch(this.baseURL + \"/app\", options);\n                                case 4:\n                                    return _context7.abrupt(\"return\", _context7.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context7.stop();\n                            }\n                        }\n                    }, _callee7, this);\n                }));\n                function updateAppSettings(_x8) {\n                    return _updateAppSettings.apply(this, arguments);\n                }\n                return updateAppSettings;\n            }()\n        },\n        {\n            key: \"revokeTokens\",\n            value: /**\n     * Revokes all tokens on application level issued before given time\n     */ function() {\n                var _revokeTokens = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee8(before) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee8$(_context8) {\n                        while(1){\n                            switch(_context8.prev = _context8.next){\n                                case 0:\n                                    _context8.next = 2;\n                                    return this.updateAppSettings({\n                                        revoke_tokens_issued_before: this._normalizeDate(before)\n                                    });\n                                case 2:\n                                    return _context8.abrupt(\"return\", _context8.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context8.stop();\n                            }\n                        }\n                    }, _callee8, this);\n                }));\n                function revokeTokens(_x9) {\n                    return _revokeTokens.apply(this, arguments);\n                }\n                return revokeTokens;\n            }()\n        },\n        {\n            key: \"revokeUserToken\",\n            value: function() {\n                var _revokeUserToken = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee9(userID, before) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee9$(_context9) {\n                        while(1){\n                            switch(_context9.prev = _context9.next){\n                                case 0:\n                                    _context9.next = 2;\n                                    return this.revokeUsersToken([\n                                        userID\n                                    ], before);\n                                case 2:\n                                    return _context9.abrupt(\"return\", _context9.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context9.stop();\n                            }\n                        }\n                    }, _callee9, this);\n                }));\n                function revokeUserToken(_x10, _x11) {\n                    return _revokeUserToken.apply(this, arguments);\n                }\n                return revokeUserToken;\n            }()\n        },\n        {\n            key: \"revokeUsersToken\",\n            value: function() {\n                var _revokeUsersToken = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee10(userIDs, before) {\n                    var users, _iterator, _step, userID;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee10$(_context10) {\n                        while(1){\n                            switch(_context10.prev = _context10.next){\n                                case 0:\n                                    if (before === undefined) {\n                                        before = new Date().toISOString();\n                                    } else {\n                                        before = this._normalizeDate(before);\n                                    }\n                                    users = [];\n                                    _iterator = _createForOfIteratorHelper(userIDs);\n                                    try {\n                                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                                            userID = _step.value;\n                                            users.push({\n                                                id: userID,\n                                                set: {\n                                                    revoke_tokens_issued_before: before\n                                                }\n                                            });\n                                        }\n                                    } catch (err) {\n                                        _iterator.e(err);\n                                    } finally{\n                                        _iterator.f();\n                                    }\n                                    _context10.next = 6;\n                                    return this.partialUpdateUsers(users);\n                                case 6:\n                                    return _context10.abrupt(\"return\", _context10.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context10.stop();\n                            }\n                        }\n                    }, _callee10, this);\n                }));\n                function revokeUsersToken(_x12, _x13) {\n                    return _revokeUsersToken.apply(this, arguments);\n                }\n                return revokeUsersToken;\n            }()\n        },\n        {\n            key: \"getAppSettings\",\n            value: function() {\n                var _getAppSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee11() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee11$(_context11) {\n                        while(1){\n                            switch(_context11.prev = _context11.next){\n                                case 0:\n                                    _context11.next = 2;\n                                    return this.get(this.baseURL + \"/app\");\n                                case 2:\n                                    return _context11.abrupt(\"return\", _context11.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context11.stop();\n                            }\n                        }\n                    }, _callee11, this);\n                }));\n                function getAppSettings() {\n                    return _getAppSettings.apply(this, arguments);\n                }\n                return getAppSettings;\n            }()\n        },\n        {\n            key: \"testPushSettings\",\n            value: function() {\n                var _testPushSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee12(userID) {\n                    var data, _args12 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee12$(_context12) {\n                        while(1){\n                            switch(_context12.prev = _context12.next){\n                                case 0:\n                                    data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n                                    _context12.next = 3;\n                                    return this.post(this.baseURL + \"/check_push\", _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n                                        user_id: userID\n                                    }, data.messageID ? {\n                                        message_id: data.messageID\n                                    } : {}), data.apnTemplate ? {\n                                        apn_template: data.apnTemplate\n                                    } : {}), data.firebaseTemplate ? {\n                                        firebase_template: data.firebaseTemplate\n                                    } : {}), data.firebaseDataTemplate ? {\n                                        firebase_data_template: data.firebaseDataTemplate\n                                    } : {}), data.skipDevices ? {\n                                        skip_devices: true\n                                    } : {}), data.pushProviderName ? {\n                                        push_provider_name: data.pushProviderName\n                                    } : {}), data.pushProviderType ? {\n                                        push_provider_type: data.pushProviderType\n                                    } : {}));\n                                case 3:\n                                    return _context12.abrupt(\"return\", _context12.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context12.stop();\n                            }\n                        }\n                    }, _callee12, this);\n                }));\n                function testPushSettings(_x14) {\n                    return _testPushSettings.apply(this, arguments);\n                }\n                return testPushSettings;\n            }()\n        },\n        {\n            key: \"testSQSSettings\",\n            value: function() {\n                var _testSQSSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee13() {\n                    var data, _args13 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee13$(_context13) {\n                        while(1){\n                            switch(_context13.prev = _context13.next){\n                                case 0:\n                                    data = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                                    _context13.next = 3;\n                                    return this.post(this.baseURL + \"/check_sqs\", data);\n                                case 3:\n                                    return _context13.abrupt(\"return\", _context13.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context13.stop();\n                            }\n                        }\n                    }, _callee13, this);\n                }));\n                function testSQSSettings() {\n                    return _testSQSSettings.apply(this, arguments);\n                }\n                return testSQSSettings;\n            }()\n        },\n        {\n            key: \"testSNSSettings\",\n            value: function() {\n                var _testSNSSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee14() {\n                    var data, _args14 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee14$(_context14) {\n                        while(1){\n                            switch(_context14.prev = _context14.next){\n                                case 0:\n                                    data = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                                    _context14.next = 3;\n                                    return this.post(this.baseURL + \"/check_sns\", data);\n                                case 3:\n                                    return _context14.abrupt(\"return\", _context14.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context14.stop();\n                            }\n                        }\n                    }, _callee14, this);\n                }));\n                function testSNSSettings() {\n                    return _testSNSSettings.apply(this, arguments);\n                }\n                return testSNSSettings;\n            }()\n        },\n        {\n            key: \"setGuestUser\",\n            value: /**\n     * setGuestUser - Setup a temporary guest user\n     *\n     * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n     *\n     * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n     */ function() {\n                var _setGuestUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee15(user) {\n                    var response, _response$user, guestUser;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee15$(_context15) {\n                        while(1){\n                            switch(_context15.prev = _context15.next){\n                                case 0:\n                                    this.anonymous = true;\n                                    _context15.prev = 1;\n                                    _context15.next = 4;\n                                    return this.post(this.baseURL + \"/guest\", {\n                                        user: user\n                                    });\n                                case 4:\n                                    response = _context15.sent;\n                                    _context15.next = 11;\n                                    break;\n                                case 7:\n                                    _context15.prev = 7;\n                                    _context15.t0 = _context15[\"catch\"](1);\n                                    this.anonymous = false;\n                                    throw _context15.t0;\n                                case 11:\n                                    this.anonymous = false; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                                    _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default()(_response$user, _excluded);\n                                    _context15.next = 15;\n                                    return this.connectUser(guestUser, response.access_token);\n                                case 15:\n                                    return _context15.abrupt(\"return\", _context15.sent);\n                                case 16:\n                                case \"end\":\n                                    return _context15.stop();\n                            }\n                        }\n                    }, _callee15, this, [\n                        [\n                            1,\n                            7\n                        ]\n                    ]);\n                }));\n                function setGuestUser(_x15) {\n                    return _setGuestUser.apply(this, arguments);\n                }\n                return setGuestUser;\n            }()\n        },\n        {\n            key: \"createToken\",\n            value: function createToken(userID, exp, iat) {\n                if (this.secret == null) {\n                    throw Error(\"tokens can only be created server-side using the API Secret\");\n                }\n                var extra = {};\n                if (exp) {\n                    extra.exp = exp;\n                }\n                if (iat) {\n                    extra.iat = iat;\n                }\n                return JWTUserToken(this.secret, userID, extra, {});\n            }\n        },\n        {\n            key: \"on\",\n            value: function on(callbackOrString, callbackOrNothing) {\n                var _this2 = this;\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this.logger(\"info\", \"Attaching listener for \".concat(key, \" event\"), {\n                    tags: [\n                        \"event\",\n                        \"client\"\n                    ]\n                });\n                this.listeners[key].push(callback);\n                return {\n                    unsubscribe: function unsubscribe() {\n                        _this2.logger(\"info\", \"Removing listener for \".concat(key, \" event\"), {\n                            tags: [\n                                \"event\",\n                                \"client\"\n                            ]\n                        });\n                        _this2.listeners[key] = _this2.listeners[key].filter(function(el) {\n                            return el !== callback;\n                        });\n                    }\n                };\n            }\n        },\n        {\n            key: \"off\",\n            value: function off(callbackOrString, callbackOrNothing) {\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this.logger(\"info\", \"Removing listener for \".concat(key, \" event\"), {\n                    tags: [\n                        \"event\",\n                        \"client\"\n                    ]\n                });\n                this.listeners[key] = this.listeners[key].filter(function(value) {\n                    return value !== callback;\n                });\n            }\n        },\n        {\n            key: \"_logApiRequest\",\n            value: function _logApiRequest(type, url, data, config) {\n                this.logger(\"info\", \"client: \".concat(type, \" - Request - \").concat(url), {\n                    tags: [\n                        \"api\",\n                        \"api_request\",\n                        \"client\"\n                    ],\n                    url: url,\n                    payload: data,\n                    config: config\n                });\n            }\n        },\n        {\n            key: \"_logApiResponse\",\n            value: function _logApiResponse(type, url, response) {\n                this.logger(\"info\", \"client:\".concat(type, \" - Response - url: \").concat(url, \" > status \").concat(response.status), {\n                    tags: [\n                        \"api\",\n                        \"api_response\",\n                        \"client\"\n                    ],\n                    url: url,\n                    response: response\n                });\n            }\n        },\n        {\n            key: \"_logApiError\",\n            value: function _logApiError(type, url, error) {\n                this.logger(\"error\", \"client:\".concat(type, \" - Error - url: \").concat(url), {\n                    tags: [\n                        \"api\",\n                        \"api_response\",\n                        \"client\"\n                    ],\n                    url: url,\n                    error: error\n                });\n            }\n        },\n        {\n            key: \"get\",\n            value: function get(url, params) {\n                return this.doAxiosRequest(\"get\", url, null, {\n                    params: params\n                });\n            }\n        },\n        {\n            key: \"put\",\n            value: function put(url, data) {\n                return this.doAxiosRequest(\"put\", url, data);\n            }\n        },\n        {\n            key: \"post\",\n            value: function post(url, data) {\n                return this.doAxiosRequest(\"post\", url, data);\n            }\n        },\n        {\n            key: \"patch\",\n            value: function patch(url, data) {\n                return this.doAxiosRequest(\"patch\", url, data);\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete(url, params) {\n                return this.doAxiosRequest(\"delete\", url, null, {\n                    params: params\n                });\n            }\n        },\n        {\n            key: \"sendFile\",\n            value: function sendFile(url, uri, name, contentType, user) {\n                var data = addFileToFormData(uri, name, contentType || \"multipart/form-data\");\n                if (user != null) data.append(\"user\", JSON.stringify(user));\n                return this.doAxiosRequest(\"postForm\", url, data, {\n                    headers: data.getHeaders ? data.getHeaders() : {},\n                    // node vs browser\n                    config: {\n                        timeout: 0,\n                        maxContentLength: Infinity,\n                        maxBodyLength: Infinity\n                    }\n                });\n            }\n        },\n        {\n            key: \"errorFromResponse\",\n            value: function errorFromResponse(response) {\n                var err;\n                err = new ErrorFromResponse(\"StreamChat error HTTP code: \".concat(response.status));\n                if (response.data && response.data.code) {\n                    err = new Error(\"StreamChat error code \".concat(response.data.code, \": \").concat(response.data.message));\n                    err.code = response.data.code;\n                }\n                err.response = response;\n                err.status = response.status;\n                return err;\n            }\n        },\n        {\n            key: \"handleResponse\",\n            value: function handleResponse(response) {\n                var data = response.data;\n                if (isErrorResponse(response)) {\n                    throw this.errorFromResponse(response);\n                }\n                return data;\n            }\n        },\n        {\n            key: \"_handleClientEvent\",\n            value: function _handleClientEvent(event) {\n                var _event$me, _event$me2, _this3 = this;\n                var client = this;\n                var postListenerCallbacks = [];\n                this.logger(\"info\", \"client:_handleClientEvent - Received event of type { \".concat(event.type, \" }\"), {\n                    tags: [\n                        \"event\",\n                        \"client\"\n                    ],\n                    event: event\n                });\n                if (event.type === \"user.presence.changed\" || event.type === \"user.updated\" || event.type === \"user.deleted\") {\n                    this._handleUserEvent(event);\n                }\n                if (event.type === \"health.check\" && event.me) {\n                    client.user = event.me;\n                    client.state.updateUser(event.me);\n                    client.mutedChannels = event.me.channel_mutes;\n                    client.mutedUsers = event.me.mutes;\n                }\n                if (event.channel && event.type === \"notification.message_new\") {\n                    this._addChannelConfig(event.channel);\n                }\n                if (event.type === \"notification.channel_mutes_updated\" && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {\n                    this.mutedChannels = event.me.channel_mutes;\n                }\n                if (event.type === \"notification.mutes_updated\" && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {\n                    this.mutedUsers = event.me.mutes;\n                }\n                if (event.type === \"notification.mark_read\" && event.unread_channels === 0) {\n                    var activeChannelKeys = Object.keys(this.activeChannels);\n                    activeChannelKeys.forEach(function(activeChannelKey) {\n                        return _this3.activeChannels[activeChannelKey].state.unreadCount = 0;\n                    });\n                }\n                if ((event.type === \"channel.deleted\" || event.type === \"notification.channel_deleted\") && event.cid) {\n                    var _this$activeChannels$;\n                    client.state.deleteAllChannelReference(event.cid);\n                    (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();\n                    postListenerCallbacks.push(function() {\n                        if (!event.cid) return;\n                        delete _this3.activeChannels[event.cid];\n                    });\n                }\n                return postListenerCallbacks;\n            }\n        },\n        {\n            key: \"_muteStatus\",\n            value: function _muteStatus(cid) {\n                var muteStatus;\n                for(var i = 0; i < this.mutedChannels.length; i++){\n                    var _mute$channel;\n                    var mute = this.mutedChannels[i];\n                    if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {\n                        muteStatus = {\n                            muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n                            createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n                            expiresAt: mute.expires ? new Date(mute.expires) : null\n                        };\n                        break;\n                    }\n                }\n                if (muteStatus) {\n                    return muteStatus;\n                }\n                return {\n                    muted: false,\n                    createdAt: null,\n                    expiresAt: null\n                };\n            }\n        },\n        {\n            key: \"connect\",\n            value: /**\n     * @private\n     */ function() {\n                var _connect = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee16() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee16$(_context16) {\n                        while(1){\n                            switch(_context16.prev = _context16.next){\n                                case 0:\n                                    if (!(!this.userID || !this._user)) {\n                                        _context16.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n                                case 2:\n                                    if (this.wsBaseURL) {\n                                        _context16.next = 4;\n                                        break;\n                                    }\n                                    throw Error(\"Websocket base url not set\");\n                                case 4:\n                                    if (this.clientID) {\n                                        _context16.next = 6;\n                                        break;\n                                    }\n                                    throw Error(\"clientID is not set\");\n                                case 6:\n                                    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                                        this._sayHi();\n                                    } // The StableWSConnection handles all the reconnection logic.\n                                    if (this.options.wsConnection && this.node) {\n                                        // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                                        this.options.wsConnection.setClient(this);\n                                        this.wsConnection = this.options.wsConnection;\n                                    } else {\n                                        this.wsConnection = new StableWSConnection({\n                                            client: this\n                                        });\n                                    }\n                                    _context16.prev = 8;\n                                    if (!this.wsFallback) {\n                                        _context16.next = 13;\n                                        break;\n                                    }\n                                    _context16.next = 12;\n                                    return this.wsFallback.connect();\n                                case 12:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 13:\n                                    _context16.next = 15;\n                                    return this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n                                case 15:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 18:\n                                    _context16.prev = 18;\n                                    _context16.t0 = _context16[\"catch\"](8);\n                                    if (!(this.options.enableWSFallback && isWSFailure(_context16.t0) && isOnline())) {\n                                        _context16.next = 29;\n                                        break;\n                                    }\n                                    this.logger(\"info\", \"client:connect() - WS failed, fallback to longpoll\", {\n                                        tags: [\n                                            \"connection\",\n                                            \"client\"\n                                        ]\n                                    });\n                                    this.dispatchEvent({\n                                        type: \"transport.changed\",\n                                        mode: \"longpoll\"\n                                    });\n                                    this.wsConnection._destroyCurrentWSConnection();\n                                    this.wsConnection.disconnect().then(); // close WS so no retry\n                                    this.wsFallback = new WSConnectionFallback({\n                                        client: this\n                                    });\n                                    _context16.next = 28;\n                                    return this.wsFallback.connect();\n                                case 28:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 29:\n                                    throw _context16.t0;\n                                case 30:\n                                case \"end\":\n                                    return _context16.stop();\n                            }\n                        }\n                    }, _callee16, this, [\n                        [\n                            8,\n                            18\n                        ]\n                    ]);\n                }));\n                function connect() {\n                    return _connect.apply(this, arguments);\n                }\n                return connect;\n            }()\n        },\n        {\n            key: \"_sayHi\",\n            value: function _sayHi() {\n                var _this4 = this;\n                var client_request_id = randomId();\n                var opts = {\n                    headers: {\n                        \"x-client-request-id\": client_request_id\n                    }\n                };\n                this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch(function(e) {\n                    if (_this4.options.enableInsights) {\n                        postInsights(\"http_hi_failed\", {\n                            api_key: _this4.key,\n                            err: e,\n                            client_request_id: client_request_id\n                        });\n                    }\n                });\n            }\n        },\n        {\n            key: \"queryUsers\",\n            value: function() {\n                var _queryUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee17(filterConditions) {\n                    var sort, options, defaultOptions, data, _args17 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee17$(_context17) {\n                        while(1){\n                            switch(_context17.prev = _context17.next){\n                                case 0:\n                                    sort = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : [];\n                                    options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                                    defaultOptions = {\n                                        presence: false\n                                    }; // Make sure we wait for the connect promise if there is a pending one\n                                    _context17.next = 5;\n                                    return this.wsPromise;\n                                case 5:\n                                    if (!this._hasConnectionID()) {\n                                        defaultOptions.presence = false;\n                                    } // Return a list of users\n                                    _context17.next = 8;\n                                    return this.get(this.baseURL + \"/users\", {\n                                        payload: _objectSpread(_objectSpread({\n                                            filter_conditions: filterConditions,\n                                            sort: normalizeQuerySort(sort)\n                                        }, defaultOptions), options)\n                                    });\n                                case 8:\n                                    data = _context17.sent;\n                                    this.state.updateUsers(data.users);\n                                    return _context17.abrupt(\"return\", data);\n                                case 11:\n                                case \"end\":\n                                    return _context17.stop();\n                            }\n                        }\n                    }, _callee17, this);\n                }));\n                function queryUsers(_x16) {\n                    return _queryUsers.apply(this, arguments);\n                }\n                return queryUsers;\n            }()\n        },\n        {\n            key: \"queryBannedUsers\",\n            value: function() {\n                var _queryBannedUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee18() {\n                    var filterConditions, sort, options, _args18 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee18$(_context18) {\n                        while(1){\n                            switch(_context18.prev = _context18.next){\n                                case 0:\n                                    filterConditions = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};\n                                    sort = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];\n                                    options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                                    _context18.next = 5;\n                                    return this.get(this.baseURL + \"/query_banned_users\", {\n                                        payload: _objectSpread({\n                                            filter_conditions: filterConditions,\n                                            sort: normalizeQuerySort(sort)\n                                        }, options)\n                                    });\n                                case 5:\n                                    return _context18.abrupt(\"return\", _context18.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context18.stop();\n                            }\n                        }\n                    }, _callee18, this);\n                }));\n                function queryBannedUsers() {\n                    return _queryBannedUsers.apply(this, arguments);\n                }\n                return queryBannedUsers;\n            }()\n        },\n        {\n            key: \"queryMessageFlags\",\n            value: function() {\n                var _queryMessageFlags = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee19() {\n                    var filterConditions, options, _args19 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee19$(_context19) {\n                        while(1){\n                            switch(_context19.prev = _context19.next){\n                                case 0:\n                                    filterConditions = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};\n                                    options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                                    _context19.next = 4;\n                                    return this.get(this.baseURL + \"/moderation/flags/message\", {\n                                        payload: _objectSpread({\n                                            filter_conditions: filterConditions\n                                        }, options)\n                                    });\n                                case 4:\n                                    return _context19.abrupt(\"return\", _context19.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context19.stop();\n                            }\n                        }\n                    }, _callee19, this);\n                }));\n                function queryMessageFlags() {\n                    return _queryMessageFlags.apply(this, arguments);\n                }\n                return queryMessageFlags;\n            }()\n        },\n        {\n            key: \"queryChannels\",\n            value: function() {\n                var _queryChannels = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee20(filterConditions) {\n                    var sort, options, stateOptions, defaultOptions, payload, data, _args20 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee20$(_context20) {\n                        while(1){\n                            switch(_context20.prev = _context20.next){\n                                case 0:\n                                    sort = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : [];\n                                    options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                                    stateOptions = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};\n                                    defaultOptions = {\n                                        state: true,\n                                        watch: true,\n                                        presence: false\n                                    }; // Make sure we wait for the connect promise if there is a pending one\n                                    _context20.next = 6;\n                                    return this.wsPromise;\n                                case 6:\n                                    if (!this._hasConnectionID()) {\n                                        defaultOptions.watch = false;\n                                    } // Return a list of channels\n                                    payload = _objectSpread(_objectSpread({\n                                        filter_conditions: filterConditions,\n                                        sort: normalizeQuerySort(sort)\n                                    }, defaultOptions), options);\n                                    _context20.next = 10;\n                                    return this.post(this.baseURL + \"/channels\", payload);\n                                case 10:\n                                    data = _context20.sent;\n                                    this.dispatchEvent({\n                                        type: \"channels.queried\",\n                                        queriedChannels: {\n                                            channels: data.channels,\n                                            isLatestMessageSet: true\n                                        }\n                                    });\n                                    return _context20.abrupt(\"return\", this.hydrateActiveChannels(data.channels, stateOptions));\n                                case 13:\n                                case \"end\":\n                                    return _context20.stop();\n                            }\n                        }\n                    }, _callee20, this);\n                }));\n                function queryChannels(_x17) {\n                    return _queryChannels.apply(this, arguments);\n                }\n                return queryChannels;\n            }()\n        },\n        {\n            key: \"queryReactions\",\n            value: function() {\n                var _queryReactions = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee21(messageID, filter) {\n                    var sort, options, payload, _args21 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee21$(_context21) {\n                        while(1){\n                            switch(_context21.prev = _context21.next){\n                                case 0:\n                                    sort = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : [];\n                                    options = _args21.length > 3 && _args21[3] !== undefined ? _args21[3] : {};\n                                    _context21.next = 4;\n                                    return this.wsPromise;\n                                case 4:\n                                    // Return a list of channels\n                                    payload = _objectSpread({\n                                        filter: filter,\n                                        sort: normalizeQuerySort(sort)\n                                    }, options);\n                                    _context21.next = 7;\n                                    return this.post(this.baseURL + \"/messages/\" + messageID + \"/reactions\", payload);\n                                case 7:\n                                    return _context21.abrupt(\"return\", _context21.sent);\n                                case 8:\n                                case \"end\":\n                                    return _context21.stop();\n                            }\n                        }\n                    }, _callee21, this);\n                }));\n                function queryReactions(_x18, _x19) {\n                    return _queryReactions.apply(this, arguments);\n                }\n                return queryReactions;\n            }()\n        },\n        {\n            key: \"hydrateActiveChannels\",\n            value: function hydrateActiveChannels() {\n                var channelsFromApi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                var stateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var skipInitialization = stateOptions.skipInitialization, _stateOptions$offline = stateOptions.offlineMode, offlineMode = _stateOptions$offline === void 0 ? false : _stateOptions$offline;\n                var _iterator2 = _createForOfIteratorHelper(channelsFromApi), _step2;\n                try {\n                    for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                        var channelState = _step2.value;\n                        this._addChannelConfig(channelState.channel);\n                    }\n                } catch (err) {\n                    _iterator2.e(err);\n                } finally{\n                    _iterator2.f();\n                }\n                var channels = [];\n                var _iterator3 = _createForOfIteratorHelper(channelsFromApi), _step3;\n                try {\n                    for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                        var _channelState = _step3.value;\n                        var c = this.channel(_channelState.channel.type, _channelState.channel.id);\n                        c.data = _channelState.channel;\n                        c.offlineMode = offlineMode;\n                        c.initialized = !offlineMode;\n                        if (skipInitialization === undefined) {\n                            c._initializeState(_channelState, \"latest\");\n                        } else if (!skipInitialization.includes(_channelState.channel.id)) {\n                            c.state.clearMessages();\n                            c._initializeState(_channelState, \"latest\");\n                        }\n                        channels.push(c);\n                    }\n                } catch (err) {\n                    _iterator3.e(err);\n                } finally{\n                    _iterator3.f();\n                }\n                return channels;\n            }\n        },\n        {\n            key: \"search\",\n            value: function() {\n                var _search = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee22(filterConditions, query) {\n                    var options, payload, _args22 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee22$(_context22) {\n                        while(1){\n                            switch(_context22.prev = _context22.next){\n                                case 0:\n                                    options = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : {};\n                                    if (!(options.offset && options.next)) {\n                                        _context22.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"Cannot specify offset with next\");\n                                case 3:\n                                    payload = _objectSpread(_objectSpread({\n                                        filter_conditions: filterConditions\n                                    }, options), {}, {\n                                        sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                                    });\n                                    if (!(typeof query === \"string\")) {\n                                        _context22.next = 8;\n                                        break;\n                                    }\n                                    payload.query = query;\n                                    _context22.next = 13;\n                                    break;\n                                case 8:\n                                    if (!(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query) === \"object\")) {\n                                        _context22.next = 12;\n                                        break;\n                                    }\n                                    payload.message_filter_conditions = query;\n                                    _context22.next = 13;\n                                    break;\n                                case 12:\n                                    throw Error(\"Invalid type \".concat(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query), \" for query parameter\"));\n                                case 13:\n                                    _context22.next = 15;\n                                    return this.wsPromise;\n                                case 15:\n                                    _context22.next = 17;\n                                    return this.get(this.baseURL + \"/search\", {\n                                        payload: payload\n                                    });\n                                case 17:\n                                    return _context22.abrupt(\"return\", _context22.sent);\n                                case 18:\n                                case \"end\":\n                                    return _context22.stop();\n                            }\n                        }\n                    }, _callee22, this);\n                }));\n                function search(_x20, _x21) {\n                    return _search.apply(this, arguments);\n                }\n                return search;\n            }()\n        },\n        {\n            key: \"setLocalDevice\",\n            value: function setLocalDevice(device) {\n                var _this$wsConnection5, _this$wsConnection6, _this$wsFallback4;\n                if ((_this$wsConnection5 = this.wsConnection) !== null && _this$wsConnection5 !== void 0 && _this$wsConnection5.isConnecting && this.wsPromise || ((_this$wsConnection6 = this.wsConnection) !== null && _this$wsConnection6 !== void 0 && _this$wsConnection6.isHealthy || (_this$wsFallback4 = this.wsFallback) !== null && _this$wsFallback4 !== void 0 && _this$wsFallback4.isHealthy()) && this._hasConnectionID()) {\n                    throw new Error(\"you can only set device before opening a websocket connection\");\n                }\n                this.options.device = device;\n            }\n        },\n        {\n            key: \"addDevice\",\n            value: function() {\n                var _addDevice = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee23(id, push_provider, userID, push_provider_name) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee23$(_context23) {\n                        while(1){\n                            switch(_context23.prev = _context23.next){\n                                case 0:\n                                    _context23.next = 2;\n                                    return this.post(this.baseURL + \"/devices\", _objectSpread(_objectSpread({\n                                        id: id,\n                                        push_provider: push_provider\n                                    }, userID != null ? {\n                                        user_id: userID\n                                    } : {}), push_provider_name != null ? {\n                                        push_provider_name: push_provider_name\n                                    } : {}));\n                                case 2:\n                                    return _context23.abrupt(\"return\", _context23.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context23.stop();\n                            }\n                        }\n                    }, _callee23, this);\n                }));\n                function addDevice(_x22, _x23, _x24, _x25) {\n                    return _addDevice.apply(this, arguments);\n                }\n                return addDevice;\n            }()\n        },\n        {\n            key: \"getDevices\",\n            value: function() {\n                var _getDevices = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee24(userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee24$(_context24) {\n                        while(1){\n                            switch(_context24.prev = _context24.next){\n                                case 0:\n                                    _context24.next = 2;\n                                    return this.get(this.baseURL + \"/devices\", userID ? {\n                                        user_id: userID\n                                    } : {});\n                                case 2:\n                                    return _context24.abrupt(\"return\", _context24.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context24.stop();\n                            }\n                        }\n                    }, _callee24, this);\n                }));\n                function getDevices(_x26) {\n                    return _getDevices.apply(this, arguments);\n                }\n                return getDevices;\n            }()\n        },\n        {\n            key: \"getUnreadCount\",\n            value: function() {\n                var _getUnreadCount = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee25(userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee25$(_context25) {\n                        while(1){\n                            switch(_context25.prev = _context25.next){\n                                case 0:\n                                    _context25.next = 2;\n                                    return this.get(this.baseURL + \"/unread\", userID ? {\n                                        user_id: userID\n                                    } : {});\n                                case 2:\n                                    return _context25.abrupt(\"return\", _context25.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context25.stop();\n                            }\n                        }\n                    }, _callee25, this);\n                }));\n                function getUnreadCount(_x27) {\n                    return _getUnreadCount.apply(this, arguments);\n                }\n                return getUnreadCount;\n            }()\n        },\n        {\n            key: \"getUnreadCountBatch\",\n            value: function() {\n                var _getUnreadCountBatch = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee26(userIDs) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee26$(_context26) {\n                        while(1){\n                            switch(_context26.prev = _context26.next){\n                                case 0:\n                                    _context26.next = 2;\n                                    return this.post(this.baseURL + \"/unread_batch\", {\n                                        user_ids: userIDs\n                                    });\n                                case 2:\n                                    return _context26.abrupt(\"return\", _context26.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context26.stop();\n                            }\n                        }\n                    }, _callee26, this);\n                }));\n                function getUnreadCountBatch(_x28) {\n                    return _getUnreadCountBatch.apply(this, arguments);\n                }\n                return getUnreadCountBatch;\n            }()\n        },\n        {\n            key: \"removeDevice\",\n            value: function() {\n                var _removeDevice = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee27(id, userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee27$(_context27) {\n                        while(1){\n                            switch(_context27.prev = _context27.next){\n                                case 0:\n                                    _context27.next = 2;\n                                    return this.delete(this.baseURL + \"/devices\", _objectSpread({\n                                        id: id\n                                    }, userID ? {\n                                        user_id: userID\n                                    } : {}));\n                                case 2:\n                                    return _context27.abrupt(\"return\", _context27.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context27.stop();\n                            }\n                        }\n                    }, _callee27, this);\n                }));\n                function removeDevice(_x29, _x30) {\n                    return _removeDevice.apply(this, arguments);\n                }\n                return removeDevice;\n            }()\n        },\n        {\n            key: \"getRateLimits\",\n            value: function() {\n                var _getRateLimits = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee28(params) {\n                    var _ref7, serverSide, web, android, ios, endpoints;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee28$(_context28) {\n                        while(1){\n                            switch(_context28.prev = _context28.next){\n                                case 0:\n                                    _ref7 = params || {}, serverSide = _ref7.serverSide, web = _ref7.web, android = _ref7.android, ios = _ref7.ios, endpoints = _ref7.endpoints;\n                                    return _context28.abrupt(\"return\", this.get(this.baseURL + \"/rate_limits\", {\n                                        server_side: serverSide,\n                                        web: web,\n                                        android: android,\n                                        ios: ios,\n                                        endpoints: endpoints ? endpoints.join(\",\") : undefined\n                                    }));\n                                case 2:\n                                case \"end\":\n                                    return _context28.stop();\n                            }\n                        }\n                    }, _callee28, this);\n                }));\n                function getRateLimits(_x31) {\n                    return _getRateLimits.apply(this, arguments);\n                }\n                return getRateLimits;\n            }()\n        },\n        {\n            key: \"_addChannelConfig\",\n            value: function _addChannelConfig(_ref8) {\n                var cid = _ref8.cid, config = _ref8.config;\n                this.configs[cid] = config;\n            }\n        },\n        {\n            key: \"channel\",\n            value: function channel(channelType, channelIDOrCustom) {\n                var _custom$members;\n                var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                if (!this.userID && !this._isUsingServerAuth()) {\n                    throw Error(\"Call connectUser or connectAnonymousUser before creating a channel\");\n                }\n                if (~channelType.indexOf(\":\")) {\n                    throw Error(\"Invalid channel group \".concat(channelType, \", can't contain the : character\"));\n                } // support channel(\"messaging\", {options})\n                if (channelIDOrCustom && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(channelIDOrCustom) === \"object\") {\n                    return this.getChannelByMembers(channelType, channelIDOrCustom);\n                } // // support channel(\"messaging\", undefined, {options})\n                if (!channelIDOrCustom && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(custom) === \"object\" && (_custom$members = custom.members) !== null && _custom$members !== void 0 && _custom$members.length) {\n                    return this.getChannelByMembers(channelType, custom);\n                } // support channel(\"messaging\", null, {options})\n                // support channel(\"messaging\", undefined, {options})\n                // support channel(\"messaging\", \"\", {options})\n                if (!channelIDOrCustom) {\n                    return new Channel(this, channelType, undefined, custom);\n                }\n                return this.getChannelById(channelType, channelIDOrCustom, custom);\n            }\n        },\n        {\n            key: \"partialUpdateUser\",\n            value: /**\n     * partialUpdateUser - Update the given user object\n     *\n     * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n     * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users\n     */ function() {\n                var _partialUpdateUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee29(partialUserObject) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee29$(_context29) {\n                        while(1){\n                            switch(_context29.prev = _context29.next){\n                                case 0:\n                                    _context29.next = 2;\n                                    return this.partialUpdateUsers([\n                                        partialUserObject\n                                    ]);\n                                case 2:\n                                    return _context29.abrupt(\"return\", _context29.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context29.stop();\n                            }\n                        }\n                    }, _callee29, this);\n                }));\n                function partialUpdateUser(_x32) {\n                    return _partialUpdateUser.apply(this, arguments);\n                }\n                return partialUpdateUser;\n            }()\n        },\n        {\n            key: \"upsertUsers\",\n            value: function() {\n                var _upsertUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee30(users) {\n                    var userMap, _iterator4, _step4, userObject;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee30$(_context30) {\n                        while(1){\n                            switch(_context30.prev = _context30.next){\n                                case 0:\n                                    userMap = {};\n                                    _iterator4 = _createForOfIteratorHelper(users);\n                                    _context30.prev = 2;\n                                    _iterator4.s();\n                                case 4:\n                                    if ((_step4 = _iterator4.n()).done) {\n                                        _context30.next = 11;\n                                        break;\n                                    }\n                                    userObject = _step4.value;\n                                    if (userObject.id) {\n                                        _context30.next = 8;\n                                        break;\n                                    }\n                                    throw Error(\"User ID is required when updating a user\");\n                                case 8:\n                                    userMap[userObject.id] = userObject;\n                                case 9:\n                                    _context30.next = 4;\n                                    break;\n                                case 11:\n                                    _context30.next = 16;\n                                    break;\n                                case 13:\n                                    _context30.prev = 13;\n                                    _context30.t0 = _context30[\"catch\"](2);\n                                    _iterator4.e(_context30.t0);\n                                case 16:\n                                    _context30.prev = 16;\n                                    _iterator4.f();\n                                    return _context30.finish(16);\n                                case 19:\n                                    _context30.next = 21;\n                                    return this.post(this.baseURL + \"/users\", {\n                                        users: userMap\n                                    });\n                                case 21:\n                                    return _context30.abrupt(\"return\", _context30.sent);\n                                case 22:\n                                case \"end\":\n                                    return _context30.stop();\n                            }\n                        }\n                    }, _callee30, this, [\n                        [\n                            2,\n                            13,\n                            16,\n                            19\n                        ]\n                    ]);\n                }));\n                function upsertUsers(_x33) {\n                    return _upsertUsers.apply(this, arguments);\n                }\n                return upsertUsers;\n            }()\n        },\n        {\n            key: \"upsertUser\",\n            value: /**\n     * upsertUser - Update or Create the given user object\n     *\n     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */ function upsertUser(userObject) {\n                return this.upsertUsers([\n                    userObject\n                ]);\n            }\n        },\n        {\n            key: \"partialUpdateUsers\",\n            value: /**\n     * partialUpdateUsers - Batch partial update of users\n     *\n     * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */ function() {\n                var _partialUpdateUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee31(users) {\n                    var _iterator5, _step5, userObject;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee31$(_context31) {\n                        while(1){\n                            switch(_context31.prev = _context31.next){\n                                case 0:\n                                    _iterator5 = _createForOfIteratorHelper(users);\n                                    _context31.prev = 1;\n                                    _iterator5.s();\n                                case 3:\n                                    if ((_step5 = _iterator5.n()).done) {\n                                        _context31.next = 9;\n                                        break;\n                                    }\n                                    userObject = _step5.value;\n                                    if (userObject.id) {\n                                        _context31.next = 7;\n                                        break;\n                                    }\n                                    throw Error(\"User ID is required when updating a user\");\n                                case 7:\n                                    _context31.next = 3;\n                                    break;\n                                case 9:\n                                    _context31.next = 14;\n                                    break;\n                                case 11:\n                                    _context31.prev = 11;\n                                    _context31.t0 = _context31[\"catch\"](1);\n                                    _iterator5.e(_context31.t0);\n                                case 14:\n                                    _context31.prev = 14;\n                                    _iterator5.f();\n                                    return _context31.finish(14);\n                                case 17:\n                                    _context31.next = 19;\n                                    return this.patch(this.baseURL + \"/users\", {\n                                        users: users\n                                    });\n                                case 19:\n                                    return _context31.abrupt(\"return\", _context31.sent);\n                                case 20:\n                                case \"end\":\n                                    return _context31.stop();\n                            }\n                        }\n                    }, _callee31, this, [\n                        [\n                            1,\n                            11,\n                            14,\n                            17\n                        ]\n                    ]);\n                }));\n                function partialUpdateUsers(_x34) {\n                    return _partialUpdateUsers.apply(this, arguments);\n                }\n                return partialUpdateUsers;\n            }()\n        },\n        {\n            key: \"deleteUser\",\n            value: function() {\n                var _deleteUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee32(userID, params) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee32$(_context32) {\n                        while(1){\n                            switch(_context32.prev = _context32.next){\n                                case 0:\n                                    _context32.next = 2;\n                                    return this.delete(this.baseURL + \"/users/\".concat(userID), params);\n                                case 2:\n                                    return _context32.abrupt(\"return\", _context32.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context32.stop();\n                            }\n                        }\n                    }, _callee32, this);\n                }));\n                function deleteUser(_x35, _x36) {\n                    return _deleteUser.apply(this, arguments);\n                }\n                return deleteUser;\n            }()\n        },\n        {\n            key: \"restoreUsers\",\n            value: function() {\n                var _restoreUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee33(user_ids) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee33$(_context33) {\n                        while(1){\n                            switch(_context33.prev = _context33.next){\n                                case 0:\n                                    _context33.next = 2;\n                                    return this.post(this.baseURL + \"/users/restore\", {\n                                        user_ids: user_ids\n                                    });\n                                case 2:\n                                    return _context33.abrupt(\"return\", _context33.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context33.stop();\n                            }\n                        }\n                    }, _callee33, this);\n                }));\n                function restoreUsers(_x37) {\n                    return _restoreUsers.apply(this, arguments);\n                }\n                return restoreUsers;\n            }()\n        },\n        {\n            key: \"reactivateUser\",\n            value: function() {\n                var _reactivateUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee34(userID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee34$(_context34) {\n                        while(1){\n                            switch(_context34.prev = _context34.next){\n                                case 0:\n                                    _context34.next = 2;\n                                    return this.post(this.baseURL + \"/users/\".concat(userID, \"/reactivate\"), _objectSpread({}, options));\n                                case 2:\n                                    return _context34.abrupt(\"return\", _context34.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context34.stop();\n                            }\n                        }\n                    }, _callee34, this);\n                }));\n                function reactivateUser(_x38, _x39) {\n                    return _reactivateUser.apply(this, arguments);\n                }\n                return reactivateUser;\n            }()\n        },\n        {\n            key: \"reactivateUsers\",\n            value: function() {\n                var _reactivateUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee35(user_ids, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee35$(_context35) {\n                        while(1){\n                            switch(_context35.prev = _context35.next){\n                                case 0:\n                                    _context35.next = 2;\n                                    return this.post(this.baseURL + \"/users/reactivate\", _objectSpread({\n                                        user_ids: user_ids\n                                    }, options));\n                                case 2:\n                                    return _context35.abrupt(\"return\", _context35.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context35.stop();\n                            }\n                        }\n                    }, _callee35, this);\n                }));\n                function reactivateUsers(_x40, _x41) {\n                    return _reactivateUsers.apply(this, arguments);\n                }\n                return reactivateUsers;\n            }()\n        },\n        {\n            key: \"deactivateUser\",\n            value: function() {\n                var _deactivateUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee36(userID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee36$(_context36) {\n                        while(1){\n                            switch(_context36.prev = _context36.next){\n                                case 0:\n                                    _context36.next = 2;\n                                    return this.post(this.baseURL + \"/users/\".concat(userID, \"/deactivate\"), _objectSpread({}, options));\n                                case 2:\n                                    return _context36.abrupt(\"return\", _context36.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context36.stop();\n                            }\n                        }\n                    }, _callee36, this);\n                }));\n                function deactivateUser(_x42, _x43) {\n                    return _deactivateUser.apply(this, arguments);\n                }\n                return deactivateUser;\n            }()\n        },\n        {\n            key: \"deactivateUsers\",\n            value: function() {\n                var _deactivateUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee37(user_ids, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee37$(_context37) {\n                        while(1){\n                            switch(_context37.prev = _context37.next){\n                                case 0:\n                                    _context37.next = 2;\n                                    return this.post(this.baseURL + \"/users/deactivate\", _objectSpread({\n                                        user_ids: user_ids\n                                    }, options));\n                                case 2:\n                                    return _context37.abrupt(\"return\", _context37.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context37.stop();\n                            }\n                        }\n                    }, _callee37, this);\n                }));\n                function deactivateUsers(_x44, _x45) {\n                    return _deactivateUsers.apply(this, arguments);\n                }\n                return deactivateUsers;\n            }()\n        },\n        {\n            key: \"exportUser\",\n            value: function() {\n                var _exportUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee38(userID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee38$(_context38) {\n                        while(1){\n                            switch(_context38.prev = _context38.next){\n                                case 0:\n                                    _context38.next = 2;\n                                    return this.get(this.baseURL + \"/users/\".concat(userID, \"/export\"), _objectSpread({}, options));\n                                case 2:\n                                    return _context38.abrupt(\"return\", _context38.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context38.stop();\n                            }\n                        }\n                    }, _callee38, this);\n                }));\n                function exportUser(_x46, _x47) {\n                    return _exportUser.apply(this, arguments);\n                }\n                return exportUser;\n            }()\n        },\n        {\n            key: \"banUser\",\n            value: function() {\n                var _banUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee39(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee39$(_context39) {\n                        while(1){\n                            switch(_context39.prev = _context39.next){\n                                case 0:\n                                    _context39.next = 2;\n                                    return this.post(this.baseURL + \"/moderation/ban\", _objectSpread({\n                                        target_user_id: targetUserID\n                                    }, options));\n                                case 2:\n                                    return _context39.abrupt(\"return\", _context39.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context39.stop();\n                            }\n                        }\n                    }, _callee39, this);\n                }));\n                function banUser(_x48, _x49) {\n                    return _banUser.apply(this, arguments);\n                }\n                return banUser;\n            }()\n        },\n        {\n            key: \"unbanUser\",\n            value: function() {\n                var _unbanUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee40(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee40$(_context40) {\n                        while(1){\n                            switch(_context40.prev = _context40.next){\n                                case 0:\n                                    _context40.next = 2;\n                                    return this.delete(this.baseURL + \"/moderation/ban\", _objectSpread({\n                                        target_user_id: targetUserID\n                                    }, options));\n                                case 2:\n                                    return _context40.abrupt(\"return\", _context40.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context40.stop();\n                            }\n                        }\n                    }, _callee40, this);\n                }));\n                function unbanUser(_x50, _x51) {\n                    return _unbanUser.apply(this, arguments);\n                }\n                return unbanUser;\n            }()\n        },\n        {\n            key: \"shadowBan\",\n            value: function() {\n                var _shadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee41(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee41$(_context41) {\n                        while(1){\n                            switch(_context41.prev = _context41.next){\n                                case 0:\n                                    _context41.next = 2;\n                                    return this.banUser(targetUserID, _objectSpread({\n                                        shadow: true\n                                    }, options));\n                                case 2:\n                                    return _context41.abrupt(\"return\", _context41.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context41.stop();\n                            }\n                        }\n                    }, _callee41, this);\n                }));\n                function shadowBan(_x52, _x53) {\n                    return _shadowBan.apply(this, arguments);\n                }\n                return shadowBan;\n            }()\n        },\n        {\n            key: \"removeShadowBan\",\n            value: function() {\n                var _removeShadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee42(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee42$(_context42) {\n                        while(1){\n                            switch(_context42.prev = _context42.next){\n                                case 0:\n                                    _context42.next = 2;\n                                    return this.unbanUser(targetUserID, _objectSpread({\n                                        shadow: true\n                                    }, options));\n                                case 2:\n                                    return _context42.abrupt(\"return\", _context42.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context42.stop();\n                            }\n                        }\n                    }, _callee42, this);\n                }));\n                function removeShadowBan(_x54, _x55) {\n                    return _removeShadowBan.apply(this, arguments);\n                }\n                return removeShadowBan;\n            }()\n        },\n        {\n            key: \"blockUser\",\n            value: function() {\n                var _blockUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee43(blockedUserID, user_id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee43$(_context43) {\n                        while(1){\n                            switch(_context43.prev = _context43.next){\n                                case 0:\n                                    _context43.next = 2;\n                                    return this.post(this.baseURL + \"/users/block\", _objectSpread({\n                                        blocked_user_id: blockedUserID\n                                    }, user_id ? {\n                                        user_id: user_id\n                                    } : {}));\n                                case 2:\n                                    return _context43.abrupt(\"return\", _context43.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context43.stop();\n                            }\n                        }\n                    }, _callee43, this);\n                }));\n                function blockUser(_x56, _x57) {\n                    return _blockUser.apply(this, arguments);\n                }\n                return blockUser;\n            }()\n        },\n        {\n            key: \"getBlockedUsers\",\n            value: function() {\n                var _getBlockedUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee44(user_id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee44$(_context44) {\n                        while(1){\n                            switch(_context44.prev = _context44.next){\n                                case 0:\n                                    _context44.next = 2;\n                                    return this.get(this.baseURL + \"/users/block\", _objectSpread({}, user_id ? {\n                                        user_id: user_id\n                                    } : {}));\n                                case 2:\n                                    return _context44.abrupt(\"return\", _context44.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context44.stop();\n                            }\n                        }\n                    }, _callee44, this);\n                }));\n                function getBlockedUsers(_x58) {\n                    return _getBlockedUsers.apply(this, arguments);\n                }\n                return getBlockedUsers;\n            }()\n        },\n        {\n            key: \"unBlockUser\",\n            value: function() {\n                var _unBlockUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee45(blockedUserID, userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee45$(_context45) {\n                        while(1){\n                            switch(_context45.prev = _context45.next){\n                                case 0:\n                                    _context45.next = 2;\n                                    return this.post(this.baseURL + \"/users/unblock\", _objectSpread({\n                                        blocked_user_id: blockedUserID\n                                    }, userID ? {\n                                        user_id: userID\n                                    } : {}));\n                                case 2:\n                                    return _context45.abrupt(\"return\", _context45.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context45.stop();\n                            }\n                        }\n                    }, _callee45, this);\n                }));\n                function unBlockUser(_x59, _x60) {\n                    return _unBlockUser.apply(this, arguments);\n                }\n                return unBlockUser;\n            }()\n        },\n        {\n            key: \"muteUser\",\n            value: function() {\n                var _muteUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee46(targetID, userID) {\n                    var options, _args46 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee46$(_context46) {\n                        while(1){\n                            switch(_context46.prev = _context46.next){\n                                case 0:\n                                    options = _args46.length > 2 && _args46[2] !== undefined ? _args46[2] : {};\n                                    _context46.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/mute\", _objectSpread(_objectSpread({\n                                        target_id: targetID\n                                    }, userID ? {\n                                        user_id: userID\n                                    } : {}), options));\n                                case 3:\n                                    return _context46.abrupt(\"return\", _context46.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context46.stop();\n                            }\n                        }\n                    }, _callee46, this);\n                }));\n                function muteUser(_x61, _x62) {\n                    return _muteUser.apply(this, arguments);\n                }\n                return muteUser;\n            }()\n        },\n        {\n            key: \"unmuteUser\",\n            value: function() {\n                var _unmuteUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee47(targetID, currentUserID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee47$(_context47) {\n                        while(1){\n                            switch(_context47.prev = _context47.next){\n                                case 0:\n                                    _context47.next = 2;\n                                    return this.post(this.baseURL + \"/moderation/unmute\", _objectSpread({\n                                        target_id: targetID\n                                    }, currentUserID ? {\n                                        user_id: currentUserID\n                                    } : {}));\n                                case 2:\n                                    return _context47.abrupt(\"return\", _context47.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context47.stop();\n                            }\n                        }\n                    }, _callee47, this);\n                }));\n                function unmuteUser(_x63, _x64) {\n                    return _unmuteUser.apply(this, arguments);\n                }\n                return unmuteUser;\n            }()\n        },\n        {\n            key: \"userMuteStatus\",\n            value: function userMuteStatus(targetID) {\n                if (!this.user || !this.wsPromise) {\n                    throw new Error(\"Make sure to await connectUser() first.\");\n                }\n                for(var i = 0; i < this.mutedUsers.length; i += 1){\n                    if (this.mutedUsers[i].target.id === targetID) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"flagMessage\",\n            value: function() {\n                var _flagMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee48(targetMessageID) {\n                    var options, _args48 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee48$(_context48) {\n                        while(1){\n                            switch(_context48.prev = _context48.next){\n                                case 0:\n                                    options = _args48.length > 1 && _args48[1] !== undefined ? _args48[1] : {};\n                                    _context48.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/flag\", _objectSpread({\n                                        target_message_id: targetMessageID\n                                    }, options));\n                                case 3:\n                                    return _context48.abrupt(\"return\", _context48.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context48.stop();\n                            }\n                        }\n                    }, _callee48, this);\n                }));\n                function flagMessage(_x65) {\n                    return _flagMessage.apply(this, arguments);\n                }\n                return flagMessage;\n            }()\n        },\n        {\n            key: \"flagUser\",\n            value: function() {\n                var _flagUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee49(targetID) {\n                    var options, _args49 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee49$(_context49) {\n                        while(1){\n                            switch(_context49.prev = _context49.next){\n                                case 0:\n                                    options = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};\n                                    _context49.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/flag\", _objectSpread({\n                                        target_user_id: targetID\n                                    }, options));\n                                case 3:\n                                    return _context49.abrupt(\"return\", _context49.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context49.stop();\n                            }\n                        }\n                    }, _callee49, this);\n                }));\n                function flagUser(_x66) {\n                    return _flagUser.apply(this, arguments);\n                }\n                return flagUser;\n            }()\n        },\n        {\n            key: \"unflagMessage\",\n            value: function() {\n                var _unflagMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee50(targetMessageID) {\n                    var options, _args50 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee50$(_context50) {\n                        while(1){\n                            switch(_context50.prev = _context50.next){\n                                case 0:\n                                    options = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};\n                                    _context50.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/unflag\", _objectSpread({\n                                        target_message_id: targetMessageID\n                                    }, options));\n                                case 3:\n                                    return _context50.abrupt(\"return\", _context50.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context50.stop();\n                            }\n                        }\n                    }, _callee50, this);\n                }));\n                function unflagMessage(_x67) {\n                    return _unflagMessage.apply(this, arguments);\n                }\n                return unflagMessage;\n            }()\n        },\n        {\n            key: \"unflagUser\",\n            value: function() {\n                var _unflagUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee51(targetID) {\n                    var options, _args51 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee51$(_context51) {\n                        while(1){\n                            switch(_context51.prev = _context51.next){\n                                case 0:\n                                    options = _args51.length > 1 && _args51[1] !== undefined ? _args51[1] : {};\n                                    _context51.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/unflag\", _objectSpread({\n                                        target_user_id: targetID\n                                    }, options));\n                                case 3:\n                                    return _context51.abrupt(\"return\", _context51.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context51.stop();\n                            }\n                        }\n                    }, _callee51, this);\n                }));\n                function unflagUser(_x68) {\n                    return _unflagUser.apply(this, arguments);\n                }\n                return unflagUser;\n            }()\n        },\n        {\n            key: \"getCallToken\",\n            value: function() {\n                var _getCallToken = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee52(callID) {\n                    var options, _args52 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee52$(_context52) {\n                        while(1){\n                            switch(_context52.prev = _context52.next){\n                                case 0:\n                                    options = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};\n                                    _context52.next = 3;\n                                    return this.post(this.baseURL + \"/calls/\".concat(callID), _objectSpread({}, options));\n                                case 3:\n                                    return _context52.abrupt(\"return\", _context52.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context52.stop();\n                            }\n                        }\n                    }, _callee52, this);\n                }));\n                function getCallToken(_x69) {\n                    return _getCallToken.apply(this, arguments);\n                }\n                return getCallToken;\n            }()\n        },\n        {\n            key: \"_queryFlags\",\n            value: function() {\n                var _queryFlags2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee53() {\n                    var filterConditions, options, _args53 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee53$(_context53) {\n                        while(1){\n                            switch(_context53.prev = _context53.next){\n                                case 0:\n                                    filterConditions = _args53.length > 0 && _args53[0] !== undefined ? _args53[0] : {};\n                                    options = _args53.length > 1 && _args53[1] !== undefined ? _args53[1] : {};\n                                    _context53.next = 4;\n                                    return this.post(this.baseURL + \"/moderation/flags\", _objectSpread({\n                                        filter_conditions: filterConditions\n                                    }, options));\n                                case 4:\n                                    return _context53.abrupt(\"return\", _context53.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context53.stop();\n                            }\n                        }\n                    }, _callee53, this);\n                }));\n                function _queryFlags() {\n                    return _queryFlags2.apply(this, arguments);\n                }\n                return _queryFlags;\n            }()\n        },\n        {\n            key: \"_queryFlagReports\",\n            value: function() {\n                var _queryFlagReports2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee54() {\n                    var filterConditions, options, _args54 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee54$(_context54) {\n                        while(1){\n                            switch(_context54.prev = _context54.next){\n                                case 0:\n                                    filterConditions = _args54.length > 0 && _args54[0] !== undefined ? _args54[0] : {};\n                                    options = _args54.length > 1 && _args54[1] !== undefined ? _args54[1] : {};\n                                    _context54.next = 4;\n                                    return this.post(this.baseURL + \"/moderation/reports\", _objectSpread({\n                                        filter_conditions: filterConditions\n                                    }, options));\n                                case 4:\n                                    return _context54.abrupt(\"return\", _context54.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context54.stop();\n                            }\n                        }\n                    }, _callee54, this);\n                }));\n                function _queryFlagReports() {\n                    return _queryFlagReports2.apply(this, arguments);\n                }\n                return _queryFlagReports;\n            }()\n        },\n        {\n            key: \"_reviewFlagReport\",\n            value: function() {\n                var _reviewFlagReport2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee55(id, reviewResult) {\n                    var options, _args55 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee55$(_context55) {\n                        while(1){\n                            switch(_context55.prev = _context55.next){\n                                case 0:\n                                    options = _args55.length > 2 && _args55[2] !== undefined ? _args55[2] : {};\n                                    _context55.next = 3;\n                                    return this.patch(this.baseURL + \"/moderation/reports/\".concat(id), _objectSpread({\n                                        review_result: reviewResult\n                                    }, options));\n                                case 3:\n                                    return _context55.abrupt(\"return\", _context55.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context55.stop();\n                            }\n                        }\n                    }, _callee55, this);\n                }));\n                function _reviewFlagReport(_x70, _x71) {\n                    return _reviewFlagReport2.apply(this, arguments);\n                }\n                return _reviewFlagReport;\n            }()\n        },\n        {\n            key: \"unblockMessage\",\n            value: function() {\n                var _unblockMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee56(targetMessageID) {\n                    var options, _args56 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee56$(_context56) {\n                        while(1){\n                            switch(_context56.prev = _context56.next){\n                                case 0:\n                                    options = _args56.length > 1 && _args56[1] !== undefined ? _args56[1] : {};\n                                    _context56.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/unblock_message\", _objectSpread({\n                                        target_message_id: targetMessageID\n                                    }, options));\n                                case 3:\n                                    return _context56.abrupt(\"return\", _context56.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context56.stop();\n                            }\n                        }\n                    }, _callee56, this);\n                }));\n                function unblockMessage(_x72) {\n                    return _unblockMessage.apply(this, arguments);\n                }\n                return unblockMessage;\n            }() // alias for backwards compatibility\n        },\n        {\n            key: \"markChannelsRead\",\n            value: /**\n     * markChannelsRead - marks channels read -\n     * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n     *\n     * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]\n     *\n     * @return {Promise<APIResponse>}\n     */ function() {\n                var _markChannelsRead = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee57() {\n                    var data, _args57 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee57$(_context57) {\n                        while(1){\n                            switch(_context57.prev = _context57.next){\n                                case 0:\n                                    data = _args57.length > 0 && _args57[0] !== undefined ? _args57[0] : {};\n                                    _context57.next = 3;\n                                    return this.post(this.baseURL + \"/channels/read\", _objectSpread({}, data));\n                                case 3:\n                                case \"end\":\n                                    return _context57.stop();\n                            }\n                        }\n                    }, _callee57, this);\n                }));\n                function markChannelsRead() {\n                    return _markChannelsRead.apply(this, arguments);\n                }\n                return markChannelsRead;\n            }()\n        },\n        {\n            key: \"createCommand\",\n            value: function createCommand(data) {\n                return this.post(this.baseURL + \"/commands\", data);\n            }\n        },\n        {\n            key: \"getCommand\",\n            value: function getCommand(name) {\n                return this.get(this.baseURL + \"/commands/\".concat(name));\n            }\n        },\n        {\n            key: \"updateCommand\",\n            value: function updateCommand(name, data) {\n                return this.put(this.baseURL + \"/commands/\".concat(name), data);\n            }\n        },\n        {\n            key: \"deleteCommand\",\n            value: function deleteCommand(name) {\n                return this.delete(this.baseURL + \"/commands/\".concat(name));\n            }\n        },\n        {\n            key: \"listCommands\",\n            value: function listCommands() {\n                return this.get(this.baseURL + \"/commands\");\n            }\n        },\n        {\n            key: \"createChannelType\",\n            value: function createChannelType(data) {\n                var channelData = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({}, {\n                    commands: [\n                        \"all\"\n                    ]\n                }, data);\n                return this.post(this.baseURL + \"/channeltypes\", channelData);\n            }\n        },\n        {\n            key: \"getChannelType\",\n            value: function getChannelType(channelType) {\n                return this.get(this.baseURL + \"/channeltypes/\".concat(channelType));\n            }\n        },\n        {\n            key: \"updateChannelType\",\n            value: function updateChannelType(channelType, data) {\n                return this.put(this.baseURL + \"/channeltypes/\".concat(channelType), data);\n            }\n        },\n        {\n            key: \"deleteChannelType\",\n            value: function deleteChannelType(channelType) {\n                return this.delete(this.baseURL + \"/channeltypes/\".concat(channelType));\n            }\n        },\n        {\n            key: \"listChannelTypes\",\n            value: function listChannelTypes() {\n                return this.get(this.baseURL + \"/channeltypes\");\n            }\n        },\n        {\n            key: \"translateMessage\",\n            value: function() {\n                var _translateMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee58(messageId, language) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee58$(_context58) {\n                        while(1){\n                            switch(_context58.prev = _context58.next){\n                                case 0:\n                                    _context58.next = 2;\n                                    return this.post(this.baseURL + \"/messages/\".concat(messageId, \"/translate\"), {\n                                        language: language\n                                    });\n                                case 2:\n                                    return _context58.abrupt(\"return\", _context58.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context58.stop();\n                            }\n                        }\n                    }, _callee58, this);\n                }));\n                function translateMessage(_x73, _x74) {\n                    return _translateMessage.apply(this, arguments);\n                }\n                return translateMessage;\n            }()\n        },\n        {\n            key: \"_normalizeExpiration\",\n            value: function _normalizeExpiration(timeoutOrExpirationDate) {\n                var pinExpires = null;\n                if (typeof timeoutOrExpirationDate === \"number\") {\n                    var now = new Date();\n                    now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n                    pinExpires = now.toISOString();\n                } else if (isString(timeoutOrExpirationDate)) {\n                    pinExpires = timeoutOrExpirationDate;\n                } else if (timeoutOrExpirationDate instanceof Date) {\n                    pinExpires = timeoutOrExpirationDate.toISOString();\n                }\n                return pinExpires;\n            }\n        },\n        {\n            key: \"_validateAndGetMessageId\",\n            value: function _validateAndGetMessageId(messageOrMessageId, errorText) {\n                var messageId;\n                if (typeof messageOrMessageId === \"string\") {\n                    messageId = messageOrMessageId;\n                } else {\n                    if (!messageOrMessageId.id) {\n                        throw Error(errorText);\n                    }\n                    messageId = messageOrMessageId.id;\n                }\n                return messageId;\n            }\n        },\n        {\n            key: \"pinMessage\",\n            value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {\n                var messageId = this._validateAndGetMessageId(messageOrMessageId, \"Please specify the message id when calling unpinMessage\");\n                return this.partialUpdateMessage(messageId, {\n                    set: {\n                        pinned: true,\n                        pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n                        pinned_at: this._normalizeExpiration(pinnedAt)\n                    }\n                }, pinnedBy);\n            }\n        },\n        {\n            key: \"unpinMessage\",\n            value: function unpinMessage(messageOrMessageId, userId) {\n                var messageId = this._validateAndGetMessageId(messageOrMessageId, \"Please specify the message id when calling unpinMessage\");\n                return this.partialUpdateMessage(messageId, {\n                    set: {\n                        pinned: false\n                    }\n                }, userId);\n            }\n        },\n        {\n            key: \"updateMessage\",\n            value: function() {\n                var _updateMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee59(message, userId, options) {\n                    var clonedMessage, reservedMessageFields;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee59$(_context59) {\n                        while(1){\n                            switch(_context59.prev = _context59.next){\n                                case 0:\n                                    if (message.id) {\n                                        _context59.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling updateMessage\");\n                                case 2:\n                                    clonedMessage = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({}, message);\n                                    delete clonedMessage.id;\n                                    reservedMessageFields = [\n                                        \"command\",\n                                        \"created_at\",\n                                        \"html\",\n                                        \"latest_reactions\",\n                                        \"own_reactions\",\n                                        \"quoted_message\",\n                                        \"reaction_counts\",\n                                        \"reply_count\",\n                                        \"type\",\n                                        \"updated_at\",\n                                        \"user\",\n                                        \"__html\"\n                                    ];\n                                    reservedMessageFields.forEach(function(item) {\n                                        if (clonedMessage[item] != null) {\n                                            delete clonedMessage[item];\n                                        }\n                                    });\n                                    if (userId != null) {\n                                        if (isString(userId)) {\n                                            clonedMessage.user_id = userId;\n                                        } else {\n                                            clonedMessage.user = {\n                                                id: userId.id\n                                            };\n                                        }\n                                    }\n                                    /**\n                 * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n                 * SDK missed this conversion.\n                 */ if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n                                        clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function(mu) {\n                                            return mu.id;\n                                        });\n                                    }\n                                    _context59.next = 10;\n                                    return this.post(this.baseURL + \"/messages/\".concat(message.id), _objectSpread({\n                                        message: clonedMessage\n                                    }, options));\n                                case 10:\n                                    return _context59.abrupt(\"return\", _context59.sent);\n                                case 11:\n                                case \"end\":\n                                    return _context59.stop();\n                            }\n                        }\n                    }, _callee59, this);\n                }));\n                function updateMessage(_x75, _x76, _x77) {\n                    return _updateMessage.apply(this, arguments);\n                }\n                return updateMessage;\n            }()\n        },\n        {\n            key: \"partialUpdateMessage\",\n            value: function() {\n                var _partialUpdateMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee60(id, partialMessageObject, userId, options) {\n                    var user;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee60$(_context60) {\n                        while(1){\n                            switch(_context60.prev = _context60.next){\n                                case 0:\n                                    if (id) {\n                                        _context60.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling partialUpdateMessage\");\n                                case 2:\n                                    user = userId;\n                                    if (userId != null && isString(userId)) {\n                                        user = {\n                                            id: userId\n                                        };\n                                    }\n                                    _context60.next = 6;\n                                    return this.put(this.baseURL + \"/messages/\".concat(id), _objectSpread(_objectSpread(_objectSpread({}, partialMessageObject), options), {}, {\n                                        user: user\n                                    }));\n                                case 6:\n                                    return _context60.abrupt(\"return\", _context60.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context60.stop();\n                            }\n                        }\n                    }, _callee60, this);\n                }));\n                function partialUpdateMessage(_x78, _x79, _x80, _x81) {\n                    return _partialUpdateMessage.apply(this, arguments);\n                }\n                return partialUpdateMessage;\n            }()\n        },\n        {\n            key: \"deleteMessage\",\n            value: function() {\n                var _deleteMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee61(messageID, hardDelete) {\n                    var params;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee61$(_context61) {\n                        while(1){\n                            switch(_context61.prev = _context61.next){\n                                case 0:\n                                    params = {};\n                                    if (hardDelete) {\n                                        params = {\n                                            hard: true\n                                        };\n                                    }\n                                    _context61.next = 4;\n                                    return this.delete(this.baseURL + \"/messages/\".concat(messageID), params);\n                                case 4:\n                                    return _context61.abrupt(\"return\", _context61.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context61.stop();\n                            }\n                        }\n                    }, _callee61, this);\n                }));\n                function deleteMessage(_x82, _x83) {\n                    return _deleteMessage.apply(this, arguments);\n                }\n                return deleteMessage;\n            }()\n        },\n        {\n            key: \"undeleteMessage\",\n            value: function() {\n                var _undeleteMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee62(messageID, userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee62$(_context62) {\n                        while(1){\n                            switch(_context62.prev = _context62.next){\n                                case 0:\n                                    _context62.next = 2;\n                                    return this.post(this.baseURL + \"/messages/\".concat(messageID, \"/undelete\"), {\n                                        undeleted_by: userID\n                                    });\n                                case 2:\n                                    return _context62.abrupt(\"return\", _context62.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context62.stop();\n                            }\n                        }\n                    }, _callee62, this);\n                }));\n                function undeleteMessage(_x84, _x85) {\n                    return _undeleteMessage.apply(this, arguments);\n                }\n                return undeleteMessage;\n            }()\n        },\n        {\n            key: \"getMessage\",\n            value: function() {\n                var _getMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee63(messageID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee63$(_context63) {\n                        while(1){\n                            switch(_context63.prev = _context63.next){\n                                case 0:\n                                    _context63.next = 2;\n                                    return this.get(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageID)), _objectSpread({}, options));\n                                case 2:\n                                    return _context63.abrupt(\"return\", _context63.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context63.stop();\n                            }\n                        }\n                    }, _callee63, this);\n                }));\n                function getMessage(_x86, _x87) {\n                    return _getMessage.apply(this, arguments);\n                }\n                return getMessage;\n            }()\n        },\n        {\n            key: \"queryThreads\",\n            value: function() {\n                var _queryThreads = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee64(options) {\n                    var _this5 = this;\n                    var opts, res;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee64$(_context64) {\n                        while(1){\n                            switch(_context64.prev = _context64.next){\n                                case 0:\n                                    opts = _objectSpread({\n                                        limit: 10,\n                                        participant_limit: 10,\n                                        reply_limit: 3,\n                                        watch: true\n                                    }, options);\n                                    _context64.next = 3;\n                                    return this.post(this.baseURL + \"/threads\", opts);\n                                case 3:\n                                    res = _context64.sent;\n                                    return _context64.abrupt(\"return\", {\n                                        threads: res.threads.map(function(thread) {\n                                            return new Thread(_this5, thread);\n                                        }),\n                                        next: res.next\n                                    });\n                                case 5:\n                                case \"end\":\n                                    return _context64.stop();\n                            }\n                        }\n                    }, _callee64, this);\n                }));\n                function queryThreads(_x88) {\n                    return _queryThreads.apply(this, arguments);\n                }\n                return queryThreads;\n            }()\n        },\n        {\n            key: \"getThread\",\n            value: function() {\n                var _getThread = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee65(messageId) {\n                    var options, opts, res, _args65 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee65$(_context65) {\n                        while(1){\n                            switch(_context65.prev = _context65.next){\n                                case 0:\n                                    options = _args65.length > 1 && _args65[1] !== undefined ? _args65[1] : {};\n                                    if (messageId) {\n                                        _context65.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling partialUpdateThread\");\n                                case 3:\n                                    opts = _objectSpread({\n                                        participant_limit: 100,\n                                        reply_limit: 3,\n                                        watch: true\n                                    }, options);\n                                    _context65.next = 6;\n                                    return this.get(this.baseURL + \"/threads/\".concat(messageId), opts);\n                                case 6:\n                                    res = _context65.sent;\n                                    return _context65.abrupt(\"return\", new Thread(this, res.thread));\n                                case 8:\n                                case \"end\":\n                                    return _context65.stop();\n                            }\n                        }\n                    }, _callee65, this);\n                }));\n                function getThread(_x89) {\n                    return _getThread.apply(this, arguments);\n                }\n                return getThread;\n            }()\n        },\n        {\n            key: \"partialUpdateThread\",\n            value: function() {\n                var _partialUpdateThread = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee66(messageId, partialThreadObject) {\n                    var reservedThreadFields, _key5;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee66$(_context66) {\n                        while(1){\n                            switch(_context66.prev = _context66.next){\n                                case 0:\n                                    if (messageId) {\n                                        _context66.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling partialUpdateThread\");\n                                case 2:\n                                    // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.\n                                    // Throw error if any of the reserved field is found.\n                                    reservedThreadFields = [\n                                        \"created_at\",\n                                        \"id\",\n                                        \"last_message_at\",\n                                        \"type\",\n                                        \"updated_at\",\n                                        \"user\",\n                                        \"reply_count\",\n                                        \"participants\",\n                                        \"channel\"\n                                    ];\n                                    _context66.t0 = _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().keys(_objectSpread(_objectSpread({}, partialThreadObject.set), partialThreadObject.unset));\n                                case 4:\n                                    if ((_context66.t1 = _context66.t0()).done) {\n                                        _context66.next = 10;\n                                        break;\n                                    }\n                                    _key5 = _context66.t1.value;\n                                    if (!reservedThreadFields.includes(_key5)) {\n                                        _context66.next = 8;\n                                        break;\n                                    }\n                                    throw Error(\"You cannot set \".concat(_key5, \" field on Thread object. \").concat(_key5, \" is reserved for server-side use. Please omit \").concat(_key5, \" from your set object.\"));\n                                case 8:\n                                    _context66.next = 4;\n                                    break;\n                                case 10:\n                                    _context66.next = 12;\n                                    return this.patch(this.baseURL + \"/threads/\".concat(messageId), partialThreadObject);\n                                case 12:\n                                    return _context66.abrupt(\"return\", _context66.sent);\n                                case 13:\n                                case \"end\":\n                                    return _context66.stop();\n                            }\n                        }\n                    }, _callee66, this);\n                }));\n                function partialUpdateThread(_x90, _x91) {\n                    return _partialUpdateThread.apply(this, arguments);\n                }\n                return partialUpdateThread;\n            }()\n        },\n        {\n            key: \"getUserAgent\",\n            value: function getUserAgent() {\n                return this.userAgent || \"stream-chat-javascript-client-\".concat(this.node ? \"node\" : \"browser\", \"-\", \"8.37.0\");\n            }\n        },\n        {\n            key: \"setUserAgent\",\n            value: function setUserAgent(userAgent) {\n                this.userAgent = userAgent;\n            }\n        },\n        {\n            key: \"_enrichAxiosOptions\",\n            value: function _enrichAxiosOptions() {\n                var _options$headers;\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n                    params: {},\n                    headers: {},\n                    config: {}\n                };\n                var token = this._getToken();\n                var authorization = token ? {\n                    Authorization: token\n                } : undefined;\n                var signal = null;\n                if (this.nextRequestAbortController !== null) {\n                    signal = this.nextRequestAbortController.signal;\n                    this.nextRequestAbortController = null;\n                }\n                if (!((_options$headers = options.headers) !== null && _options$headers !== void 0 && _options$headers[\"x-client-request-id\"])) {\n                    options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {\n                        \"x-client-request-id\": randomId()\n                    });\n                }\n                var _ref9 = this.options.axiosRequestConfig || {}, axiosRequestConfigParams = _ref9.params, axiosRequestConfigHeaders = _ref9.headers, axiosRequestConfigRest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default()(_ref9, _excluded2);\n                return _objectSpread(_objectSpread(_objectSpread({\n                    params: _objectSpread(_objectSpread({\n                        user_id: this.userID,\n                        connection_id: this._getConnectionID(),\n                        api_key: this.key\n                    }, options.params), axiosRequestConfigParams || {}),\n                    headers: _objectSpread(_objectSpread(_objectSpread({}, authorization), {}, {\n                        \"stream-auth-type\": this.getAuthType(),\n                        \"X-Stream-Client\": this.getUserAgent()\n                    }, options.headers), axiosRequestConfigHeaders || {})\n                }, signal ? {\n                    signal: signal\n                } : {}), options.config), axiosRequestConfigRest || {});\n            }\n        },\n        {\n            key: \"_getToken\",\n            value: function _getToken() {\n                if (!this.tokenManager || this.anonymous) return null;\n                return this.tokenManager.getToken();\n            }\n        },\n        {\n            key: \"_startCleaning\",\n            value: function _startCleaning() {\n                var that = this;\n                if (this.cleaningIntervalRef != null) {\n                    return;\n                }\n                this.cleaningIntervalRef = setInterval(function() {\n                    // call clean on the channel, used for calling the stop.typing event etc.\n                    for(var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++){\n                        var _channel7 = _Object$values2[_i3];\n                        _channel7.clean();\n                    }\n                }, 500);\n            }\n        },\n        {\n            key: \"verifyWebhook\",\n            value: /**\n     * checks signature of a request\n     * @param {string | Buffer} rawBody\n     * @param {string} signature from HTTP header\n     * @returns {boolean}\n     */ function verifyWebhook(requestBody, xSignature) {\n                return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n            }\n        },\n        {\n            key: \"getPermission\",\n            value: function getPermission(name) {\n                return this.get(\"\".concat(this.baseURL, \"/permissions/\").concat(name));\n            }\n        },\n        {\n            key: \"createPermission\",\n            value: function createPermission(permissionData) {\n                return this.post(\"\".concat(this.baseURL, \"/permissions\"), _objectSpread({}, permissionData));\n            }\n        },\n        {\n            key: \"updatePermission\",\n            value: function updatePermission(id, permissionData) {\n                return this.put(\"\".concat(this.baseURL, \"/permissions/\").concat(id), _objectSpread({}, permissionData));\n            }\n        },\n        {\n            key: \"deletePermission\",\n            value: function deletePermission(name) {\n                return this.delete(\"\".concat(this.baseURL, \"/permissions/\").concat(name));\n            }\n        },\n        {\n            key: \"listPermissions\",\n            value: function listPermissions() {\n                return this.get(\"\".concat(this.baseURL, \"/permissions\"));\n            }\n        },\n        {\n            key: \"createRole\",\n            value: function createRole(name) {\n                return this.post(\"\".concat(this.baseURL, \"/roles\"), {\n                    name: name\n                });\n            }\n        },\n        {\n            key: \"listRoles\",\n            value: function listRoles() {\n                return this.get(\"\".concat(this.baseURL, \"/roles\"));\n            }\n        },\n        {\n            key: \"deleteRole\",\n            value: function deleteRole(name) {\n                return this.delete(\"\".concat(this.baseURL, \"/roles/\").concat(name));\n            }\n        },\n        {\n            key: \"sync\",\n            value: function sync(channel_cids, last_sync_at) {\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                return this.post(\"\".concat(this.baseURL, \"/sync\"), _objectSpread({\n                    channel_cids: channel_cids,\n                    last_sync_at: last_sync_at\n                }, options));\n            }\n        },\n        {\n            key: \"sendUserCustomEvent\",\n            value: function() {\n                var _sendUserCustomEvent = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee67(targetUserID, event) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee67$(_context67) {\n                        while(1){\n                            switch(_context67.prev = _context67.next){\n                                case 0:\n                                    _context67.next = 2;\n                                    return this.post(\"\".concat(this.baseURL, \"/users/\").concat(targetUserID, \"/event\"), {\n                                        event: event\n                                    });\n                                case 2:\n                                    return _context67.abrupt(\"return\", _context67.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context67.stop();\n                            }\n                        }\n                    }, _callee67, this);\n                }));\n                function sendUserCustomEvent(_x92, _x93) {\n                    return _sendUserCustomEvent.apply(this, arguments);\n                }\n                return sendUserCustomEvent;\n            }()\n        },\n        {\n            key: \"createBlockList\",\n            value: function createBlockList(blockList) {\n                return this.post(\"\".concat(this.baseURL, \"/blocklists\"), blockList);\n            }\n        },\n        {\n            key: \"listBlockLists\",\n            value: function listBlockLists() {\n                return this.get(\"\".concat(this.baseURL, \"/blocklists\"));\n            }\n        },\n        {\n            key: \"getBlockList\",\n            value: function getBlockList(name) {\n                return this.get(\"\".concat(this.baseURL, \"/blocklists/\").concat(name));\n            }\n        },\n        {\n            key: \"updateBlockList\",\n            value: function updateBlockList(name, data) {\n                return this.put(\"\".concat(this.baseURL, \"/blocklists/\").concat(name), data);\n            }\n        },\n        {\n            key: \"deleteBlockList\",\n            value: function deleteBlockList(name) {\n                return this.delete(\"\".concat(this.baseURL, \"/blocklists/\").concat(name));\n            }\n        },\n        {\n            key: \"exportChannels\",\n            value: function exportChannels(request) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var payload = _objectSpread({\n                    channels: request\n                }, options);\n                return this.post(\"\".concat(this.baseURL, \"/export_channels\"), payload);\n            }\n        },\n        {\n            key: \"exportUsers\",\n            value: function exportUsers(request) {\n                return this.post(\"\".concat(this.baseURL, \"/export/users\"), request);\n            }\n        },\n        {\n            key: \"exportChannel\",\n            value: function exportChannel(request, options) {\n                return this.exportChannels([\n                    request\n                ], options);\n            }\n        },\n        {\n            key: \"getExportChannelStatus\",\n            value: function getExportChannelStatus(id) {\n                return this.get(\"\".concat(this.baseURL, \"/export_channels/\").concat(id));\n            }\n        },\n        {\n            key: \"campaign\",\n            value: function campaign(idOrData, data) {\n                if (idOrData && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(idOrData) === \"object\") {\n                    return new Campaign(this, null, idOrData);\n                }\n                return new Campaign(this, idOrData, data);\n            }\n        },\n        {\n            key: \"segment\",\n            value: function segment(type, idOrData, data) {\n                if (typeof idOrData === \"string\") {\n                    return new Segment(this, type, idOrData, data);\n                }\n                return new Segment(this, type, null, idOrData);\n            }\n        },\n        {\n            key: \"validateServerSideAuth\",\n            value: function validateServerSideAuth() {\n                if (!this.secret) {\n                    throw new Error(\"Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.\");\n                }\n            }\n        },\n        {\n            key: \"createSegment\",\n            value: function() {\n                var _createSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee68(type, id, data) {\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee68$(_context68) {\n                        while(1){\n                            switch(_context68.prev = _context68.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    body = _objectSpread({\n                                        id: id,\n                                        type: type\n                                    }, data);\n                                    return _context68.abrupt(\"return\", this.post(this.baseURL + \"/segments\", body));\n                                case 3:\n                                case \"end\":\n                                    return _context68.stop();\n                            }\n                        }\n                    }, _callee68, this);\n                }));\n                function createSegment(_x94, _x95, _x96) {\n                    return _createSegment.apply(this, arguments);\n                }\n                return createSegment;\n            }()\n        },\n        {\n            key: \"createUserSegment\",\n            value: function() {\n                var _createUserSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee69(id, data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee69$(_context69) {\n                        while(1){\n                            switch(_context69.prev = _context69.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context69.abrupt(\"return\", this.createSegment(\"user\", id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context69.stop();\n                            }\n                        }\n                    }, _callee69, this);\n                }));\n                function createUserSegment(_x97, _x98) {\n                    return _createUserSegment.apply(this, arguments);\n                }\n                return createUserSegment;\n            }()\n        },\n        {\n            key: \"createChannelSegment\",\n            value: function() {\n                var _createChannelSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee70(id, data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee70$(_context70) {\n                        while(1){\n                            switch(_context70.prev = _context70.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context70.abrupt(\"return\", this.createSegment(\"channel\", id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context70.stop();\n                            }\n                        }\n                    }, _callee70, this);\n                }));\n                function createChannelSegment(_x99, _x100) {\n                    return _createChannelSegment.apply(this, arguments);\n                }\n                return createChannelSegment;\n            }()\n        },\n        {\n            key: \"getSegment\",\n            value: function() {\n                var _getSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee71(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee71$(_context71) {\n                        while(1){\n                            switch(_context71.prev = _context71.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context71.abrupt(\"return\", this.get(this.baseURL + \"/segments/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context71.stop();\n                            }\n                        }\n                    }, _callee71, this);\n                }));\n                function getSegment(_x101) {\n                    return _getSegment.apply(this, arguments);\n                }\n                return getSegment;\n            }()\n        },\n        {\n            key: \"updateSegment\",\n            value: function() {\n                var _updateSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee72(id, data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee72$(_context72) {\n                        while(1){\n                            switch(_context72.prev = _context72.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context72.abrupt(\"return\", this.put(this.baseURL + \"/segments/\".concat(id), data));\n                                case 2:\n                                case \"end\":\n                                    return _context72.stop();\n                            }\n                        }\n                    }, _callee72, this);\n                }));\n                function updateSegment(_x102, _x103) {\n                    return _updateSegment.apply(this, arguments);\n                }\n                return updateSegment;\n            }()\n        },\n        {\n            key: \"addSegmentTargets\",\n            value: function() {\n                var _addSegmentTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee73(id, targets) {\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee73$(_context73) {\n                        while(1){\n                            switch(_context73.prev = _context73.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    body = {\n                                        target_ids: targets\n                                    };\n                                    return _context73.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(id, \"/addtargets\"), body));\n                                case 3:\n                                case \"end\":\n                                    return _context73.stop();\n                            }\n                        }\n                    }, _callee73, this);\n                }));\n                function addSegmentTargets(_x104, _x105) {\n                    return _addSegmentTargets.apply(this, arguments);\n                }\n                return addSegmentTargets;\n            }()\n        },\n        {\n            key: \"querySegmentTargets\",\n            value: function() {\n                var _querySegmentTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee74(id) {\n                    var filter, sort, options, _args74 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee74$(_context74) {\n                        while(1){\n                            switch(_context74.prev = _context74.next){\n                                case 0:\n                                    filter = _args74.length > 1 && _args74[1] !== undefined ? _args74[1] : {};\n                                    sort = _args74.length > 2 && _args74[2] !== undefined ? _args74[2] : [];\n                                    options = _args74.length > 3 && _args74[3] !== undefined ? _args74[3] : {};\n                                    this.validateServerSideAuth();\n                                    return _context74.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(id, \"/targets/query\"), _objectSpread({\n                                        filter: filter || {},\n                                        sort: sort || []\n                                    }, options)));\n                                case 5:\n                                case \"end\":\n                                    return _context74.stop();\n                            }\n                        }\n                    }, _callee74, this);\n                }));\n                function querySegmentTargets(_x106) {\n                    return _querySegmentTargets.apply(this, arguments);\n                }\n                return querySegmentTargets;\n            }()\n        },\n        {\n            key: \"removeSegmentTargets\",\n            value: function() {\n                var _removeSegmentTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee75(id, targets) {\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee75$(_context75) {\n                        while(1){\n                            switch(_context75.prev = _context75.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    body = {\n                                        target_ids: targets\n                                    };\n                                    return _context75.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(id, \"/deletetargets\"), body));\n                                case 3:\n                                case \"end\":\n                                    return _context75.stop();\n                            }\n                        }\n                    }, _callee75, this);\n                }));\n                function removeSegmentTargets(_x107, _x108) {\n                    return _removeSegmentTargets.apply(this, arguments);\n                }\n                return removeSegmentTargets;\n            }()\n        },\n        {\n            key: \"querySegments\",\n            value: function() {\n                var _querySegments = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee76(filter, sort) {\n                    var options, _args76 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee76$(_context76) {\n                        while(1){\n                            switch(_context76.prev = _context76.next){\n                                case 0:\n                                    options = _args76.length > 2 && _args76[2] !== undefined ? _args76[2] : {};\n                                    this.validateServerSideAuth();\n                                    return _context76.abrupt(\"return\", this.post(this.baseURL + \"/segments/query\", _objectSpread({\n                                        filter: filter,\n                                        sort: sort\n                                    }, options)));\n                                case 3:\n                                case \"end\":\n                                    return _context76.stop();\n                            }\n                        }\n                    }, _callee76, this);\n                }));\n                function querySegments(_x109, _x110) {\n                    return _querySegments.apply(this, arguments);\n                }\n                return querySegments;\n            }()\n        },\n        {\n            key: \"deleteSegment\",\n            value: function() {\n                var _deleteSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee77(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee77$(_context77) {\n                        while(1){\n                            switch(_context77.prev = _context77.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context77.abrupt(\"return\", this.delete(this.baseURL + \"/segments/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context77.stop();\n                            }\n                        }\n                    }, _callee77, this);\n                }));\n                function deleteSegment(_x111) {\n                    return _deleteSegment.apply(this, arguments);\n                }\n                return deleteSegment;\n            }()\n        },\n        {\n            key: \"segmentTargetExists\",\n            value: function() {\n                var _segmentTargetExists = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee78(segmentId, targetId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee78$(_context78) {\n                        while(1){\n                            switch(_context78.prev = _context78.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context78.abrupt(\"return\", this.get(this.baseURL + \"/segments/\".concat(segmentId, \"/target/\").concat(targetId)));\n                                case 2:\n                                case \"end\":\n                                    return _context78.stop();\n                            }\n                        }\n                    }, _callee78, this);\n                }));\n                function segmentTargetExists(_x112, _x113) {\n                    return _segmentTargetExists.apply(this, arguments);\n                }\n                return segmentTargetExists;\n            }()\n        },\n        {\n            key: \"createCampaign\",\n            value: function() {\n                var _createCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee79(params) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee79$(_context79) {\n                        while(1){\n                            switch(_context79.prev = _context79.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context79.abrupt(\"return\", this.post(this.baseURL + \"/campaigns\", _objectSpread({}, params)));\n                                case 2:\n                                case \"end\":\n                                    return _context79.stop();\n                            }\n                        }\n                    }, _callee79, this);\n                }));\n                function createCampaign(_x114) {\n                    return _createCampaign.apply(this, arguments);\n                }\n                return createCampaign;\n            }()\n        },\n        {\n            key: \"getCampaign\",\n            value: function() {\n                var _getCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee80(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee80$(_context80) {\n                        while(1){\n                            switch(_context80.prev = _context80.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context80.abrupt(\"return\", this.get(this.baseURL + \"/campaigns/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context80.stop();\n                            }\n                        }\n                    }, _callee80, this);\n                }));\n                function getCampaign(_x115) {\n                    return _getCampaign.apply(this, arguments);\n                }\n                return getCampaign;\n            }()\n        },\n        {\n            key: \"startCampaign\",\n            value: function() {\n                var _startCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee81(id, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee81$(_context81) {\n                        while(1){\n                            switch(_context81.prev = _context81.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context81.abrupt(\"return\", this.post(this.baseURL + \"/campaigns/\".concat(id, \"/start\"), {\n                                        scheduled_for: options === null || options === void 0 ? void 0 : options.scheduledFor,\n                                        stop_at: options === null || options === void 0 ? void 0 : options.stopAt\n                                    }));\n                                case 2:\n                                case \"end\":\n                                    return _context81.stop();\n                            }\n                        }\n                    }, _callee81, this);\n                }));\n                function startCampaign(_x116, _x117) {\n                    return _startCampaign.apply(this, arguments);\n                }\n                return startCampaign;\n            }()\n        },\n        {\n            key: \"queryCampaigns\",\n            value: function() {\n                var _queryCampaigns = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee82(filter, sort, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee82$(_context82) {\n                        while(1){\n                            switch(_context82.prev = _context82.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    _context82.next = 3;\n                                    return this.post(this.baseURL + \"/campaigns/query\", _objectSpread({\n                                        filter: filter,\n                                        sort: sort\n                                    }, options || {}));\n                                case 3:\n                                    return _context82.abrupt(\"return\", _context82.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context82.stop();\n                            }\n                        }\n                    }, _callee82, this);\n                }));\n                function queryCampaigns(_x118, _x119, _x120) {\n                    return _queryCampaigns.apply(this, arguments);\n                }\n                return queryCampaigns;\n            }()\n        },\n        {\n            key: \"updateCampaign\",\n            value: function() {\n                var _updateCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee83(id, params) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee83$(_context83) {\n                        while(1){\n                            switch(_context83.prev = _context83.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context83.abrupt(\"return\", this.put(this.baseURL + \"/campaigns/\".concat(id), params));\n                                case 2:\n                                case \"end\":\n                                    return _context83.stop();\n                            }\n                        }\n                    }, _callee83, this);\n                }));\n                function updateCampaign(_x121, _x122) {\n                    return _updateCampaign.apply(this, arguments);\n                }\n                return updateCampaign;\n            }()\n        },\n        {\n            key: \"deleteCampaign\",\n            value: function() {\n                var _deleteCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee84(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee84$(_context84) {\n                        while(1){\n                            switch(_context84.prev = _context84.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context84.abrupt(\"return\", this.delete(this.baseURL + \"/campaigns/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context84.stop();\n                            }\n                        }\n                    }, _callee84, this);\n                }));\n                function deleteCampaign(_x123) {\n                    return _deleteCampaign.apply(this, arguments);\n                }\n                return deleteCampaign;\n            }()\n        },\n        {\n            key: \"stopCampaign\",\n            value: function() {\n                var _stopCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee85(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee85$(_context85) {\n                        while(1){\n                            switch(_context85.prev = _context85.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context85.abrupt(\"return\", this.post(this.baseURL + \"/campaigns/\".concat(id, \"/stop\")));\n                                case 2:\n                                case \"end\":\n                                    return _context85.stop();\n                            }\n                        }\n                    }, _callee85, this);\n                }));\n                function stopCampaign(_x124) {\n                    return _stopCampaign.apply(this, arguments);\n                }\n                return stopCampaign;\n            }()\n        },\n        {\n            key: \"enrichURL\",\n            value: function() {\n                var _enrichURL = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee86(url) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee86$(_context86) {\n                        while(1){\n                            switch(_context86.prev = _context86.next){\n                                case 0:\n                                    return _context86.abrupt(\"return\", this.get(this.baseURL + \"/og\", {\n                                        url: url\n                                    }));\n                                case 1:\n                                case \"end\":\n                                    return _context86.stop();\n                            }\n                        }\n                    }, _callee86, this);\n                }));\n                function enrichURL(_x125) {\n                    return _enrichURL.apply(this, arguments);\n                }\n                return enrichURL;\n            }()\n        },\n        {\n            key: \"getTask\",\n            value: function() {\n                var _getTask = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee87(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee87$(_context87) {\n                        while(1){\n                            switch(_context87.prev = _context87.next){\n                                case 0:\n                                    return _context87.abrupt(\"return\", this.get(\"\".concat(this.baseURL, \"/tasks/\").concat(id)));\n                                case 1:\n                                case \"end\":\n                                    return _context87.stop();\n                            }\n                        }\n                    }, _callee87, this);\n                }));\n                function getTask(_x126) {\n                    return _getTask.apply(this, arguments);\n                }\n                return getTask;\n            }()\n        },\n        {\n            key: \"deleteChannels\",\n            value: function() {\n                var _deleteChannels = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee88(cids) {\n                    var options, _args88 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee88$(_context88) {\n                        while(1){\n                            switch(_context88.prev = _context88.next){\n                                case 0:\n                                    options = _args88.length > 1 && _args88[1] !== undefined ? _args88[1] : {};\n                                    _context88.next = 3;\n                                    return this.post(this.baseURL + \"/channels/delete\", _objectSpread({\n                                        cids: cids\n                                    }, options));\n                                case 3:\n                                    return _context88.abrupt(\"return\", _context88.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context88.stop();\n                            }\n                        }\n                    }, _callee88, this);\n                }));\n                function deleteChannels(_x127) {\n                    return _deleteChannels.apply(this, arguments);\n                }\n                return deleteChannels;\n            }()\n        },\n        {\n            key: \"deleteUsers\",\n            value: function() {\n                var _deleteUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee89(user_ids) {\n                    var options, _args89 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee89$(_context89) {\n                        while(1){\n                            switch(_context89.prev = _context89.next){\n                                case 0:\n                                    options = _args89.length > 1 && _args89[1] !== undefined ? _args89[1] : {};\n                                    if (!(typeof options.user !== \"undefined\" && ![\n                                        \"soft\",\n                                        \"hard\",\n                                        \"pruning\"\n                                    ].includes(options.user))) {\n                                        _context89.next = 3;\n                                        break;\n                                    }\n                                    throw new Error(\"Invalid delete user options. user must be one of [soft hard pruning]\");\n                                case 3:\n                                    if (!(typeof options.conversations !== \"undefined\" && ![\n                                        \"soft\",\n                                        \"hard\"\n                                    ].includes(options.conversations))) {\n                                        _context89.next = 5;\n                                        break;\n                                    }\n                                    throw new Error(\"Invalid delete user options. conversations must be one of [soft hard]\");\n                                case 5:\n                                    if (!(typeof options.messages !== \"undefined\" && ![\n                                        \"soft\",\n                                        \"hard\",\n                                        \"pruning\"\n                                    ].includes(options.messages))) {\n                                        _context89.next = 7;\n                                        break;\n                                    }\n                                    throw new Error(\"Invalid delete user options. messages must be one of [soft hard pruning]\");\n                                case 7:\n                                    _context89.next = 9;\n                                    return this.post(this.baseURL + \"/users/delete\", _objectSpread({\n                                        user_ids: user_ids\n                                    }, options));\n                                case 9:\n                                    return _context89.abrupt(\"return\", _context89.sent);\n                                case 10:\n                                case \"end\":\n                                    return _context89.stop();\n                            }\n                        }\n                    }, _callee89, this);\n                }));\n                function deleteUsers(_x128) {\n                    return _deleteUsers.apply(this, arguments);\n                }\n                return deleteUsers;\n            }()\n        },\n        {\n            key: \"_createImportURL\",\n            value: function() {\n                var _createImportURL2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee90(filename) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee90$(_context90) {\n                        while(1){\n                            switch(_context90.prev = _context90.next){\n                                case 0:\n                                    _context90.next = 2;\n                                    return this.post(this.baseURL + \"/import_urls\", {\n                                        filename: filename\n                                    });\n                                case 2:\n                                    return _context90.abrupt(\"return\", _context90.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context90.stop();\n                            }\n                        }\n                    }, _callee90, this);\n                }));\n                function _createImportURL(_x129) {\n                    return _createImportURL2.apply(this, arguments);\n                }\n                return _createImportURL;\n            }()\n        },\n        {\n            key: \"_createImport\",\n            value: function() {\n                var _createImport2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee91(path) {\n                    var options, _args91 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee91$(_context91) {\n                        while(1){\n                            switch(_context91.prev = _context91.next){\n                                case 0:\n                                    options = _args91.length > 1 && _args91[1] !== undefined ? _args91[1] : {\n                                        mode: \"upsert\"\n                                    };\n                                    _context91.next = 3;\n                                    return this.post(this.baseURL + \"/imports\", _objectSpread({\n                                        path: path\n                                    }, options));\n                                case 3:\n                                    return _context91.abrupt(\"return\", _context91.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context91.stop();\n                            }\n                        }\n                    }, _callee91, this);\n                }));\n                function _createImport(_x130) {\n                    return _createImport2.apply(this, arguments);\n                }\n                return _createImport;\n            }()\n        },\n        {\n            key: \"_getImport\",\n            value: function() {\n                var _getImport2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee92(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee92$(_context92) {\n                        while(1){\n                            switch(_context92.prev = _context92.next){\n                                case 0:\n                                    _context92.next = 2;\n                                    return this.get(this.baseURL + \"/imports/\".concat(id));\n                                case 2:\n                                    return _context92.abrupt(\"return\", _context92.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context92.stop();\n                            }\n                        }\n                    }, _callee92, this);\n                }));\n                function _getImport(_x131) {\n                    return _getImport2.apply(this, arguments);\n                }\n                return _getImport;\n            }()\n        },\n        {\n            key: \"_listImports\",\n            value: function() {\n                var _listImports2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee93(options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee93$(_context93) {\n                        while(1){\n                            switch(_context93.prev = _context93.next){\n                                case 0:\n                                    _context93.next = 2;\n                                    return this.get(this.baseURL + \"/imports\", options);\n                                case 2:\n                                    return _context93.abrupt(\"return\", _context93.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context93.stop();\n                            }\n                        }\n                    }, _callee93, this);\n                }));\n                function _listImports(_x132) {\n                    return _listImports2.apply(this, arguments);\n                }\n                return _listImports;\n            }()\n        },\n        {\n            key: \"upsertPushProvider\",\n            value: function() {\n                var _upsertPushProvider = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee94(pushProvider) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee94$(_context94) {\n                        while(1){\n                            switch(_context94.prev = _context94.next){\n                                case 0:\n                                    _context94.next = 2;\n                                    return this.post(this.baseURL + \"/push_providers\", {\n                                        push_provider: pushProvider\n                                    });\n                                case 2:\n                                    return _context94.abrupt(\"return\", _context94.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context94.stop();\n                            }\n                        }\n                    }, _callee94, this);\n                }));\n                function upsertPushProvider(_x133) {\n                    return _upsertPushProvider.apply(this, arguments);\n                }\n                return upsertPushProvider;\n            }()\n        },\n        {\n            key: \"deletePushProvider\",\n            value: function() {\n                var _deletePushProvider = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee95(_ref10) {\n                    var type, name;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee95$(_context95) {\n                        while(1){\n                            switch(_context95.prev = _context95.next){\n                                case 0:\n                                    type = _ref10.type, name = _ref10.name;\n                                    _context95.next = 3;\n                                    return this.delete(this.baseURL + \"/push_providers/\".concat(type, \"/\").concat(name));\n                                case 3:\n                                    return _context95.abrupt(\"return\", _context95.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context95.stop();\n                            }\n                        }\n                    }, _callee95, this);\n                }));\n                function deletePushProvider(_x134) {\n                    return _deletePushProvider.apply(this, arguments);\n                }\n                return deletePushProvider;\n            }()\n        },\n        {\n            key: \"listPushProviders\",\n            value: function() {\n                var _listPushProviders = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee96() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee96$(_context96) {\n                        while(1){\n                            switch(_context96.prev = _context96.next){\n                                case 0:\n                                    _context96.next = 2;\n                                    return this.get(this.baseURL + \"/push_providers\");\n                                case 2:\n                                    return _context96.abrupt(\"return\", _context96.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context96.stop();\n                            }\n                        }\n                    }, _callee96, this);\n                }));\n                function listPushProviders() {\n                    return _listPushProviders.apply(this, arguments);\n                }\n                return listPushProviders;\n            }()\n        },\n        {\n            key: \"createAbortControllerForNextRequest\",\n            value: function createAbortControllerForNextRequest() {\n                return this.nextRequestAbortController = new AbortController();\n            }\n        },\n        {\n            key: \"commitMessage\",\n            value: function() {\n                var _commitMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee97(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee97$(_context97) {\n                        while(1){\n                            switch(_context97.prev = _context97.next){\n                                case 0:\n                                    _context97.next = 2;\n                                    return this.post(this.baseURL + \"/messages/\".concat(id, \"/commit\"));\n                                case 2:\n                                    return _context97.abrupt(\"return\", _context97.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context97.stop();\n                            }\n                        }\n                    }, _callee97, this);\n                }));\n                function commitMessage(_x135) {\n                    return _commitMessage.apply(this, arguments);\n                }\n                return commitMessage;\n            }()\n        },\n        {\n            key: \"createPoll\",\n            value: function() {\n                var _createPoll = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee98(poll) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee98$(_context98) {\n                        while(1){\n                            switch(_context98.prev = _context98.next){\n                                case 0:\n                                    _context98.next = 2;\n                                    return this.post(this.baseURL + \"/polls\", poll);\n                                case 2:\n                                    return _context98.abrupt(\"return\", _context98.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context98.stop();\n                            }\n                        }\n                    }, _callee98, this);\n                }));\n                function createPoll(_x136) {\n                    return _createPoll.apply(this, arguments);\n                }\n                return createPoll;\n            }()\n        },\n        {\n            key: \"getPoll\",\n            value: function() {\n                var _getPoll = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee99(id, userId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee99$(_context99) {\n                        while(1){\n                            switch(_context99.prev = _context99.next){\n                                case 0:\n                                    _context99.next = 2;\n                                    return this.get(this.baseURL + \"/polls/\".concat(id), _objectSpread({}, userId ? {\n                                        user_id: userId\n                                    } : {}));\n                                case 2:\n                                    return _context99.abrupt(\"return\", _context99.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context99.stop();\n                            }\n                        }\n                    }, _callee99, this);\n                }));\n                function getPoll(_x137, _x138) {\n                    return _getPoll.apply(this, arguments);\n                }\n                return getPoll;\n            }()\n        },\n        {\n            key: \"updatePoll\",\n            value: function() {\n                var _updatePoll = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee100(poll) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee100$(_context100) {\n                        while(1){\n                            switch(_context100.prev = _context100.next){\n                                case 0:\n                                    _context100.next = 2;\n                                    return this.put(this.baseURL + \"/polls\", poll);\n                                case 2:\n                                    return _context100.abrupt(\"return\", _context100.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context100.stop();\n                            }\n                        }\n                    }, _callee100, this);\n                }));\n                function updatePoll(_x139) {\n                    return _updatePoll.apply(this, arguments);\n                }\n                return updatePoll;\n            }()\n        },\n        {\n            key: \"partialUpdatePoll\",\n            value: function() {\n                var _partialUpdatePoll = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee101(id, partialPollObject) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee101$(_context101) {\n                        while(1){\n                            switch(_context101.prev = _context101.next){\n                                case 0:\n                                    _context101.next = 2;\n                                    return this.patch(this.baseURL + \"/polls/\".concat(id), partialPollObject);\n                                case 2:\n                                    return _context101.abrupt(\"return\", _context101.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context101.stop();\n                            }\n                        }\n                    }, _callee101, this);\n                }));\n                function partialUpdatePoll(_x140, _x141) {\n                    return _partialUpdatePoll.apply(this, arguments);\n                }\n                return partialUpdatePoll;\n            }()\n        },\n        {\n            key: \"deletePoll\",\n            value: function() {\n                var _deletePoll = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee102(id, userId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee102$(_context102) {\n                        while(1){\n                            switch(_context102.prev = _context102.next){\n                                case 0:\n                                    _context102.next = 2;\n                                    return this.delete(this.baseURL + \"/polls/\".concat(id), _objectSpread({}, userId ? {\n                                        user_id: userId\n                                    } : {}));\n                                case 2:\n                                    return _context102.abrupt(\"return\", _context102.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context102.stop();\n                            }\n                        }\n                    }, _callee102, this);\n                }));\n                function deletePoll(_x142, _x143) {\n                    return _deletePoll.apply(this, arguments);\n                }\n                return deletePoll;\n            }()\n        },\n        {\n            key: \"closePoll\",\n            value: function() {\n                var _closePoll = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee103(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee103$(_context103) {\n                        while(1){\n                            switch(_context103.prev = _context103.next){\n                                case 0:\n                                    return _context103.abrupt(\"return\", this.partialUpdatePoll(id, {\n                                        set: {\n                                            is_closed: true\n                                        }\n                                    }));\n                                case 1:\n                                case \"end\":\n                                    return _context103.stop();\n                            }\n                        }\n                    }, _callee103, this);\n                }));\n                function closePoll(_x144) {\n                    return _closePoll.apply(this, arguments);\n                }\n                return closePoll;\n            }()\n        },\n        {\n            key: \"createPollOption\",\n            value: function() {\n                var _createPollOption = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee104(pollId, option) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee104$(_context104) {\n                        while(1){\n                            switch(_context104.prev = _context104.next){\n                                case 0:\n                                    _context104.next = 2;\n                                    return this.post(this.baseURL + \"/polls/\".concat(pollId, \"/options\"), option);\n                                case 2:\n                                    return _context104.abrupt(\"return\", _context104.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context104.stop();\n                            }\n                        }\n                    }, _callee104, this);\n                }));\n                function createPollOption(_x145, _x146) {\n                    return _createPollOption.apply(this, arguments);\n                }\n                return createPollOption;\n            }()\n        },\n        {\n            key: \"getPollOption\",\n            value: function() {\n                var _getPollOption = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee105(pollId, optionId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee105$(_context105) {\n                        while(1){\n                            switch(_context105.prev = _context105.next){\n                                case 0:\n                                    _context105.next = 2;\n                                    return this.get(this.baseURL + \"/polls/\".concat(pollId, \"/options/\").concat(optionId));\n                                case 2:\n                                    return _context105.abrupt(\"return\", _context105.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context105.stop();\n                            }\n                        }\n                    }, _callee105, this);\n                }));\n                function getPollOption(_x147, _x148) {\n                    return _getPollOption.apply(this, arguments);\n                }\n                return getPollOption;\n            }()\n        },\n        {\n            key: \"updatePollOption\",\n            value: function() {\n                var _updatePollOption = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee106(pollId, option) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee106$(_context106) {\n                        while(1){\n                            switch(_context106.prev = _context106.next){\n                                case 0:\n                                    _context106.next = 2;\n                                    return this.put(this.baseURL + \"/polls/\".concat(pollId, \"/options\"), option);\n                                case 2:\n                                    return _context106.abrupt(\"return\", _context106.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context106.stop();\n                            }\n                        }\n                    }, _callee106, this);\n                }));\n                function updatePollOption(_x149, _x150) {\n                    return _updatePollOption.apply(this, arguments);\n                }\n                return updatePollOption;\n            }()\n        },\n        {\n            key: \"deletePollOption\",\n            value: function() {\n                var _deletePollOption = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee107(pollId, optionId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee107$(_context107) {\n                        while(1){\n                            switch(_context107.prev = _context107.next){\n                                case 0:\n                                    _context107.next = 2;\n                                    return this.delete(this.baseURL + \"/polls/\".concat(pollId, \"/options/\").concat(optionId));\n                                case 2:\n                                    return _context107.abrupt(\"return\", _context107.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context107.stop();\n                            }\n                        }\n                    }, _callee107, this);\n                }));\n                function deletePollOption(_x151, _x152) {\n                    return _deletePollOption.apply(this, arguments);\n                }\n                return deletePollOption;\n            }()\n        },\n        {\n            key: \"castPollVote\",\n            value: function() {\n                var _castPollVote = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee108(messageId, pollId, vote) {\n                    var options, _args108 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee108$(_context108) {\n                        while(1){\n                            switch(_context108.prev = _context108.next){\n                                case 0:\n                                    options = _args108.length > 3 && _args108[3] !== undefined ? _args108[3] : {};\n                                    _context108.next = 3;\n                                    return this.post(this.baseURL + \"/messages/\".concat(messageId, \"/polls/\").concat(pollId, \"/vote\"), _objectSpread({\n                                        vote: vote\n                                    }, options));\n                                case 3:\n                                    return _context108.abrupt(\"return\", _context108.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context108.stop();\n                            }\n                        }\n                    }, _callee108, this);\n                }));\n                function castPollVote(_x153, _x154, _x155) {\n                    return _castPollVote.apply(this, arguments);\n                }\n                return castPollVote;\n            }()\n        },\n        {\n            key: \"addPollAnswer\",\n            value: function() {\n                var _addPollAnswer = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee109(messageId, pollId, answerText) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee109$(_context109) {\n                        while(1){\n                            switch(_context109.prev = _context109.next){\n                                case 0:\n                                    return _context109.abrupt(\"return\", this.castPollVote(messageId, pollId, {\n                                        answer_text: answerText\n                                    }));\n                                case 1:\n                                case \"end\":\n                                    return _context109.stop();\n                            }\n                        }\n                    }, _callee109, this);\n                }));\n                function addPollAnswer(_x156, _x157, _x158) {\n                    return _addPollAnswer.apply(this, arguments);\n                }\n                return addPollAnswer;\n            }()\n        },\n        {\n            key: \"removePollVote\",\n            value: function() {\n                var _removePollVote = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee110(messageId, pollId, voteId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee110$(_context110) {\n                        while(1){\n                            switch(_context110.prev = _context110.next){\n                                case 0:\n                                    _context110.next = 2;\n                                    return this.delete(this.baseURL + \"/messages/\".concat(messageId, \"/polls/\").concat(pollId, \"/vote/\").concat(voteId));\n                                case 2:\n                                    return _context110.abrupt(\"return\", _context110.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context110.stop();\n                            }\n                        }\n                    }, _callee110, this);\n                }));\n                function removePollVote(_x159, _x160, _x161) {\n                    return _removePollVote.apply(this, arguments);\n                }\n                return removePollVote;\n            }()\n        },\n        {\n            key: \"queryPolls\",\n            value: function() {\n                var _queryPolls = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee111() {\n                    var filter, sort, options, _args111 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee111$(_context111) {\n                        while(1){\n                            switch(_context111.prev = _context111.next){\n                                case 0:\n                                    filter = _args111.length > 0 && _args111[0] !== undefined ? _args111[0] : {};\n                                    sort = _args111.length > 1 && _args111[1] !== undefined ? _args111[1] : [];\n                                    options = _args111.length > 2 && _args111[2] !== undefined ? _args111[2] : {};\n                                    _context111.next = 5;\n                                    return this.post(this.baseURL + \"/polls/query\", _objectSpread({\n                                        filter: filter,\n                                        sort: normalizeQuerySort(sort)\n                                    }, options));\n                                case 5:\n                                    return _context111.abrupt(\"return\", _context111.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context111.stop();\n                            }\n                        }\n                    }, _callee111, this);\n                }));\n                function queryPolls() {\n                    return _queryPolls.apply(this, arguments);\n                }\n                return queryPolls;\n            }()\n        },\n        {\n            key: \"queryPollVotes\",\n            value: function() {\n                var _queryPollVotes = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee112(pollId) {\n                    var filter, sort, options, _args112 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee112$(_context112) {\n                        while(1){\n                            switch(_context112.prev = _context112.next){\n                                case 0:\n                                    filter = _args112.length > 1 && _args112[1] !== undefined ? _args112[1] : {};\n                                    sort = _args112.length > 2 && _args112[2] !== undefined ? _args112[2] : [];\n                                    options = _args112.length > 3 && _args112[3] !== undefined ? _args112[3] : {};\n                                    _context112.next = 5;\n                                    return this.post(this.baseURL + \"/polls/\".concat(pollId, \"/votes\"), _objectSpread({\n                                        filter: filter,\n                                        sort: normalizeQuerySort(sort)\n                                    }, options));\n                                case 5:\n                                    return _context112.abrupt(\"return\", _context112.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context112.stop();\n                            }\n                        }\n                    }, _callee112, this);\n                }));\n                function queryPollVotes(_x162) {\n                    return _queryPollVotes.apply(this, arguments);\n                }\n                return queryPollVotes;\n            }()\n        },\n        {\n            key: \"queryMessageHistory\",\n            value: function() {\n                var _queryMessageHistory = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee113() {\n                    var filter, sort, options, _args113 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee113$(_context113) {\n                        while(1){\n                            switch(_context113.prev = _context113.next){\n                                case 0:\n                                    filter = _args113.length > 0 && _args113[0] !== undefined ? _args113[0] : {};\n                                    sort = _args113.length > 1 && _args113[1] !== undefined ? _args113[1] : [];\n                                    options = _args113.length > 2 && _args113[2] !== undefined ? _args113[2] : {};\n                                    _context113.next = 5;\n                                    return this.post(this.baseURL + \"/messages/history\", _objectSpread({\n                                        filter: filter,\n                                        sort: normalizeQuerySort(sort)\n                                    }, options));\n                                case 5:\n                                    return _context113.abrupt(\"return\", _context113.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context113.stop();\n                            }\n                        }\n                    }, _callee113, this);\n                }));\n                function queryMessageHistory() {\n                    return _queryMessageHistory.apply(this, arguments);\n                }\n                return queryMessageHistory;\n            }()\n        },\n        {\n            key: \"updateFlags\",\n            value: function() {\n                var _updateFlags = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee114(message_ids, reviewed_by) {\n                    var options, _args114 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee114$(_context114) {\n                        while(1){\n                            switch(_context114.prev = _context114.next){\n                                case 0:\n                                    options = _args114.length > 2 && _args114[2] !== undefined ? _args114[2] : {};\n                                    _context114.next = 3;\n                                    return this.post(this.baseURL + \"/automod/v1/moderation/update_flags\", _objectSpread({\n                                        message_ids: message_ids,\n                                        reviewed_by: reviewed_by\n                                    }, options));\n                                case 3:\n                                    return _context114.abrupt(\"return\", _context114.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context114.stop();\n                            }\n                        }\n                    }, _callee114, this);\n                }));\n                function updateFlags(_x163, _x164) {\n                    return _updateFlags.apply(this, arguments);\n                }\n                return updateFlags;\n            }()\n        }\n    ], [\n        {\n            key: \"getInstance\",\n            value: function getInstance(key, secretOrOptions, options) {\n                if (!StreamChat._instance) {\n                    if (typeof secretOrOptions === \"string\") {\n                        StreamChat._instance = new StreamChat(key, secretOrOptions, options);\n                    } else {\n                        StreamChat._instance = new StreamChat(key, secretOrOptions);\n                    }\n                }\n                return StreamChat._instance;\n            }\n        }\n    ]);\n    return StreamChat;\n}();\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(StreamChat, \"_instance\", void 0);\nvar EVENT_MAP = {\n    \"channel.created\": true,\n    \"channel.deleted\": true,\n    \"channel.hidden\": true,\n    \"channel.kicked\": true,\n    \"channel.muted\": true,\n    \"channel.truncated\": true,\n    \"channel.unmuted\": true,\n    \"channel.updated\": true,\n    \"channel.visible\": true,\n    \"health.check\": true,\n    \"member.added\": true,\n    \"member.removed\": true,\n    \"member.updated\": true,\n    \"message.deleted\": true,\n    \"message.new\": true,\n    \"message.read\": true,\n    \"message.updated\": true,\n    \"message.undeleted\": true,\n    \"notification.added_to_channel\": true,\n    \"notification.channel_deleted\": true,\n    \"notification.channel_mutes_updated\": true,\n    \"notification.channel_truncated\": true,\n    \"notification.invite_accepted\": true,\n    \"notification.invite_rejected\": true,\n    \"notification.invited\": true,\n    \"notification.mark_read\": true,\n    \"notification.mark_unread\": true,\n    \"notification.message_new\": true,\n    \"notification.mutes_updated\": true,\n    \"notification.removed_from_channel\": true,\n    \"notification.thread_message_new\": true,\n    \"poll.closed\": true,\n    \"poll.updated\": true,\n    \"poll.vote_casted\": true,\n    \"poll.vote_changed\": true,\n    \"poll.vote_removed\": true,\n    \"reaction.deleted\": true,\n    \"reaction.new\": true,\n    \"reaction.updated\": true,\n    \"typing.start\": true,\n    \"typing.stop\": true,\n    \"user.banned\": true,\n    \"user.deleted\": true,\n    \"user.presence.changed\": true,\n    \"user.unbanned\": true,\n    \"user.unread_message_reminder\": true,\n    \"user.updated\": true,\n    \"user.watching.start\": true,\n    \"user.watching.stop\": true,\n    // local events\n    \"channels.queried\": true,\n    \"connection.changed\": true,\n    \"connection.recovered\": true,\n    \"transport.changed\": true,\n    \"capabilities.changed\": true\n};\nvar Allow = \"Allow\";\nvar Deny = \"Deny\";\nvar AnyResource = [\n    \"*\"\n];\nvar AnyRole = [\n    \"*\"\n];\nvar MaxPriority = 999;\nvar MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\nvar Permission = function Permission(name, priority) {\n    var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;\n    var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;\n    var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Permission);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"name\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"action\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"owner\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"priority\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"resources\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"roles\", void 0);\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n}; // deprecated\nvar AllowAll = new Permission(\"Allow all\", MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated\nvar DenyAll = new Permission(\"Deny all\", MinPriority, AnyResource, AnyRole, false, Deny);\nvar BuiltinRoles = {\n    Admin: \"admin\",\n    Anonymous: \"anonymous\",\n    ChannelMember: \"channel_member\",\n    ChannelModerator: \"channel_moderator\",\n    Guest: \"guest\",\n    User: \"user\"\n};\nvar BuiltinPermissions = {\n    AddLinks: \"Add Links\",\n    BanUser: \"Ban User\",\n    CreateChannel: \"Create Channel\",\n    CreateMessage: \"Create Message\",\n    CreateReaction: \"Create Reaction\",\n    DeleteAnyAttachment: \"Delete Any Attachment\",\n    DeleteAnyChannel: \"Delete Any Channel\",\n    DeleteAnyMessage: \"Delete Any Message\",\n    DeleteAnyReaction: \"Delete Any Reaction\",\n    DeleteOwnAttachment: \"Delete Own Attachment\",\n    DeleteOwnChannel: \"Delete Own Channel\",\n    DeleteOwnMessage: \"Delete Own Message\",\n    DeleteOwnReaction: \"Delete Own Reaction\",\n    ReadAnyChannel: \"Read Any Channel\",\n    ReadOwnChannel: \"Read Own Channel\",\n    RunMessageAction: \"Run Message Action\",\n    UpdateAnyChannel: \"Update Any Channel\",\n    UpdateAnyMessage: \"Update Any Message\",\n    UpdateMembersAnyChannel: \"Update Members Any Channel\",\n    UpdateMembersOwnChannel: \"Update Members Own Channel\",\n    UpdateOwnChannel: \"Update Own Channel\",\n    UpdateOwnMessage: \"Update Own Message\",\n    UploadAttachment: \"Upload Attachment\",\n    UseFrozenChannel: \"Send messages and reactions to frozen channels\"\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/stream-chat/dist/index.es.js\n");

/***/ })

};
;